------------------------------------------------------------------------------------------------------------------------
Score summary
------------------------------------------------------------------------------------------------------------------------
Analogy type                                                                         	#correct answers  	#questions  	correct answers [%] 
Integer binary operations (type semantic analogy): 111720                            	                96	         307	  31.270358306188925
Floating point binary operations (type semantic analogy): 6048                       	               119	         229	   51.96506550218341
Floating point / Integer binary operations (type semantic analogy): 84               	                11	          16	               68.75
Insertelement - Extractelement operations (type): 6720                               	                 0	           8	                 0.0
Floating point ops (fast-math analogies): 216                                        	                36	          43	   83.72093023255815
Insertelement - Extractelement operations (index analogy): 2352                      	                 5	           6	   83.33333333333333
Insertvalue - Extractvalue operations (index analogy): 4                             	                 4	           4	               100.0
Bitcast x to y - y to x (inverse operations analogy): 1275                           	               110	        1275	   8.627450980392156
Arithmetic integer binary operations (inverse operations analogy): 168               	                 0	           4	                 0.0
Arithmetic flpt binary operations (inverse operations analogy): 288                  	                 1	          12	   8.333333333333334
Trunc - s/zext (inverse operations analogy): 91                                      	                11	          91	  12.087912087912088
Fptou/si - s/uitofp (inverse operations analogy): 6                                  	                 2	           6	  33.333333333333336
Inttoptr - ptrtoint (inverse operations analogy): 136                                	                11	         136	   8.088235294117647
Structure - Vector equivalents (a): 450                                              	                 7	           8	                87.5


------------------------------------------------------------------------------------------------------------------------
Integer binary operations (type semantic analogy): 111720
------------------------------------------------------------------------------------------------------------------------
--- Correct predictions:

<%ID> = urem i32 <%ID>, <INT>                                                                                           
<%ID> = urem i64 <%ID>, <INT>                                                                                           
<%ID> = srem i32 <%ID>, <INT>                                                                                           
expected answer:
		<%ID> = srem i64 <%ID>, <INT>                                                                                           
Nearest neighbors:
		<%ID> = urem i64 <%ID>, <INT>                                                                                           
		<%ID> = srem i32 <%ID>, <INT>                                                                                           
		call void <@ID>({ i8 }* nonnull <%ID>, { float*, i64 }* nonnull dereferenceable(16) <%ID>, float* <%ID>, float* <%ID>, i64 <%ID>, i64 <%ID>, i64 <%ID>, float <%ID>, i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>)
		<%ID> = srem i64 <%ID>, <%ID>                                                                                           
		<%ID> = srem i64 <%ID>, <INT>                                                                                           

<%ID> = add i8 <%ID>, <%ID>                                                                                             
<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
<%ID> = sub i8 <%ID>, <%ID>                                                                                             
expected answer:
		<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = mul nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      

<%ID> = add i32 <%ID>, <%ID>                                                                                            
<%ID> = add <16 x i8> <%ID>, <%ID>                                                                                      
<%ID> = sub i32 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = sub <16 x i8> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <16 x i8> <%ID>, <%ID>                                                                                      
		<%ID> = load <16 x i8>, <16 x i8>* <%ID>, align 1                                                                       
		<%ID> = sub i32 <%ID>, <%ID>                                                                                            
		<%ID> = bitcast i8* <%ID> to <16 x i8>*                                                                                 
		<%ID> = sub <16 x i8> <%ID>, <%ID>                                                                                      

<%ID> = add i32 <%ID>, <%ID>                                                                                            
<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
<%ID> = sub i32 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = sub i32 <%ID>, <%ID>                                                                                            
		<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       
		<%ID> = add nsw <4 x i32> <%ID>, <%ID>                                                                                  

<%ID> = add nsw i32 <%ID>, <%ID>                                                                                        
<%ID> = add nsw <4 x i32> <%ID>, <%ID>                                                                                  
<%ID> = sub nsw i32 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = sub nsw <4 x i32> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = add nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = sub nsw i32 <%ID>, <%ID>                                                                                        
		<%ID> = sub nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      

<%ID> = add nsw i32 <%ID>, <%ID>                                                                                        
<%ID> = add nsw <8 x i32> <%ID>, <%ID>                                                                                  
<%ID> = sub nsw i32 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = sub nsw <8 x i32> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = add nsw <8 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw <8 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = sub nsw i32 <%ID>, <%ID>                                                                                        
		store <8 x i32> <%ID>, <8 x i32>* <%ID>, align 4                                                                        
		<%ID> = sub nsw <8 x i32> <%ID>, <%ID>                                                                                  

<%ID> = add i64 <%ID>, <%ID>                                                                                            
<%ID> = add <16 x i8> <%ID>, <%ID>                                                                                      
<%ID> = sub i64 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = sub <16 x i8> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <16 x i8> <%ID>, <%ID>                                                                                      
		store <16 x i8> <%ID>, <16 x i8>* <%ID>, align 1                                                                        
		<%ID> = load <16 x i8>, <16 x i8>* <%ID>, align 1                                                                       
		<%ID> = sub <16 x i8> <%ID>, <%ID>                                                                                      
		<%ID> = sub i64 <%ID>, <%ID>                                                                                            

<%ID> = add i64 <%ID>, <%ID>                                                                                            
<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
<%ID> = sub i64 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = sub i64 <%ID>, <%ID>                                                                                            
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      

<%ID> = add nsw i64 <%ID>, <%ID>                                                                                        
<%ID> = add nsw <4 x i32> <%ID>, <%ID>                                                                                  
<%ID> = sub nsw i64 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = sub nsw <4 x i32> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = add nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = sub nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 4                                                                        

<%ID> = add <16 x i8> <%ID>, <%ID>                                                                                      
<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
<%ID> = sub <16 x i8> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = bitcast <2 x i64> <%ID> to <4 x float>                                                                          
		<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = bitcast { { { i32*, i64 } } }* <%ID> to i64*                                                                    

<%ID> = add <16 x i8> <%ID>, <%ID>                                                                                      
<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
<%ID> = sub <16 x i8> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = sub <4 x i64> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 0                                                                         
		<%ID> = sub <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  

<%ID> = add nsw <4 x i32> <%ID>, <%ID>                                                                                  
<%ID> = add nsw <8 x i32> <%ID>, <%ID>                                                                                  
<%ID> = sub nsw <4 x i32> <%ID>, <%ID>                                                                                  
expected answer:
		<%ID> = sub nsw <8 x i32> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = add nsw <8 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = sub nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = sub nsw <8 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw <8 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = bitcast i32* <%ID> to <8 x i32>*                                                                                

<%ID> = add i8 <%ID>, <%ID>                                                                                             
<%ID> = add <4 x i8> <%ID>, <%ID>                                                                                       
<%ID> = mul i8 <%ID>, <%ID>                                                                                             
expected answer:
		<%ID> = mul <4 x i8> <%ID>, <%ID>                                                                                       
Nearest neighbors:
		<%ID> = add <4 x i8> <%ID>, <%ID>                                                                                       
		<%ID> = mul <4 x i8> <%ID>, <%ID>                                                                                       
		<%ID> = mul i8 <%ID>, <%ID>                                                                                             
		<%ID> = insertelement <4 x i8> <%ID>, <TYP> <%ID>, <TYP> 2                                                              
		<%ID> = insertelement <4 x i8> <%ID>, <TYP> <%ID>, <TYP> 1                                                              

<%ID> = add i8 <%ID>, <%ID>                                                                                             
<%ID> = add <8 x i8> <%ID>, <%ID>                                                                                       
<%ID> = mul i8 <%ID>, <%ID>                                                                                             
expected answer:
		<%ID> = mul <8 x i8> <%ID>, <%ID>                                                                                       
Nearest neighbors:
		<%ID> = add <8 x i8> <%ID>, <%ID>                                                                                       
		<%ID> = mul <8 x i8> <%ID>, <%ID>                                                                                       
		<%ID> = mul i8 <%ID>, <%ID>                                                                                             
		<%ID> = shufflevector <8 x i8> <%ID>, <8 x i8> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = extractelement <8 x i8> <%ID>, <TYP> 0                                                                          

<%ID> = add i8 <%ID>, <%ID>                                                                                             
<%ID> = add <32 x i8> <%ID>, <%ID>                                                                                      
<%ID> = mul i8 <%ID>, <%ID>                                                                                             
expected answer:
		<%ID> = mul <32 x i8> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <32 x i8> <%ID>, <%ID>                                                                                      
		<%ID> = mul i8 <%ID>, <%ID>                                                                                             
		<%ID> = mul <32 x i8> <%ID>, <%ID>                                                                                      
		<%ID> = phi <32 x i8> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                
		store <32 x i8> <%ID>, <32 x i8>* <%ID>, align 1                                                                        

<%ID> = add i8 <%ID>, <%ID>                                                                                             
<%ID> = add <4 x i16> <%ID>, <%ID>                                                                                      
<%ID> = mul i8 <%ID>, <%ID>                                                                                             
expected answer:
		<%ID> = mul <4 x i16> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <4 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = insertelement <4 x i16> undef, <TYP> <%ID>, <TYP> 0                                                             
		<%ID> = insertelement <4 x i16> <%ID>, <TYP> <%ID>, <TYP> 2                                                             
		<%ID> = insertelement <4 x i16> <%ID>, <TYP> <%ID>, <TYP> 3                                                             
		<%ID> = mul <4 x i16> <%ID>, <%ID>                                                                                      

<%ID> = add i8 <%ID>, <%ID>                                                                                             
<%ID> = add <8 x i16> <%ID>, <%ID>                                                                                      
<%ID> = mul i8 <%ID>, <%ID>                                                                                             
expected answer:
		<%ID> = mul <8 x i16> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <8 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = mul <8 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = mul i8 <%ID>, <%ID>                                                                                             
		<%ID> = shufflevector <8 x i16> <%ID>, <8 x i16> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = extractelement <8 x i16> <%ID>, <TYP> 0                                                                         

<%ID> = add i8 <%ID>, <%ID>                                                                                             
<%ID> = add <16 x i16> <%ID>, <%ID>                                                                                     
<%ID> = mul i8 <%ID>, <%ID>                                                                                             
expected answer:
		<%ID> = mul <16 x i16> <%ID>, <%ID>                                                                                     
Nearest neighbors:
		<%ID> = add <16 x i16> <%ID>, <%ID>                                                                                     
		<%ID> = mul <16 x i16> <%ID>, <%ID>                                                                                     
		<%ID> = mul i8 <%ID>, <%ID>                                                                                             
		<%ID> = insertelement <16 x i16> undef, <TYP> <%ID>, <TYP> 0                                                            
		<%ID> = shufflevector <16 x i16> <%ID>, <16 x i16> undef, <16 x i32> zeroinitializer                                    

<%ID> = add i8 <%ID>, <%ID>                                                                                             
<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
<%ID> = mul i8 <%ID>, <%ID>                                                                                             
expected answer:
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = phi <4 x i32> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = add nsw <4 x i32> <%ID>, <%ID>                                                                                  

<%ID> = add i8 <%ID>, <%ID>                                                                                             
<%ID> = add <8 x i32> <%ID>, <%ID>                                                                                      
<%ID> = mul i8 <%ID>, <%ID>                                                                                             
expected answer:
		<%ID> = mul <8 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <8 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = mul <8 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = extractelement <8 x i32> <%ID>, <TYP> 0                                                                         
		<%ID> = select <8 x i1> <%ID>, <8 x i32> <%ID>, <8 x i32> <%ID>                                                         
		<%ID> = phi <8 x i32> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                

<%ID> = add i32 <%ID>, <%ID>                                                                                            
<%ID> = add i64 <%ID>, <%ID>                                                                                            
<%ID> = mul nsw i32 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = mul nsw i64 <%ID>, <%ID>                                                                                        
Nearest neighbors:
		<%ID> = add i64 <%ID>, <%ID>                                                                                            
		<%ID> = mul nsw i32 <%ID>, <%ID>                                                                                        
		<%ID> = mul nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = load i32, i32* <%ID>, align 4                                                                                   
		<%ID> = icmp sgt i64 <%ID>, <%ID>                                                                                       

<%ID> = add nsw i32 <%ID>, <%ID>                                                                                        
<%ID> = add nsw i64 <%ID>, <%ID>                                                                                        
<%ID> = mul nsw i32 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = mul nsw i64 <%ID>, <%ID>                                                                                        
Nearest neighbors:
		<%ID> = add nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = mul nsw i32 <%ID>, <%ID>                                                                                        
		<%ID> = icmp slt i64 <%ID>, <INT>                                                                                       
		<%ID> = sub nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = mul nsw i64 <%ID>, <%ID>                                                                                        

<%ID> = add i32 <%ID>, <%ID>                                                                                            
<%ID> = add <4 x i8> <%ID>, <%ID>                                                                                       
<%ID> = mul i32 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul <4 x i8> <%ID>, <%ID>                                                                                       
Nearest neighbors:
		<%ID> = add <4 x i8> <%ID>, <%ID>                                                                                       
		<%ID> = mul <4 x i8> <%ID>, <%ID>                                                                                       
		<%ID> = mul i32 <%ID>, <%ID>                                                                                            
		<%ID> = insertelement <4 x i8> <%ID>, <TYP> <%ID>, <TYP> 2                                                              
		<%ID> = shufflevector <4 x i8> <%ID>, <4 x i8> undef, <4 x i32> zeroinitializer                                         

<%ID> = add i32 <%ID>, <%ID>                                                                                            
<%ID> = add <8 x i8> <%ID>, <%ID>                                                                                       
<%ID> = mul i32 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul <8 x i8> <%ID>, <%ID>                                                                                       
Nearest neighbors:
		<%ID> = add <8 x i8> <%ID>, <%ID>                                                                                       
		<%ID> = mul <8 x i8> <%ID>, <%ID>                                                                                       
		<%ID> = shufflevector <8 x i8> <%ID>, <8 x i8> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = shufflevector <8 x i8> <%ID>, <8 x i8> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = shufflevector <8 x i8> <%ID>, <8 x i8> undef, <8 x i32> zeroinitializer                                         

<%ID> = add i32 <%ID>, <%ID>                                                                                            
<%ID> = add <4 x i16> <%ID>, <%ID>                                                                                      
<%ID> = mul i32 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul <4 x i16> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <4 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = mul <4 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = insertelement <4 x i16> undef, <TYP> <%ID>, <TYP> 0                                                             
		<%ID> = insertelement <4 x i16> <%ID>, <TYP> <%ID>, <TYP> 2                                                             
		<%ID> = shufflevector <4 x i16> <%ID>, <4 x i16> undef, <4 x i32> zeroinitializer                                       

<%ID> = add i32 <%ID>, <%ID>                                                                                            
<%ID> = add <8 x i16> <%ID>, <%ID>                                                                                      
<%ID> = mul i32 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul <8 x i16> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <8 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = mul <8 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = shufflevector <8 x i16> <%ID>, <8 x i16> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = mul i32 <%ID>, <%ID>                                                                                            
		<%ID> = shufflevector <8 x i16> <%ID>, <8 x i16> undef, <8 x i32> zeroinitializer                                       

<%ID> = add i32 <%ID>, <%ID>                                                                                            
<%ID> = add <16 x i16> <%ID>, <%ID>                                                                                     
<%ID> = mul i32 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul <16 x i16> <%ID>, <%ID>                                                                                     
Nearest neighbors:
		<%ID> = add <16 x i16> <%ID>, <%ID>                                                                                     
		<%ID> = mul <16 x i16> <%ID>, <%ID>                                                                                     
		<%ID> = mul i32 <%ID>, <%ID>                                                                                            
		<%ID> = mul <8 x i16> <%ID>, <%ID>                                                                                      
		store <8 x i16> <%ID>, <8 x i16>* <%ID>, align 2                                                                        

<%ID> = add nsw i32 <%ID>, <%ID>                                                                                        
<%ID> = add nsw <4 x i32> <%ID>, <%ID>                                                                                  
<%ID> = mul nsw i32 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = mul nsw <4 x i32> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = add nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw i32 <%ID>, <%ID>                                                                                        
		<%ID> = mul nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      

<%ID> = add i32 <%ID>, <%ID>                                                                                            
<%ID> = add <8 x i32> <%ID>, <%ID>                                                                                      
<%ID> = mul i32 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul <8 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <8 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = mul i32 <%ID>, <%ID>                                                                                            
		<%ID> = mul <8 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = phi <8 x i32> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                
		<%ID> = icmp slt <8 x i32> <%ID>, <%ID>                                                                                 

<%ID> = add nsw i32 <%ID>, <%ID>                                                                                        
<%ID> = add nsw <8 x i32> <%ID>, <%ID>                                                                                  
<%ID> = mul nsw i32 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = mul nsw <8 x i32> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = add nsw <8 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw <8 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw i32 <%ID>, <%ID>                                                                                        
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = insertelement <8 x i32> undef, <TYP> <%ID>, <TYP> 0                                                             

<%ID> = add i32 <%ID>, <%ID>                                                                                            
<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
<%ID> = mul nsw i32 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 0                                                                         
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw i32 <%ID>, <%ID>                                                                                        

<%ID> = add nsw i32 <%ID>, <%ID>                                                                                        
<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
<%ID> = mul i32 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = mul i32 <%ID>, <%ID>                                                                                            
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      

<%ID> = add nsw i32 <%ID>, <%ID>                                                                                        
<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
<%ID> = mul nsw i32 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 0                                                                         

<%ID> = add i64 <%ID>, <%ID>                                                                                            
<%ID> = add <4 x i8> <%ID>, <%ID>                                                                                       
<%ID> = mul i64 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul <4 x i8> <%ID>, <%ID>                                                                                       
Nearest neighbors:
		<%ID> = add <4 x i8> <%ID>, <%ID>                                                                                       
		<%ID> = mul <4 x i8> <%ID>, <%ID>                                                                                       
		<%ID> = mul i64 <%ID>, <%ID>                                                                                            
		<%ID> = shufflevector <4 x i8> <%ID>, <4 x i8> undef, <4 x i32> zeroinitializer                                         
		<%ID> = insertelement <4 x i8> <%ID>, <TYP> <%ID>, <TYP> 2                                                              

<%ID> = add i64 <%ID>, <%ID>                                                                                            
<%ID> = add <8 x i8> <%ID>, <%ID>                                                                                       
<%ID> = mul i64 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul <8 x i8> <%ID>, <%ID>                                                                                       
Nearest neighbors:
		<%ID> = add <8 x i8> <%ID>, <%ID>                                                                                       
		<%ID> = mul <8 x i8> <%ID>, <%ID>                                                                                       
		<%ID> = shufflevector <8 x i8> <%ID>, <8 x i8> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = shufflevector <8 x i8> <%ID>, <8 x i8> undef, <8 x i32> <i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = mul i64 <%ID>, <%ID>                                                                                            

<%ID> = add i64 <%ID>, <%ID>                                                                                            
<%ID> = add <4 x i16> <%ID>, <%ID>                                                                                      
<%ID> = mul i64 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul <4 x i16> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <4 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = insertelement <4 x i16> undef, <TYP> <%ID>, <TYP> 0                                                             
		<%ID> = mul <4 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = insertelement <4 x i16> <%ID>, <TYP> <%ID>, <TYP> 3                                                             
		<%ID> = shufflevector <4 x i16> <%ID>, <4 x i16> undef, <4 x i32> zeroinitializer                                       

<%ID> = add i64 <%ID>, <%ID>                                                                                            
<%ID> = add <8 x i16> <%ID>, <%ID>                                                                                      
<%ID> = mul i64 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul <8 x i16> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <8 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = extractelement <8 x i16> <%ID>, <TYP> 0                                                                         
		<%ID> = mul <8 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = shufflevector <8 x i16> <%ID>, <8 x i16> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = shufflevector <8 x i16> <%ID>, <8 x i16> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>

<%ID> = add i64 <%ID>, <%ID>                                                                                            
<%ID> = add <16 x i16> <%ID>, <%ID>                                                                                     
<%ID> = mul i64 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul <16 x i16> <%ID>, <%ID>                                                                                     
Nearest neighbors:
		<%ID> = add <16 x i16> <%ID>, <%ID>                                                                                     
		<%ID> = mul <16 x i16> <%ID>, <%ID>                                                                                     
		<%ID> = mul i64 <%ID>, <%ID>                                                                                            
		<%ID> = bitcast i16* <%ID> to <32 x i16>*                                                                               
		<%ID> = phi i32 [ -1, <%ID> ], [ <%ID>, <%ID> ]                                                                         

<%ID> = add nsw i64 <%ID>, <%ID>                                                                                        
<%ID> = add nsw <4 x i32> <%ID>, <%ID>                                                                                  
<%ID> = mul nsw i64 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = mul nsw <4 x i32> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = add nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = sub nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      

<%ID> = add i64 <%ID>, <%ID>                                                                                            
<%ID> = add <8 x i32> <%ID>, <%ID>                                                                                      
<%ID> = mul i64 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul <8 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <8 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = phi <8 x i32> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                
		<%ID> = mul <8 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = mul i64 <%ID>, <%ID>                                                                                            
		<%ID> = shufflevector <8 x i32> <%ID>, <8 x i32> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef>

<%ID> = add nsw i64 <%ID>, <%ID>                                                                                        
<%ID> = add nsw <8 x i32> <%ID>, <%ID>                                                                                  
<%ID> = mul nsw i64 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = mul nsw <8 x i32> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = add nsw <8 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw <8 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = shufflevector <8 x i32> <%ID>, <8 x i32> undef, <8 x i32> zeroinitializer                                       
		<%ID> = mul nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = getelementptr inbounds { i32, i8* }, { i32, i8* }* <%ID>, i64 <INT>, i32 <INT>                                  

<%ID> = add i64 <%ID>, <%ID>                                                                                            
<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
<%ID> = mul nsw i64 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = mul nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 2                                                                         

<%ID> = add nsw i64 <%ID>, <%ID>                                                                                        
<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
<%ID> = mul i64 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 0                                                                         
		<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      

<%ID> = add nsw i64 <%ID>, <%ID>                                                                                        
<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
<%ID> = mul nsw i64 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 0                                                                         
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 1                                                                         

<%ID> = add <4 x i8> <%ID>, <%ID>                                                                                       
<%ID> = add <8 x i8> <%ID>, <%ID>                                                                                       
<%ID> = mul <4 x i8> <%ID>, <%ID>                                                                                       
expected answer:
		<%ID> = mul <8 x i8> <%ID>, <%ID>                                                                                       
Nearest neighbors:
		<%ID> = add <8 x i8> <%ID>, <%ID>                                                                                       
		<%ID> = mul <8 x i8> <%ID>, <%ID>                                                                                       
		<%ID> = insertelement <8 x i8> undef, <TYP> <%ID>, <TYP> 0                                                              
		<%ID> = shufflevector <8 x i8> <%ID>, <8 x i8> undef, <8 x i32> zeroinitializer                                         
		<%ID> = shufflevector <8 x i8> <%ID>, <8 x i8> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>

<%ID> = add <4 x i8> <%ID>, <%ID>                                                                                       
<%ID> = add <4 x i16> <%ID>, <%ID>                                                                                      
<%ID> = mul <4 x i8> <%ID>, <%ID>                                                                                       
expected answer:
		<%ID> = mul <4 x i16> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <4 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = mul <4 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = insertelement <4 x i16> undef, <TYP> <%ID>, <TYP> 0                                                             
		<%ID> = insertelement <4 x i16> <%ID>, <TYP> <%ID>, <TYP> 2                                                             
		<%ID> = insertelement <4 x i16> <%ID>, <TYP> <%ID>, <TYP> 3                                                             

<%ID> = add <4 x i8> <%ID>, <%ID>                                                                                       
<%ID> = add <8 x i16> <%ID>, <%ID>                                                                                      
<%ID> = mul <4 x i8> <%ID>, <%ID>                                                                                       
expected answer:
		<%ID> = mul <8 x i16> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <8 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = mul <8 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = shufflevector <8 x i16> <%ID>, <8 x i16> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = extractelement <8 x i16> <%ID>, <TYP> 0                                                                         
		<%ID> = shufflevector <8 x i16> <%ID>, <8 x i16> undef, <8 x i32> <i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>

<%ID> = add <4 x i8> <%ID>, <%ID>                                                                                       
<%ID> = add <16 x i16> <%ID>, <%ID>                                                                                     
<%ID> = mul <4 x i8> <%ID>, <%ID>                                                                                       
expected answer:
		<%ID> = mul <16 x i16> <%ID>, <%ID>                                                                                     
Nearest neighbors:
		<%ID> = add <16 x i16> <%ID>, <%ID>                                                                                     
		<%ID> = mul <16 x i16> <%ID>, <%ID>                                                                                     
		store i16 <%ID>, i16* <%ID>, align 4                                                                                    
		<%ID> = sub i16 <%ID>, <%ID>                                                                                            
		store i16 <INT>, i16* <%ID>, align 8                                                                                    

<%ID> = add <4 x i8> <%ID>, <%ID>                                                                                       
<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
<%ID> = mul <4 x i8> <%ID>, <%ID>                                                                                       
expected answer:
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = phi <4 x i32> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                

<%ID> = add <4 x i8> <%ID>, <%ID>                                                                                       
<%ID> = add <8 x i32> <%ID>, <%ID>                                                                                      
<%ID> = mul <4 x i8> <%ID>, <%ID>                                                                                       
expected answer:
		<%ID> = mul <8 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <8 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = mul <8 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = insertelement <8 x i32> <<TYP> undef, <TYP> 0, <TYP> 0, <TYP> 0, <TYP> 0, <TYP> 0, <TYP> 0, <TYP> 0>, <TYP> <%ID>, <TYP> 0
		<%ID> = shufflevector <8 x i32> <%ID>, <8 x i32> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = shufflevector <8 x i32> <%ID>, <8 x i32> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef>

<%ID> = add <8 x i8> <%ID>, <%ID>                                                                                       
<%ID> = add <4 x i16> <%ID>, <%ID>                                                                                      
<%ID> = mul <8 x i8> <%ID>, <%ID>                                                                                       
expected answer:
		<%ID> = mul <4 x i16> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <4 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = insertelement <4 x i16> <%ID>, <TYP> <%ID>, <TYP> 3                                                             
		<%ID> = mul <4 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = insertelement <4 x i16> undef, <TYP> <%ID>, <TYP> 0                                                             
		<%ID> = insertelement <4 x i16> <%ID>, <TYP> <%ID>, <TYP> 2                                                             

<%ID> = add <8 x i8> <%ID>, <%ID>                                                                                       
<%ID> = add <8 x i16> <%ID>, <%ID>                                                                                      
<%ID> = mul <8 x i8> <%ID>, <%ID>                                                                                       
expected answer:
		<%ID> = mul <8 x i16> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <8 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = mul <8 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = mul <8 x i8> <%ID>, <%ID>                                                                                       
		<%ID> = insertelement <8 x i16> undef, <TYP> <%ID>, <TYP> 0                                                             
		<%ID> = extractelement <8 x i16> <%ID>, <TYP> 0                                                                         

<%ID> = add <8 x i8> <%ID>, <%ID>                                                                                       
<%ID> = add <16 x i16> <%ID>, <%ID>                                                                                     
<%ID> = mul <8 x i8> <%ID>, <%ID>                                                                                       
expected answer:
		<%ID> = mul <16 x i16> <%ID>, <%ID>                                                                                     
Nearest neighbors:
		<%ID> = add <16 x i16> <%ID>, <%ID>                                                                                     
		<%ID> = mul <16 x i16> <%ID>, <%ID>                                                                                     
		<%ID> = sub i16 <%ID>, <%ID>                                                                                            
		<%ID> = mul i16 <%ID>, <%ID>                                                                                            
		<%ID> = bitcast i16* <%ID> to <16 x i16>*                                                                               

<%ID> = add <8 x i8> <%ID>, <%ID>                                                                                       
<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
<%ID> = mul <8 x i8> <%ID>, <%ID>                                                                                       
expected answer:
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = mul nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = add nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = phi <4 x i32> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                

<%ID> = add <8 x i8> <%ID>, <%ID>                                                                                       
<%ID> = add <8 x i32> <%ID>, <%ID>                                                                                      
<%ID> = mul <8 x i8> <%ID>, <%ID>                                                                                       
expected answer:
		<%ID> = mul <8 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <8 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = mul <8 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = phi <8 x i32> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                
		<%ID> = shufflevector <8 x i32> <%ID>, <8 x i32> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = extractelement <8 x i32> <%ID>, <TYP> 0                                                                         

<%ID> = add <32 x i8> <%ID>, <%ID>                                                                                      
<%ID> = add <4 x i16> <%ID>, <%ID>                                                                                      
<%ID> = mul <32 x i8> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = mul <4 x i16> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <4 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = mul <4 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = insertelement <4 x i16> <%ID>, <TYP> <%ID>, <TYP> 2                                                             
		<%ID> = insertelement <4 x i16> undef, <TYP> <%ID>, <TYP> 0                                                             
		<%ID> = insertelement <4 x i16> <%ID>, <TYP> <%ID>, <TYP> 3                                                             

<%ID> = add <32 x i8> <%ID>, <%ID>                                                                                      
<%ID> = add <8 x i16> <%ID>, <%ID>                                                                                      
<%ID> = mul <32 x i8> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = mul <8 x i16> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <8 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = shufflevector <8 x i16> <%ID>, <8 x i16> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = mul <32 x i8> <%ID>, <%ID>                                                                                      
		<%ID> = extractelement <8 x i16> <%ID>, <TYP> 0                                                                         
		<%ID> = mul <8 x i16> <%ID>, <%ID>                                                                                      

<%ID> = add <32 x i8> <%ID>, <%ID>                                                                                      
<%ID> = add <16 x i16> <%ID>, <%ID>                                                                                     
<%ID> = mul <32 x i8> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = mul <16 x i16> <%ID>, <%ID>                                                                                     
Nearest neighbors:
		<%ID> = add <16 x i16> <%ID>, <%ID>                                                                                     
		<%ID> = mul <32 x i8> <%ID>, <%ID>                                                                                      
		<%ID> = insertelement <16 x i16> undef, <TYP> <%ID>, <TYP> 0                                                            
		<%ID> = mul <16 x i16> <%ID>, <%ID>                                                                                     
		<%ID> = phi i16 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                    

<%ID> = add <32 x i8> <%ID>, <%ID>                                                                                      
<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
<%ID> = mul <32 x i8> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = mul nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = phi <4 x i32> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                
		<%ID> = load <4 x i32>, <4 x i32>* <%ID>, align 4                                                                       

<%ID> = add <32 x i8> <%ID>, <%ID>                                                                                      
<%ID> = add <8 x i32> <%ID>, <%ID>                                                                                      
<%ID> = mul <32 x i8> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = mul <8 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <8 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = phi <8 x i32> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                
		<%ID> = mul <8 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = insertelement <8 x i32> <<TYP> undef, <TYP> 0, <TYP> 0, <TYP> 0, <TYP> 0, <TYP> 0, <TYP> 0, <TYP> 0>, <TYP> <%ID>, <TYP> 0
		<%ID> = extractelement <8 x i32> <%ID>, <TYP> 0                                                                         

<%ID> = add <4 x i16> <%ID>, <%ID>                                                                                      
<%ID> = add <8 x i16> <%ID>, <%ID>                                                                                      
<%ID> = mul <4 x i16> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = mul <8 x i16> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <8 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = mul <8 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = shufflevector <8 x i16> <%ID>, <8 x i16> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = shufflevector <8 x i16> <%ID>, <8 x i16> undef, <8 x i32> zeroinitializer                                       
		<%ID> = insertelement <8 x i16> undef, <TYP> <%ID>, <TYP> 0                                                             

<%ID> = add <4 x i16> <%ID>, <%ID>                                                                                      
<%ID> = add <16 x i16> <%ID>, <%ID>                                                                                     
<%ID> = mul <4 x i16> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = mul <16 x i16> <%ID>, <%ID>                                                                                     
Nearest neighbors:
		<%ID> = add <16 x i16> <%ID>, <%ID>                                                                                     
		<%ID> = mul <16 x i16> <%ID>, <%ID>                                                                                     
		<%ID> = shufflevector <16 x i16> <%ID>, <16 x i16> undef, <16 x i32> zeroinitializer                                    
		<%ID> = sub i16 <%ID>, <%ID>                                                                                            
		<%ID> = insertelement <16 x i16> undef, <TYP> <%ID>, <TYP> 0                                                            

<%ID> = add <4 x i16> <%ID>, <%ID>                                                                                      
<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
<%ID> = mul <4 x i16> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       
		<%ID> = mul nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = phi <4 x i32> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      

<%ID> = add <4 x i16> <%ID>, <%ID>                                                                                      
<%ID> = add <8 x i32> <%ID>, <%ID>                                                                                      
<%ID> = mul <4 x i16> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = mul <8 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <8 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = mul <8 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = phi <8 x i32> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                
		<%ID> = icmp sgt <8 x i32> <%ID>, <%ID>                                                                                 
		<%ID> = icmp slt <8 x i32> <%ID>, <%ID>                                                                                 

<%ID> = add <8 x i16> <%ID>, <%ID>                                                                                      
<%ID> = add <16 x i16> <%ID>, <%ID>                                                                                     
<%ID> = mul <8 x i16> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = mul <16 x i16> <%ID>, <%ID>                                                                                     
Nearest neighbors:
		<%ID> = add <16 x i16> <%ID>, <%ID>                                                                                     
		<%ID> = mul <16 x i16> <%ID>, <%ID>                                                                                     
		<%ID> = mul <8 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = mul i16 <%ID>, <%ID>                                                                                            
		<%ID> = insertelement <16 x i16> undef, <TYP> <%ID>, <TYP> 0                                                            

<%ID> = add <8 x i16> <%ID>, <%ID>                                                                                      
<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
<%ID> = mul <8 x i16> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = add nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = mul nsw <4 x i32> <%ID>, <%ID>                                                                                  

<%ID> = add <8 x i16> <%ID>, <%ID>                                                                                      
<%ID> = add <8 x i32> <%ID>, <%ID>                                                                                      
<%ID> = mul <8 x i16> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = mul <8 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <8 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = mul <8 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = shufflevector <8 x i32> <%ID>, <8 x i32> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = add nsw <8 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = phi <8 x i32> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                

<%ID> = add <16 x i16> <%ID>, <%ID>                                                                                     
<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
<%ID> = mul <16 x i16> <%ID>, <%ID>                                                                                     
expected answer:
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = add nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = phi <4 x i32> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                

<%ID> = add <16 x i16> <%ID>, <%ID>                                                                                     
<%ID> = add <8 x i32> <%ID>, <%ID>                                                                                      
<%ID> = mul <16 x i16> <%ID>, <%ID>                                                                                     
expected answer:
		<%ID> = mul <8 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <8 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = mul <8 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = phi <8 x i32> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                
		<%ID> = shufflevector <8 x i32> <%ID>, <8 x i32> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = extractelement <8 x i32> <%ID>, <TYP> 0                                                                         

<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
<%ID> = add <8 x i32> <%ID>, <%ID>                                                                                      
<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = mul <8 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <8 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = mul <8 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = shufflevector <8 x i32> <%ID>, <8 x i32> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = phi <8 x i32> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                
		<%ID> = icmp sgt <8 x i32> <%ID>, <%ID>                                                                                 

<%ID> = add nsw <4 x i32> <%ID>, <%ID>                                                                                  
<%ID> = add nsw <8 x i32> <%ID>, <%ID>                                                                                  
<%ID> = mul nsw <4 x i32> <%ID>, <%ID>                                                                                  
expected answer:
		<%ID> = mul nsw <8 x i32> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = add nsw <8 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw <8 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = shufflevector <8 x i32> <%ID>, <8 x i32> undef, <8 x i32> zeroinitializer                                       
		<%ID> = sub nsw <8 x i32> <%ID>, <%ID>                                                                                  

<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 0                                                                         
		<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      

<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
<%ID> = mul nsw <4 x i32> <%ID>, <%ID>                                                                                  
expected answer:
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 0                                                                         
		<%ID> = sub <4 x i64> <%ID>, <%ID>                                                                                      

<%ID> = add nsw <4 x i32> <%ID>, <%ID>                                                                                  
<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      

<%ID> = add nsw <4 x i32> <%ID>, <%ID>                                                                                  
<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
<%ID> = mul nsw <4 x i32> <%ID>, <%ID>                                                                                  
expected answer:
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 0                                                                         
		<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      

<%ID> = add <8 x i32> <%ID>, <%ID>                                                                                      
<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
<%ID> = mul <8 x i32> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 0                                                                         
		<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      

<%ID> = add <8 x i32> <%ID>, <%ID>                                                                                      
<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
<%ID> = mul nsw <8 x i32> <%ID>, <%ID>                                                                                  
expected answer:
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 0                                                                         
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw <8 x i32> <%ID>, <%ID>                                                                                  

<%ID> = add nsw <8 x i32> <%ID>, <%ID>                                                                                  
<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
<%ID> = mul <8 x i32> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = mul <8 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      

<%ID> = add nsw <8 x i32> <%ID>, <%ID>                                                                                  
<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
<%ID> = mul nsw <8 x i32> <%ID>, <%ID>                                                                                  
expected answer:
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 0                                                                         
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = phi <4 x i64> [ <%ID>, <%ID> ], [ zeroinitializer, <%ID> ]                                                      

<%ID> = sub i8 <%ID>, <%ID>                                                                                             
<%ID> = sub <4 x i64> <%ID>, <%ID>                                                                                      
<%ID> = mul i8 <%ID>, <%ID>                                                                                             
expected answer:
		<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = sub <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = mul i8 <%ID>, <%ID>                                                                                             
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      

<%ID> = sub nsw i32 <%ID>, <%ID>                                                                                        
<%ID> = sub nsw i64 <%ID>, <%ID>                                                                                        
<%ID> = mul nsw i32 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = mul nsw i64 <%ID>, <%ID>                                                                                        
Nearest neighbors:
		<%ID> = sub nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = mul nsw i32 <%ID>, <%ID>                                                                                        
		<%ID> = icmp sgt i64 <%ID>, <%ID>                                                                                       
		<%ID> = mul nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = add nsw i64 <%ID>, <%ID>                                                                                        

<%ID> = sub nsw i32 <%ID>, <%ID>                                                                                        
<%ID> = sub nsw <4 x i32> <%ID>, <%ID>                                                                                  
<%ID> = mul nsw i32 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = mul nsw <4 x i32> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = sub nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw i32 <%ID>, <%ID>                                                                                        
		<%ID> = add nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = insertelement <4 x i32> undef, <TYP> <%ID>, <TYP> 0                                                             

<%ID> = sub nsw i32 <%ID>, <%ID>                                                                                        
<%ID> = sub nsw <8 x i32> <%ID>, <%ID>                                                                                  
<%ID> = mul nsw i32 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = mul nsw <8 x i32> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = sub nsw <8 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw i32 <%ID>, <%ID>                                                                                        
		<%ID> = mul nsw <8 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = add nsw <8 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = icmp ult i32* <%ID>, <%ID>                                                                                      

<%ID> = sub i32 <%ID>, <%ID>                                                                                            
<%ID> = sub <4 x i64> <%ID>, <%ID>                                                                                      
<%ID> = mul nsw i32 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = sub <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = mul nsw i32 <%ID>, <%ID>                                                                                        
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  

<%ID> = sub nsw i32 <%ID>, <%ID>                                                                                        
<%ID> = sub nsw <4 x i64> <%ID>, <%ID>                                                                                  
<%ID> = mul nsw i32 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = sub nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw i32 <%ID>, <%ID>                                                                                        
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = lshr <4 x i64> <%ID>, <%ID>                                                                                     
		call void <@ID>(metadata i64 <INT>())                                                                                   

<%ID> = sub nsw i64 <%ID>, <%ID>                                                                                        
<%ID> = sub nsw <4 x i32> <%ID>, <%ID>                                                                                  
<%ID> = mul nsw i64 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = mul nsw <4 x i32> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = sub nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = add nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = icmp eq i32 <%ID>, <INT>                                                                                        
		<%ID> = mul nsw <4 x i32> <%ID>, <%ID>                                                                                  

<%ID> = sub nsw i64 <%ID>, <%ID>                                                                                        
<%ID> = sub nsw <8 x i32> <%ID>, <%ID>                                                                                  
<%ID> = mul nsw i64 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = mul nsw <8 x i32> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = sub nsw <8 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = mul nsw <8 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = extractvalue { i32, i32, i32, i32 } <%ID>, 2                                                                    
		<%ID> = fsub fast <8 x float> <%ID>, <%ID>                                                                              

<%ID> = sub i64 <%ID>, <%ID>                                                                                            
<%ID> = sub <4 x i64> <%ID>, <%ID>                                                                                      
<%ID> = mul nsw i64 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = sub <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = mul nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  

<%ID> = sub nsw i64 <%ID>, <%ID>                                                                                        
<%ID> = sub nsw <4 x i64> <%ID>, <%ID>                                                                                  
<%ID> = mul nsw i64 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = sub nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = lshr <4 x i64> <%ID>, <%ID>                                                                                     
		<%ID> = lshr i64 <INT>, <%ID>                                                                                           

<%ID> = sub <8 x i16> <%ID>, <%ID>                                                                                      
<%ID> = sub <4 x i64> <%ID>, <%ID>                                                                                      
<%ID> = mul <8 x i16> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = sub <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = mul <8 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = getelementptr inbounds { { { double, double }*, i64 } }, { { { double, double }*, i64 } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>
		<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  

<%ID> = sub nsw <4 x i32> <%ID>, <%ID>                                                                                  
<%ID> = sub nsw <8 x i32> <%ID>, <%ID>                                                                                  
<%ID> = mul nsw <4 x i32> <%ID>, <%ID>                                                                                  
expected answer:
		<%ID> = mul nsw <8 x i32> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = sub nsw <8 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw <8 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = add nsw <8 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      

<%ID> = sub nsw <4 x i32> <%ID>, <%ID>                                                                                  
<%ID> = sub nsw <4 x i64> <%ID>, <%ID>                                                                                  
<%ID> = mul nsw <4 x i32> <%ID>, <%ID>                                                                                  
expected answer:
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = sub nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = lshr <4 x i64> <%ID>, <%ID>                                                                                     
		<%ID> = mul nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = select <4 x i1> <%ID>, <4 x i64> <%ID>, <4 x i64> <%ID>                                                         

<%ID> = sub nsw <8 x i32> <%ID>, <%ID>                                                                                  
<%ID> = sub nsw <4 x i64> <%ID>, <%ID>                                                                                  
<%ID> = mul <8 x i32> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = sub nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = mul <8 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = phi <4 x i64> [ <%ID>, <%ID> ], [ undef, <%ID> ]                                                                

<%ID> = sub nsw <8 x i32> <%ID>, <%ID>                                                                                  
<%ID> = sub nsw <4 x i64> <%ID>, <%ID>                                                                                  
<%ID> = mul nsw <8 x i32> <%ID>, <%ID>                                                                                  
expected answer:
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = sub nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw <8 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = lshr <4 x i64> <%ID>, <%ID>                                                                                     
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = getelementptr double, double* <%ID>, i64 <INT>                                                                  

<%ID> = udiv i32 <%ID>, <%ID>                                                                                           
<%ID> = udiv i64 <%ID>, <%ID>                                                                                           
<%ID> = sdiv i32 <%ID>, <%ID>                                                                                           
expected answer:
		<%ID> = sdiv i64 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = udiv i64 <%ID>, <%ID>                                                                                           
		<%ID> = sdiv i32 <%ID>, <%ID>                                                                                           
		<%ID> = srem i64 <%ID>, <%ID>                                                                                           
		<%ID> = sdiv i64 <%ID>, <%ID>                                                                                           
		<%ID> = srem i64 <%ID>, <INT>                                                                                           

<%ID> = sdiv i32 <%ID>, <%ID>                                                                                           
<%ID> = sdiv i64 <%ID>, <%ID>                                                                                           
<%ID> = srem i32 <%ID>, <%ID>                                                                                           
expected answer:
		<%ID> = srem i64 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = sdiv i64 <%ID>, <%ID>                                                                                           
		<%ID> = srem i32 <%ID>, <%ID>                                                                                           
		<%ID> = udiv i64 <%ID>, <%ID>                                                                                           
		<%ID> = srem i64 <%ID>, <%ID>                                                                                           
		<%ID> = getelementptr inbounds { { { i32 (...)** }*, i8, i64, i64, i8*, i8* }, { { { i32, i16 }*, { i32, i16 }*, { { { i32, i16 }* } } } }, i16, i8, i8, { { i32*, i32*, { { i32* } } } }, i64, i8, i8, { { opaque*, { { opaque } }, { { i64, { { { i32 (...)** }*, i8, i64, i64, i8*, i8* }* } } } } }* }, { { { i32 (...)** }*, i8, i64, i64, i8*, i8* }, { { { i32, i16 }*, { i32, i16 }*, { { { i32, i16 }* } } } }, i16, i8, i8, { { i32*, i32*, { { i32* } } } }, i64, i8, i8, { { opaque*, { { opaque } }, { { i64, { { { i32 (...)** }*, i8, i64, i64, i8*, i8* }* } } } } }* }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>

--- Incorrect predictions:

<%ID> = add i32 <%ID>, <INT>                                                                                            
<%ID> = add i64 <%ID>, <INT>                                                                                            
<%ID> = sub nsw i32 <%ID>, <INT>                                                                                        
expected answer:
		<%ID> = sub nsw i64 <%ID>, <INT>                                                                                        
Nearest neighbors:
		<%ID> = sub nsw i32 <%ID>, <INT>                                                                                        
		<%ID> = add i64 <%ID>, <INT>                                                                                            
		define void <@ID>(i64*, i64*, i64*)                                                                                     
		<%ID> = and i1 <%ID>, <%ID>                                                                                             
		invoke void <@ID>({ i32, i32, i32, i32, i8*, i8*, i8*, i8*, { i32 (...)** }*, { { i32 (...)** }*, { i32 (...)** }*, i32, i32, i8*, i8*, i64, i32, i8*, i8*, i32, i32, opaque* }*, { i32* }, { i64*, [2 x i64] } }* nonnull sret <%ID>, { i32, i8*, { i32, i32 } }* nonnull <%ID>, i32 <INT>)
 to label <%ID> unwind label <%ID>

<%ID> = add nuw i32 <%ID>, <INT>                                                                                        
<%ID> = add nuw i64 <%ID>, <INT>                                                                                        
<%ID> = sub nsw i32 <%ID>, <INT>                                                                                        
expected answer:
		<%ID> = sub nsw i64 <%ID>, <INT>                                                                                        
Nearest neighbors:
		<%ID> = sub nsw i32 <%ID>, <INT>                                                                                        
		<%ID> = add nuw i64 <%ID>, <INT>                                                                                        
		<%ID> = lshr i64 <%ID>, <INT>                                                                                           
		<%ID> = load <{ { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, opaque*, opaque*, <{ { { i32 (...)** } }, { { { opaque*, { { opaque } }, { { i64 } } } }, { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* }, { { i8* } }, { [1 x i32] }, i32, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, i8, i8, i8, i8, [4 x i8] }>*, { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, opaque*, { i64 }*, i32, i32, i8, i8, i8, i32, i32, opaque*, opaque*, opaque*, opaque*, opaque*, <{ { { i32 (...)** } }, { { { opaque*, { { opaque } }, { { i64 } } } }, { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* }, { { i8* } }, { [1 x i32] }, i32, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, i32, i8, i8, i8, i8, i32, [4 x i8] }>*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { i64 } }*, opaque*, opaque*, opaque*, { i32, i32, { { { i32 (...)** } }, { { { opaque*, { { opaque } }, { { i64 } } } }, { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* }, { { i8* } }, { [1 x i32] }, i32, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } } }* }*, { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, opaque*, { i64 }*, i32, i32, i8, i8, i8, i32, i32, opaque*, opaque*, opaque*, opaque*, opaque*, <{ { { i32 (...)** } }, { { { opaque*, { { opaque } }, { { i64 } } } }, { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* }, { { i8* } }, { [1 x i32] }, i32, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, i32, i8, i8, i8, i8, i32, [4 x i8] }>*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { i64 } }*, { i32, i32 }*, { { { { { { i64, i64, i8* } } } } } }**, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, [6 x i8] }>*, <{ { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, opaque*, opaque*, <{ { { i32 (...)** } }, { { { opaque*, { { opaque } }, { { i64 } } } }, { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* }, { { i8* } }, { [1 x i32] }, i32, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, i8, i8, i8, i8, [4 x i8] }>*, { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, opaque*, { i64 }*, i32, i32, i8, i8, i8, i32, i32, opaque*, opaque*, opaque*, opaque*, opaque*, <{ { { i32 (...)** } }, { { { opaque*, { { opaque } }, { { i64 } } } }, { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* }, { { i8* } }, { [1 x i32] }, i32, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, i32, i8, i8, i8, i8, i32, [4 x i8] }>*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { i64 } }*, opaque*, opaque*, opaque*, { i32, i32, { { { i32 (...)** } }, { { { opaque*, { { opaque } }, { { i64 } } } }, { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* }, { { i8* } }, { [1 x i32] }, i32, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } } }* }*, { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, opaque*, { i64 }*, i32, i32, i8, i8, i8, i32, i32, opaque*, opaque*, opaque*, opaque*, opaque*, <{ { { i32 (...)** } }, { { { opaque*, { { opaque } }, { { i64 } } } }, { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* }, { { i8* } }, { [1 x i32] }, i32, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, i32, i8, i8, i8, i8, i32, [4 x i8] }>*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { i64 } }*, { i32, i32 }*, { { { { { { i64, i64, i8* } } } } } }**, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, [6 x i8] }>** <%ID>, align 8
		<%ID> = load i8, i8* <%ID>, align 8                                                                                     

<%ID> = add nsw i32 <%ID>, <INT>                                                                                        
<%ID> = add nsw i64 <%ID>, <INT>                                                                                        
<%ID> = sub nsw i32 <%ID>, <INT>                                                                                        
expected answer:
		<%ID> = sub nsw i64 <%ID>, <INT>                                                                                        
Nearest neighbors:
		<%ID> = sub nsw i32 <%ID>, <INT>                                                                                        
		<%ID> = add nsw i64 <%ID>, <INT>                                                                                        
		<%ID> = getelementptr inbounds { double, double }, { double, double }* <%ID>, i32 <INT>, i32 <INT>                      
		<%ID> = getelementptr inbounds { i32, i32, i32, i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32, i32, i32, i32 }* <%ID>, i64 <INT>, i32 <INT>
		<%ID> = load { { double, double } }*, { { double, double } }** <%ID>, align 8                                           

<%ID> = add nuw nsw i32 <%ID>, <INT>                                                                                    
<%ID> = add nuw nsw i64 <%ID>, <INT>                                                                                    
<%ID> = sub nsw i32 <%ID>, <INT>                                                                                        
expected answer:
		<%ID> = sub nsw i64 <%ID>, <INT>                                                                                        
Nearest neighbors:
		<%ID> = sub nsw i32 <%ID>, <INT>                                                                                        
		<%ID> = add nuw nsw i64 <%ID>, <INT>                                                                                    
		<%ID> = alloca i16*, align 8                                                                                            
		define void <@ID>(i32*, i32*, i32*)                                                                                     
		define void <@ID>(i16*, i16*, i16*)                                                                                     

<%ID> = add i8 <%ID>, <INT>                                                                                             
<%ID> = add i32 <%ID>, <INT>                                                                                            
<%ID> = mul i8 <%ID>, <INT>                                                                                             
expected answer:
		<%ID> = mul i32 <%ID>, <INT>                                                                                            
Nearest neighbors:
		<%ID> = mul i8 <%ID>, <INT>                                                                                             
		<%ID> = add i32 <%ID>, <INT>                                                                                            
		<%ID> = icmp ugt i32 <%ID>, <%ID>                                                                                       
		<%ID> = mul nsw i32 <%ID>, <%ID>                                                                                        
		<%ID> = phi i32 [ <%ID>, <%ID> ]                                                                                        

<%ID> = add nsw i8 <%ID>, <INT>                                                                                         
<%ID> = add nsw i32 <%ID>, <INT>                                                                                        
<%ID> = mul i8 <%ID>, <INT>                                                                                             
expected answer:
		<%ID> = mul i32 <%ID>, <INT>                                                                                            
Nearest neighbors:
		<%ID> = mul i8 <%ID>, <INT>                                                                                             
		<%ID> = add nsw i32 <%ID>, <INT>                                                                                        
		<%ID> = trunc i32 <%ID> to i3                                                                                           
		<%ID> = mul i32 <%ID>, <%ID>                                                                                            
		<%ID> = icmp sgt i32 <%ID>, <INT>                                                                                       

<%ID> = add i8 <%ID>, <INT>                                                                                             
<%ID> = add i64 <%ID>, <INT>                                                                                            
<%ID> = mul i8 <%ID>, <INT>                                                                                             
expected answer:
		<%ID> = mul i64 <%ID>, <INT>                                                                                            
Nearest neighbors:
		<%ID> = mul i8 <%ID>, <INT>                                                                                             
		<%ID> = add i64 <%ID>, <INT>                                                                                            
		<%ID> = and i64 <%ID>, <INT>                                                                                            
		<%ID> = icmp ult i64 <%ID>, <INT>                                                                                       
		<%ID> = load i64, i64* <%ID>, align 8                                                                                   

<%ID> = add nsw i8 <%ID>, <INT>                                                                                         
<%ID> = add nsw i64 <%ID>, <INT>                                                                                        
<%ID> = mul i8 <%ID>, <INT>                                                                                             
expected answer:
		<%ID> = mul i64 <%ID>, <INT>                                                                                            
Nearest neighbors:
		<%ID> = mul i8 <%ID>, <INT>                                                                                             
		<%ID> = add nsw i64 <%ID>, <INT>                                                                                        
		<%ID> = add nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = or i64 <%ID>, <%ID>                                                                                             
		<%ID> = phi i64 [ <%ID>, <%ID> ], [ 0, <%ID> ]                                                                          

<%ID> = add i32 <%ID>, <INT>                                                                                            
<%ID> = add i64 <%ID>, <INT>                                                                                            
<%ID> = mul i32 <%ID>, <INT>                                                                                            
expected answer:
		<%ID> = mul i64 <%ID>, <INT>                                                                                            
Nearest neighbors:
		<%ID> = mul i32 <%ID>, <INT>                                                                                            
		<%ID> = add i64 <%ID>, <INT>                                                                                            
		<%ID> = and i1 <%ID>, <%ID>                                                                                             
		<%ID> = icmp ult i64 <%ID>, <INT>                                                                                       
		tail call void <@ID>(i8* <%ID>)                                                                                         

<%ID> = add i32 <%ID>, <INT>                                                                                            
<%ID> = add i64 <%ID>, <INT>                                                                                            
<%ID> = mul nsw i32 <%ID>, <INT>                                                                                        
expected answer:
		<%ID> = mul nsw i64 <%ID>, <INT>                                                                                        
Nearest neighbors:
		<%ID> = mul nsw i32 <%ID>, <INT>                                                                                        
		<%ID> = add i64 <%ID>, <INT>                                                                                            
		<%ID> = icmp eq i64 <%ID>, <INT>                                                                                        
		<%ID> = icmp ult i64 <%ID>, <INT>                                                                                       
		<%ID> = bitcast i8* <%ID> to opaque**                                                                                   

<%ID> = add i32 <%ID>, <INT>                                                                                            
<%ID> = add i64 <%ID>, <INT>                                                                                            
<%ID> = mul nuw nsw i32 <%ID>, <INT>                                                                                    
expected answer:
		<%ID> = mul nuw nsw i64 <%ID>, <INT>                                                                                    
Nearest neighbors:
		<%ID> = mul nuw nsw i32 <%ID>, <INT>                                                                                    
		<%ID> = add i64 <%ID>, <INT>                                                                                            
		<%ID> = and i1 <%ID>, <%ID>                                                                                             
		<%ID> = tail call i32 <@ID>({ i8*, i8*, opaque*, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, opaque*, { i32 (...)** }* }* nonnull <%ID>, i32 <%ID>)
		<%ID> = icmp ult i64 <%ID>, <INT>                                                                                       

<%ID> = add nuw i32 <%ID>, <INT>                                                                                        
<%ID> = add nuw i64 <%ID>, <INT>                                                                                        
<%ID> = mul i32 <%ID>, <INT>                                                                                            
expected answer:
		<%ID> = mul i64 <%ID>, <INT>                                                                                            
Nearest neighbors:
		<%ID> = mul i32 <%ID>, <INT>                                                                                            
		<%ID> = add nuw i64 <%ID>, <INT>                                                                                        
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([152 x i8], [152 x i8]* <@ID>, i64 <INT>, i64 <INT>))
		<%ID> = getelementptr inbounds { { i8*, { { [1 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { i8*, { { [1 x i64] } } }* }, { { i8* }, { i8*, { { [1 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { i8*, { { [1 x i64] } } }* } } }, { { i8*, { { [1 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { i8*, { { [1 x i64] } } }* }, { { i8* }, { i8*, { { [1 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { i8*, { { [1 x i64] } } }* } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>
		<%ID> = lshr i64 <%ID>, <INT>                                                                                           

<%ID> = add nuw i32 <%ID>, <INT>                                                                                        
<%ID> = add nuw i64 <%ID>, <INT>                                                                                        
<%ID> = mul nsw i32 <%ID>, <INT>                                                                                        
expected answer:
		<%ID> = mul nsw i64 <%ID>, <INT>                                                                                        
Nearest neighbors:
		<%ID> = mul nsw i32 <%ID>, <INT>                                                                                        
		<%ID> = add nuw i64 <%ID>, <INT>                                                                                        
		<%ID> = lshr i64 <%ID>, <INT>                                                                                           
		<%ID> = bitcast { float }* <%ID> to i32*                                                                                
		<%ID> = bitcast i64 <%ID> to double                                                                                     

<%ID> = add nuw i32 <%ID>, <INT>                                                                                        
<%ID> = add nuw i64 <%ID>, <INT>                                                                                        
<%ID> = mul nuw nsw i32 <%ID>, <INT>                                                                                    
expected answer:
		<%ID> = mul nuw nsw i64 <%ID>, <INT>                                                                                    
Nearest neighbors:
		<%ID> = mul nuw nsw i32 <%ID>, <INT>                                                                                    
		<%ID> = add nuw i64 <%ID>, <INT>                                                                                        
		<%ID> = lshr i64 <%ID>, <INT>                                                                                           
		<%ID> = icmp eq i32 <%ID>, <INT>                                                                                        
		<%ID> = phi i64 [ 0, <%ID> ], [ <%ID>, <%ID> ]                                                                          

<%ID> = add nsw i32 <%ID>, <INT>                                                                                        
<%ID> = add nsw i64 <%ID>, <INT>                                                                                        
<%ID> = mul i32 <%ID>, <INT>                                                                                            
expected answer:
		<%ID> = mul i64 <%ID>, <INT>                                                                                            
Nearest neighbors:
		<%ID> = add nsw i64 <%ID>, <INT>                                                                                        
		<%ID> = mul i32 <%ID>, <INT>                                                                                            
		<%ID> = icmp ugt i16 <%ID>, <%ID>                                                                                       
		<%ID> = load { i64, opaque*, opaque* }*, { i64, opaque*, opaque* }** <%ID>, align 8                                     
		<%ID> = icmp eq i16 <%ID>, <%ID>                                                                                        

<%ID> = add nsw i32 <%ID>, <INT>                                                                                        
<%ID> = add nsw i64 <%ID>, <INT>                                                                                        
<%ID> = mul nsw i32 <%ID>, <INT>                                                                                        
expected answer:
		<%ID> = mul nsw i64 <%ID>, <INT>                                                                                        
Nearest neighbors:
		<%ID> = mul nsw i32 <%ID>, <INT>                                                                                        
		<%ID> = add nsw i64 <%ID>, <INT>                                                                                        
		<%ID> = icmp eq i16 <%ID>, <%ID>                                                                                        
		<%ID> = shl i64 <INT>, <%ID>                                                                                            
		<%ID> = phi i32 [ 2, <%ID> ], [ <%ID>, <%ID> ]                                                                          

<%ID> = add nsw i32 <%ID>, <INT>                                                                                        
<%ID> = add nsw i64 <%ID>, <INT>                                                                                        
<%ID> = mul nuw nsw i32 <%ID>, <INT>                                                                                    
expected answer:
		<%ID> = mul nuw nsw i64 <%ID>, <INT>                                                                                    
Nearest neighbors:
		<%ID> = mul nuw nsw i32 <%ID>, <INT>                                                                                    
		<%ID> = add nsw i64 <%ID>, <INT>                                                                                        
		<%ID> = load volatile i32, i32* <%ID>, align 4                                                                          
		<%ID> = tail call zeroext i1 <%ID>({ i32 (...)** }* <%ID>, { i8*, i8*, opaque*, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, opaque*, { i32 (...)** }* }* nonnull <%ID>)
		<%ID> = icmp eq i16 <%ID>, <%ID>                                                                                        

<%ID> = add nuw nsw i32 <%ID>, <INT>                                                                                    
<%ID> = add nuw nsw i64 <%ID>, <INT>                                                                                    
<%ID> = mul i32 <%ID>, <INT>                                                                                            
expected answer:
		<%ID> = mul i64 <%ID>, <INT>                                                                                            
Nearest neighbors:
		<%ID> = mul i32 <%ID>, <INT>                                                                                            
		<%ID> = add nuw nsw i64 <%ID>, <INT>                                                                                    
		<%ID> = icmp ugt i16 <%ID>, <%ID>                                                                                       
		<%ID> = zext i32 <%ID> to i64                                                                                           
		<%ID> = zext i8 <%ID> to i16                                                                                            

<%ID> = add nuw nsw i32 <%ID>, <INT>                                                                                    
<%ID> = add nuw nsw i64 <%ID>, <INT>                                                                                    
<%ID> = mul nsw i32 <%ID>, <INT>                                                                                        
expected answer:
		<%ID> = mul nsw i64 <%ID>, <INT>                                                                                        
Nearest neighbors:
		<%ID> = mul nsw i32 <%ID>, <INT>                                                                                        
		<%ID> = add nuw nsw i64 <%ID>, <INT>                                                                                    
		<%ID> = mul nsw i32 <%ID>, <%ID>                                                                                        
		<%ID> = zext i8 <%ID> to i16                                                                                            
		<%ID> = or i16 <%ID>, <%ID>                                                                                             

<%ID> = add nuw nsw i32 <%ID>, <INT>                                                                                    
<%ID> = add nuw nsw i64 <%ID>, <INT>                                                                                    
<%ID> = mul nuw nsw i32 <%ID>, <INT>                                                                                    
expected answer:
		<%ID> = mul nuw nsw i64 <%ID>, <INT>                                                                                    
Nearest neighbors:
		<%ID> = mul nuw nsw i32 <%ID>, <INT>                                                                                    
		<%ID> = add nuw nsw i64 <%ID>, <INT>                                                                                    
		<%ID> = or i16 <%ID>, <%ID>                                                                                             
		<%ID> = tail call i64 <@ID>({ i8*, i8*, opaque*, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, opaque*, { i32 (...)** }* }* nonnull <%ID>, i32 <%ID>)
		<%ID> = icmp ne i16 <%ID>, <INT>                                                                                        

<%ID> = add i32 <%ID>, <INT>                                                                                            
<%ID> = add i64 <%ID>, <INT>                                                                                            
<%ID> = udiv i32 <%ID>, <INT>                                                                                           
expected answer:
		<%ID> = udiv i64 <%ID>, <INT>                                                                                           
Nearest neighbors:
		<%ID> = udiv i32 <%ID>, <INT>                                                                                           
		<%ID> = add i64 <%ID>, <INT>                                                                                            
		<%ID> = and i1 <%ID>, <%ID>                                                                                             
		<%ID> = icmp ult i8 <%ID>, <%ID>                                                                                        
		<%ID> = bitcast { i32, i16 }* <%ID> to i64*                                                                             

<%ID> = add nuw i32 <%ID>, <INT>                                                                                        
<%ID> = add nuw i64 <%ID>, <INT>                                                                                        
<%ID> = udiv i32 <%ID>, <INT>                                                                                           
expected answer:
		<%ID> = udiv i64 <%ID>, <INT>                                                                                           
Nearest neighbors:
		<%ID> = add nuw i64 <%ID>, <INT>                                                                                        
		<%ID> = udiv i32 <%ID>, <INT>                                                                                           
		<%ID> = icmp eq i8 <%ID>, <INT>                                                                                         
		<%ID> = bitcast { i32, i16 }* <%ID> to i64*                                                                             
		<%ID> = load i8, i8* <%ID>, align 8                                                                                     

<%ID> = add nsw i32 <%ID>, <INT>                                                                                        
<%ID> = add nsw i64 <%ID>, <INT>                                                                                        
<%ID> = udiv i32 <%ID>, <INT>                                                                                           
expected answer:
		<%ID> = udiv i64 <%ID>, <INT>                                                                                           
Nearest neighbors:
		<%ID> = add nsw i64 <%ID>, <INT>                                                                                        
		<%ID> = udiv i32 <%ID>, <INT>                                                                                           
		<%ID> = icmp eq i16 <%ID>, <%ID>                                                                                        
		switch i32 <%ID>, label <%ID> [
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>]
		<%ID> = ashr i32 <%ID>, <%ID>                                                                                           

<%ID> = add nuw nsw i32 <%ID>, <INT>                                                                                    
<%ID> = add nuw nsw i64 <%ID>, <INT>                                                                                    
<%ID> = udiv i32 <%ID>, <INT>                                                                                           
expected answer:
		<%ID> = udiv i64 <%ID>, <INT>                                                                                           
Nearest neighbors:
		<%ID> = udiv i32 <%ID>, <INT>                                                                                           
		<%ID> = add nuw nsw i64 <%ID>, <INT>                                                                                    
		<%ID> = or i16 <%ID>, <%ID>                                                                                             
		<%ID> = zext i8 <%ID> to i16                                                                                            
		<%ID> = lshr i16 <%ID>, <INT>                                                                                           

<%ID> = add i32 <%ID>, <INT>                                                                                            
<%ID> = add i64 <%ID>, <INT>                                                                                            
<%ID> = sdiv i32 <%ID>, <INT>                                                                                           
expected answer:
		<%ID> = sdiv i64 <%ID>, <INT>                                                                                           
Nearest neighbors:
		<%ID> = add i64 <%ID>, <INT>                                                                                            
		<%ID> = sdiv i32 <%ID>, <INT>                                                                                           
		<%ID> = and i1 <%ID>, <%ID>                                                                                             
		<%ID> = icmp eq i8* <%ID>, <%ID>                                                                                        
		<%ID> = load i8*, i8** <%ID>, align 8                                                                                   

<%ID> = add nuw i32 <%ID>, <INT>                                                                                        
<%ID> = add nuw i64 <%ID>, <INT>                                                                                        
<%ID> = sdiv i32 <%ID>, <INT>                                                                                           
expected answer:
		<%ID> = sdiv i64 <%ID>, <INT>                                                                                           
Nearest neighbors:
		<%ID> = add nuw i64 <%ID>, <INT>                                                                                        
		<%ID> = sdiv i32 <%ID>, <INT>                                                                                           
		<%ID> = icmp eq i32 <%ID>, <INT>                                                                                        
		<%ID> = icmp eq i8 <%ID>, <INT>                                                                                         
		<%ID> = icmp ugt i64 <%ID>, <INT>                                                                                       

<%ID> = add nsw i32 <%ID>, <INT>                                                                                        
<%ID> = add nsw i64 <%ID>, <INT>                                                                                        
<%ID> = sdiv i32 <%ID>, <INT>                                                                                           
expected answer:
		<%ID> = sdiv i64 <%ID>, <INT>                                                                                           
Nearest neighbors:
		<%ID> = add nsw i64 <%ID>, <INT>                                                                                        
		<%ID> = sdiv i32 <%ID>, <INT>                                                                                           
		<%ID> = icmp eq i16 <%ID>, <%ID>                                                                                        
		<%ID> = srem i32 <%ID>, <INT>                                                                                           
		<%ID> = phi i32 [ 2, <%ID> ], [ <%ID>, <%ID> ]                                                                          

<%ID> = add nuw nsw i32 <%ID>, <INT>                                                                                    
<%ID> = add nuw nsw i64 <%ID>, <INT>                                                                                    
<%ID> = sdiv i32 <%ID>, <INT>                                                                                           
expected answer:
		<%ID> = sdiv i64 <%ID>, <INT>                                                                                           
Nearest neighbors:
		<%ID> = sdiv i32 <%ID>, <INT>                                                                                           
		<%ID> = add nuw nsw i64 <%ID>, <INT>                                                                                    
		<%ID> = zext i32 <%ID> to i64                                                                                           
		<%ID> = icmp ne i16 <%ID>, <INT>                                                                                        
		<%ID> = or i16 <%ID>, <%ID>                                                                                             

<%ID> = add i32 <%ID>, <INT>                                                                                            
<%ID> = add i64 <%ID>, <INT>                                                                                            
<%ID> = urem i32 <%ID>, <INT>                                                                                           
expected answer:
		<%ID> = urem i64 <%ID>, <INT>                                                                                           
Nearest neighbors:
		<%ID> = urem i32 <%ID>, <INT>                                                                                           
		<%ID> = add i64 <%ID>, <INT>                                                                                            
		<%ID> = icmp eq i64 <%ID>, <INT>                                                                                        
		<%ID> = and i1 <%ID>, <%ID>                                                                                             
		<%ID> = icmp ult i8 <%ID>, <%ID>                                                                                        

<%ID> = add nuw i32 <%ID>, <INT>                                                                                        
<%ID> = add nuw i64 <%ID>, <INT>                                                                                        
<%ID> = urem i32 <%ID>, <INT>                                                                                           
expected answer:
		<%ID> = urem i64 <%ID>, <INT>                                                                                           
Nearest neighbors:
		<%ID> = add nuw i64 <%ID>, <INT>                                                                                        
		<%ID> = urem i32 <%ID>, <INT>                                                                                           
		<%ID> = lshr i64 <%ID>, <INT>                                                                                           
		<%ID> = icmp eq i64 <%ID>, <INT>                                                                                        
		<%ID> = icmp eq i8 <%ID>, <INT>                                                                                         

<%ID> = add nsw i32 <%ID>, <INT>                                                                                        
<%ID> = add nsw i64 <%ID>, <INT>                                                                                        
<%ID> = urem i32 <%ID>, <INT>                                                                                           
expected answer:
		<%ID> = urem i64 <%ID>, <INT>                                                                                           
Nearest neighbors:
		<%ID> = urem i32 <%ID>, <INT>                                                                                           
		<%ID> = add nsw i64 <%ID>, <INT>                                                                                        
		switch i32 <%ID>, label <%ID> [
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>]
		<%ID> = ashr i32 <%ID>, <%ID>                                                                                           
		<%ID> = udiv i32 <%ID>, <INT>                                                                                           

<%ID> = add nuw nsw i32 <%ID>, <INT>                                                                                    
<%ID> = add nuw nsw i64 <%ID>, <INT>                                                                                    
<%ID> = urem i32 <%ID>, <INT>                                                                                           
expected answer:
		<%ID> = urem i64 <%ID>, <INT>                                                                                           
Nearest neighbors:
		<%ID> = urem i32 <%ID>, <INT>                                                                                           
		<%ID> = add nuw nsw i64 <%ID>, <INT>                                                                                    
		<%ID> = or i16 <%ID>, <%ID>                                                                                             
		switch i32 <%ID>, label <%ID> [
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>]
		<%ID> = icmp ne i16 <%ID>, <INT>                                                                                        

<%ID> = add i32 <%ID>, <INT>                                                                                            
<%ID> = add i64 <%ID>, <INT>                                                                                            
<%ID> = srem i32 <%ID>, <INT>                                                                                           
expected answer:
		<%ID> = srem i64 <%ID>, <INT>                                                                                           
Nearest neighbors:
		<%ID> = srem i32 <%ID>, <INT>                                                                                           
		<%ID> = add i64 <%ID>, <INT>                                                                                            
		<%ID> = and i1 <%ID>, <%ID>                                                                                             
		<%ID> = load i8*, i8** <%ID>, align 8                                                                                   
		<%ID> = icmp eq i32 <%ID>, <INT>                                                                                        

<%ID> = add nuw i32 <%ID>, <INT>                                                                                        
<%ID> = add nuw i64 <%ID>, <INT>                                                                                        
<%ID> = srem i32 <%ID>, <INT>                                                                                           
expected answer:
		<%ID> = srem i64 <%ID>, <INT>                                                                                           
Nearest neighbors:
		<%ID> = add nuw i64 <%ID>, <INT>                                                                                        
		<%ID> = srem i32 <%ID>, <INT>                                                                                           
		<%ID> = icmp eq i8 <%ID>, <INT>                                                                                         
		<%ID> = icmp eq i32 <%ID>, <INT>                                                                                        
		define linkonce_odr void <@ID>({ { { { { { i64, i64, i8* } } } } } }* noalias sret, { { { { { { i64, i64, i8* } } } } } }* dereferenceable(24)) local_unnamed_addr

<%ID> = add nsw i32 <%ID>, <INT>                                                                                        
<%ID> = add nsw i64 <%ID>, <INT>                                                                                        
<%ID> = srem i32 <%ID>, <INT>                                                                                           
expected answer:
		<%ID> = srem i64 <%ID>, <INT>                                                                                           
Nearest neighbors:
		<%ID> = add nsw i64 <%ID>, <INT>                                                                                        
		<%ID> = srem i32 <%ID>, <INT>                                                                                           
		<%ID> = sext i1 <%ID> to i32                                                                                            
		<%ID> = icmp eq i16 <%ID>, <%ID>                                                                                        
		<%ID> = phi { i64, opaque*, opaque* }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                               

<%ID> = add nuw nsw i32 <%ID>, <INT>                                                                                    
<%ID> = add nuw nsw i64 <%ID>, <INT>                                                                                    
<%ID> = srem i32 <%ID>, <INT>                                                                                           
expected answer:
		<%ID> = srem i64 <%ID>, <INT>                                                                                           
Nearest neighbors:
		<%ID> = srem i32 <%ID>, <INT>                                                                                           
		<%ID> = add nuw nsw i64 <%ID>, <INT>                                                                                    
		<%ID> = or i16 <%ID>, <%ID>                                                                                             
		<%ID> = zext i32 <%ID> to i64                                                                                           
		<%ID> = icmp sle i32 <%ID>, <%ID>                                                                                       

<%ID> = sub nsw i32 <%ID>, <INT>                                                                                        
<%ID> = sub nsw i64 <%ID>, <INT>                                                                                        
<%ID> = mul i32 <%ID>, <INT>                                                                                            
expected answer:
		<%ID> = mul i64 <%ID>, <INT>                                                                                            
Nearest neighbors:
		<%ID> = sub nsw i64 <%ID>, <INT>                                                                                        
		<%ID> = mul i32 <%ID>, <INT>                                                                                            
		<%ID> = select i1 <%ID>, i16 <INT>, i16 <%ID>                                                                           
		invoke void <@ID>({ i8 }* nonnull <%ID>, i8* <%ID>, { { i8*, i64 } }* nonnull dereferenceable(16) <%ID>, i64 <%ID>, i64 <%ID>, i64 <INT>, i64 <INT>)
 to label <%ID> unwind label <%ID>
		call void <@ID>(i64* dereferenceable(8) <%ID>)                                                                          

<%ID> = sub nsw i32 <%ID>, <INT>                                                                                        
<%ID> = sub nsw i64 <%ID>, <INT>                                                                                        
<%ID> = mul nsw i32 <%ID>, <INT>                                                                                        
expected answer:
		<%ID> = mul nsw i64 <%ID>, <INT>                                                                                        
Nearest neighbors:
		<%ID> = sub nsw i64 <%ID>, <INT>                                                                                        
		<%ID> = mul nsw i32 <%ID>, <INT>                                                                                        
		call void <@ID>(i64* dereferenceable(8) <%ID>)                                                                          
		<%ID> = call i64 <@ID>(i64* nonnull dereferenceable(8) <%ID>)                                                           
		<%ID> = select i1 <%ID>, i16 <INT>, i16 <%ID>                                                                           

<%ID> = sub nsw i32 <%ID>, <INT>                                                                                        
<%ID> = sub nsw i64 <%ID>, <INT>                                                                                        
<%ID> = mul nuw nsw i32 <%ID>, <INT>                                                                                    
expected answer:
		<%ID> = mul nuw nsw i64 <%ID>, <INT>                                                                                    
Nearest neighbors:
		<%ID> = sub nsw i64 <%ID>, <INT>                                                                                        
		<%ID> = mul nuw nsw i32 <%ID>, <INT>                                                                                    
		<%ID> = select i1 <%ID>, i16 <INT>, i16 <%ID>                                                                           
		<%ID> = call dereferenceable(8) i64* <@ID>({ i8 }* <%ID>, i64* dereferenceable(8) <%ID>)                                
		<%ID> = getelementptr inbounds { { i8*, i64 } }, { { i8*, i64 } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>               

<%ID> = sub nsw i32 <%ID>, <INT>                                                                                        
<%ID> = sub nsw i64 <%ID>, <INT>                                                                                        
<%ID> = udiv i32 <%ID>, <INT>                                                                                           
expected answer:
		<%ID> = udiv i64 <%ID>, <INT>                                                                                           
Nearest neighbors:
		<%ID> = sub nsw i64 <%ID>, <INT>                                                                                        
		<%ID> = udiv i32 <%ID>, <INT>                                                                                           
		invoke void <@ID>({ i8 }* nonnull <%ID>, i8* <%ID>, { { i8*, i64 } }* nonnull dereferenceable(16) <%ID>, i64 <%ID>, i64 <%ID>, i64 <INT>, i64 <INT>)
 to label <%ID> unwind label <%ID>
		<%ID> = select i1 <%ID>, i16 <INT>, i16 <%ID>                                                                           
		<%ID> = getelementptr inbounds { opaque*, opaque*, { opaque*, opaque*, opaque*, i32*, { i64, i8*, i32, i16, i16 }, i64, i8*, i32, i32, i32, i8, i8, i8, i8, i8, i8, i16, [19 x i16], { i32, i8, i16, i16, opaque*, i8*, [1 x { i8*, i8, i8*, i32 (i8*, i32, i8*, i32, i8*)*, void (i8*)* }*] }*, [20 x { i8, i8, i8, i8, i32, i8, i8, i8, i8, i8, i16, i16, i16, i16, i16, i16, [4 x i16], [4 x i8*], opaque*, i8*, i8*, i8*, i8*, opaque*, i16 (opaque*, i8*)*, void (opaque*, i8*, { i64, i8*, i32, i16, i16 }*)* }*] }*, { i8, i8, i8, i8, i32, i8, i8, i8, i8, i8, i16, i16, i16, i16, i16, i16, [4 x i16], [4 x i8*], opaque*, i8*, i8*, i8*, i8*, opaque*, i16 (opaque*, i8*)*, void (opaque*, i8*, { i64, i8*, i32, i16, i16 }*)* }*, i8, i8, i8, i8, i8, i8, i16, i16, i16, i16, i16, i32, i32, i32, i32, i8*, void (i8*)*, { { i64, [56 x i8] } }*, opaque*, i32, opaque*, { opaque*, i32, i8, opaque* }*, opaque*, i8* }, { opaque*, opaque*, { opaque*, opaque*, opaque*, i32*, { i64, i8*, i32, i16, i16 }, i64, i8*, i32, i32, i32, i8, i8, i8, i8, i8, i8, i16, [19 x i16], { i32, i8, i16, i16, opaque*, i8*, [1 x { i8*, i8, i8*, i32 (i8*, i32, i8*, i32, i8*)*, void (i8*)* }*] }*, [20 x { i8, i8, i8, i8, i32, i8, i8, i8, i8, i8, i16, i16, i16, i16, i16, i16, [4 x i16], [4 x i8*], opaque*, i8*, i8*, i8*, i8*, opaque*, i16 (opaque*, i8*)*, void (opaque*, i8*, { i64, i8*, i32, i16, i16 }*)* }*] }*, { i8, i8, i8, i8, i32, i8, i8, i8, i8, i8, i16, i16, i16, i16, i16, i16, [4 x i16], [4 x i8*], opaque*, i8*, i8*, i8*, i8*, opaque*, i16 (opaque*, i8*)*, void (opaque*, i8*, { i64, i8*, i32, i16, i16 }*)* }*, i8, i8, i8, i8, i8, i8, i16, i16, i16, i16, i16, i32, i32, i32, i32, i8*, void (i8*)*, { { i64, [56 x i8] } }*, opaque*, i32, opaque*, { opaque*, i32, i8, opaque* }*, opaque*, i8* }* <%ID>, i64 <INT>, i32 <INT>

<%ID> = sub nsw i32 <%ID>, <INT>                                                                                        
<%ID> = sub nsw i64 <%ID>, <INT>                                                                                        
<%ID> = sdiv i32 <%ID>, <INT>                                                                                           
expected answer:
		<%ID> = sdiv i64 <%ID>, <INT>                                                                                           
Nearest neighbors:
		<%ID> = sub nsw i64 <%ID>, <INT>                                                                                        
		<%ID> = sdiv i32 <%ID>, <INT>                                                                                           
		<%ID> = select i1 <%ID>, i16 <INT>, i16 <%ID>                                                                           
		call void <@ID>(i64* dereferenceable(8) <%ID>)                                                                          
		invoke void <@ID>({ i8 }* nonnull <%ID>, i8* <%ID>, { { i8*, i64 } }* nonnull dereferenceable(16) <%ID>, i64 <%ID>, i64 <%ID>, i64 <INT>, i64 <INT>)
 to label <%ID> unwind label <%ID>

<%ID> = sub nsw i32 <%ID>, <INT>                                                                                        
<%ID> = sub nsw i64 <%ID>, <INT>                                                                                        
<%ID> = urem i32 <%ID>, <INT>                                                                                           
expected answer:
		<%ID> = urem i64 <%ID>, <INT>                                                                                           
Nearest neighbors:
		<%ID> = sub nsw i64 <%ID>, <INT>                                                                                        
		<%ID> = urem i32 <%ID>, <INT>                                                                                           
		<%ID> = select i1 <%ID>, i16 <INT>, i16 <%ID>                                                                           
		<%ID> = call dereferenceable(8) i64* <@ID>({ i8 }* <%ID>, i64* dereferenceable(8) <%ID>)                                
		call void <@ID>(i64* dereferenceable(8) <%ID>)                                                                          

<%ID> = sub nsw i32 <%ID>, <INT>                                                                                        
<%ID> = sub nsw i64 <%ID>, <INT>                                                                                        
<%ID> = srem i32 <%ID>, <INT>                                                                                           
expected answer:
		<%ID> = srem i64 <%ID>, <INT>                                                                                           
Nearest neighbors:
		<%ID> = sub nsw i64 <%ID>, <INT>                                                                                        
		<%ID> = srem i32 <%ID>, <INT>                                                                                           
		<%ID> = sdiv i32 <%ID>, <INT>                                                                                           
		call void <@ID>(i64* dereferenceable(8) <%ID>)                                                                          
		<%ID> = select i1 <%ID>, i16 <INT>, i16 <%ID>                                                                           

<%ID> = mul i32 <%ID>, <INT>                                                                                            
<%ID> = mul i64 <%ID>, <INT>                                                                                            
<%ID> = udiv i32 <%ID>, <INT>                                                                                           
expected answer:
		<%ID> = udiv i64 <%ID>, <INT>                                                                                           
Nearest neighbors:
		<%ID> = mul i64 <%ID>, <INT>                                                                                            
		<%ID> = udiv i32 <%ID>, <INT>                                                                                           
		<%ID> = phi i64 [ <%ID>, <%ID> ], [ 0, <%ID> ]                                                                          
		<%ID> = add i64 <%ID>, <INT>                                                                                            
		<%ID> = getelementptr inbounds float, float* <%ID>, i64 <INT>                                                           

<%ID> = mul nsw i32 <%ID>, <INT>                                                                                        
<%ID> = mul nsw i64 <%ID>, <INT>                                                                                        
<%ID> = udiv i32 <%ID>, <INT>                                                                                           
expected answer:
		<%ID> = udiv i64 <%ID>, <INT>                                                                                           
Nearest neighbors:
		<%ID> = mul nsw i64 <%ID>, <INT>                                                                                        
		<%ID> = udiv i32 <%ID>, <INT>                                                                                           
		<%ID> = load i8, i8* <%ID>, align 8                                                                                     
		<%ID> = add i64 <%ID>, <INT>                                                                                            
		<%ID> = tail call i8* <@ID>(i8* nonnull <%ID>, i8* <%ID>, i64 <%ID>, i64 <%ID>)                                         

<%ID> = mul nuw nsw i32 <%ID>, <INT>                                                                                    
<%ID> = mul nuw nsw i64 <%ID>, <INT>                                                                                    
<%ID> = udiv i32 <%ID>, <INT>                                                                                           
expected answer:
		<%ID> = udiv i64 <%ID>, <INT>                                                                                           
Nearest neighbors:
		<%ID> = mul nuw nsw i64 <%ID>, <INT>                                                                                    
		<%ID> = udiv i32 <%ID>, <INT>                                                                                           
		<%ID> = phi i64 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      
		<%ID> = mul nsw i64 <%ID>, <INT>                                                                                        
		<%ID> = icmp ult i64 <%ID>, <INT>                                                                                       

<%ID> = mul i32 <%ID>, <INT>                                                                                            
<%ID> = mul i64 <%ID>, <INT>                                                                                            
<%ID> = sdiv i32 <%ID>, <INT>                                                                                           
expected answer:
		<%ID> = sdiv i64 <%ID>, <INT>                                                                                           
Nearest neighbors:
		<%ID> = mul i64 <%ID>, <INT>                                                                                            
		<%ID> = sdiv i32 <%ID>, <INT>                                                                                           
		<%ID> = shl nsw i32 <%ID>, <INT>                                                                                        
		<%ID> = shl i64 <%ID>, <INT>                                                                                            
		<%ID> = extractvalue { i32, i32, i32, i32 } <%ID>, 2                                                                    

<%ID> = mul nsw i32 <%ID>, <INT>                                                                                        
<%ID> = mul nsw i64 <%ID>, <INT>                                                                                        
<%ID> = sdiv i32 <%ID>, <INT>                                                                                           
expected answer:
		<%ID> = sdiv i64 <%ID>, <INT>                                                                                           
Nearest neighbors:
		<%ID> = mul nsw i64 <%ID>, <INT>                                                                                        
		<%ID> = sdiv i32 <%ID>, <INT>                                                                                           
		<%ID> = load i8, i8* <%ID>, align 8                                                                                     
		<%ID> = icmp eq i32 <%ID>, <INT>                                                                                        
		<%ID> = load { { { float*, i64 } } }*, { { { float*, i64 } } }** <%ID>, align 8                                         

<%ID> = mul nuw nsw i32 <%ID>, <INT>                                                                                    
<%ID> = mul nuw nsw i64 <%ID>, <INT>                                                                                    
<%ID> = sdiv i32 <%ID>, <INT>                                                                                           
expected answer:
		<%ID> = sdiv i64 <%ID>, <INT>                                                                                           
Nearest neighbors:
		<%ID> = mul nuw nsw i64 <%ID>, <INT>                                                                                    
		<%ID> = sdiv i32 <%ID>, <INT>                                                                                           
		<%ID> = mul nsw i64 <%ID>, <INT>                                                                                        
		<%ID> = icmp ugt i64 <%ID>, <INT>                                                                                       
		<%ID> = bitcast { [4 x i32] }* <%ID> to i8*                                                                             

<%ID> = mul i32 <%ID>, <INT>                                                                                            
<%ID> = mul i64 <%ID>, <INT>                                                                                            
<%ID> = urem i32 <%ID>, <INT>                                                                                           
expected answer:
		<%ID> = urem i64 <%ID>, <INT>                                                                                           
Nearest neighbors:
		<%ID> = mul i64 <%ID>, <INT>                                                                                            
		<%ID> = urem i32 <%ID>, <INT>                                                                                           
		<%ID> = add i64 <%ID>, <INT>                                                                                            
		<%ID> = icmp ult i64 <%ID>, <%ID>                                                                                       
		<@ID> = linkonce_odr global i64 <INT>, align 8                                                                          

<%ID> = mul nsw i32 <%ID>, <INT>                                                                                        
<%ID> = mul nsw i64 <%ID>, <INT>                                                                                        
<%ID> = urem i32 <%ID>, <INT>                                                                                           
expected answer:
		<%ID> = urem i64 <%ID>, <INT>                                                                                           
Nearest neighbors:
		<%ID> = mul nsw i64 <%ID>, <INT>                                                                                        
		<%ID> = urem i32 <%ID>, <INT>                                                                                           
		<%ID> = add i64 <%ID>, <INT>                                                                                            
		<%ID> = load i8, i8* <%ID>, align 8                                                                                     
		<%ID> = icmp eq i32 <%ID>, <INT>                                                                                        

<%ID> = mul nuw nsw i32 <%ID>, <INT>                                                                                    
<%ID> = mul nuw nsw i64 <%ID>, <INT>                                                                                    
<%ID> = urem i32 <%ID>, <INT>                                                                                           
expected answer:
		<%ID> = urem i64 <%ID>, <INT>                                                                                           
Nearest neighbors:
		<%ID> = mul nuw nsw i64 <%ID>, <INT>                                                                                    
		<%ID> = urem i32 <%ID>, <INT>                                                                                           
		<%ID> = icmp eq i64 <%ID>, <INT>                                                                                        
		<%ID> = add nuw nsw i64 <%ID>, <%ID>                                                                                    
		<%ID> = phi i64 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      

<%ID> = mul i32 <%ID>, <INT>                                                                                            
<%ID> = mul i64 <%ID>, <INT>                                                                                            
<%ID> = srem i32 <%ID>, <INT>                                                                                           
expected answer:
		<%ID> = srem i64 <%ID>, <INT>                                                                                           
Nearest neighbors:
		<%ID> = mul i64 <%ID>, <INT>                                                                                            
		<%ID> = srem i32 <%ID>, <INT>                                                                                           
		<%ID> = icmp eq i32 <%ID>, <INT>                                                                                        
		<%ID> = getelementptr inbounds float, float* <%ID>, i64 <INT>                                                           
		<%ID> = extractvalue { i32, i32, i32, i32 } <%ID>, 0                                                                    

<%ID> = mul nsw i32 <%ID>, <INT>                                                                                        
<%ID> = mul nsw i64 <%ID>, <INT>                                                                                        
<%ID> = srem i32 <%ID>, <INT>                                                                                           
expected answer:
		<%ID> = srem i64 <%ID>, <INT>                                                                                           
Nearest neighbors:
		<%ID> = mul nsw i64 <%ID>, <INT>                                                                                        
		<%ID> = srem i32 <%ID>, <INT>                                                                                           
		<%ID> = load i8, i8* <%ID>, align 8                                                                                     
		<%ID> = icmp eq i32 <%ID>, <INT>                                                                                        
		<%ID> = load { { { float*, i64 } } }*, { { { float*, i64 } } }** <%ID>, align 8                                         

<%ID> = mul nuw nsw i32 <%ID>, <INT>                                                                                    
<%ID> = mul nuw nsw i64 <%ID>, <INT>                                                                                    
<%ID> = srem i32 <%ID>, <INT>                                                                                           
expected answer:
		<%ID> = srem i64 <%ID>, <INT>                                                                                           
Nearest neighbors:
		<%ID> = mul nuw nsw i64 <%ID>, <INT>                                                                                    
		<%ID> = srem i32 <%ID>, <INT>                                                                                           
		call void <@ID>(metadata { { i8* }, i64, { i64, [8 x i8] } }* <%ID>(DW_OP_stack_value))                                 
		<%ID> = mul nsw i64 <%ID>, <INT>                                                                                        
		<%ID> = add nuw nsw i64 <%ID>, <%ID>                                                                                    

<%ID> = udiv i32 <%ID>, <INT>                                                                                           
<%ID> = udiv i64 <%ID>, <INT>                                                                                           
<%ID> = sdiv i32 <%ID>, <INT>                                                                                           
expected answer:
		<%ID> = sdiv i64 <%ID>, <INT>                                                                                           
Nearest neighbors:
		<%ID> = udiv i64 <%ID>, <INT>                                                                                           
		<%ID> = sdiv i32 <%ID>, <INT>                                                                                           
		<%ID> = icmp eq { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x i64] }* <%ID>, null
		<%ID> = getelementptr inbounds { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x i32] }, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x i32] }* <%ID>, i64 <INT>, i32 <INT>, i64 <INT>
		<%ID> = load { { { { { { { { i64, i64, i8* } } } } } }, { { { { { { { i64, i64, i8* } } } } } }, { { { i32 (...)** } }, { { i8* } }, { { { { { { { { i64, i64, i8* } } } } } }* } }, i32, [1 x i32] } }* }, opaque* }*, { { { { { { { { i64, i64, i8* } } } } } }, { { { { { { { i64, i64, i8* } } } } } }, { { { i32 (...)** } }, { { i8* } }, { { { { { { { { i64, i64, i8* } } } } } }* } }, i32, [1 x i32] } }* }, opaque* }** <%ID>, align 8

<%ID> = udiv i32 <%ID>, <INT>                                                                                           
<%ID> = udiv i64 <%ID>, <INT>                                                                                           
<%ID> = urem i32 <%ID>, <INT>                                                                                           
expected answer:
		<%ID> = urem i64 <%ID>, <INT>                                                                                           
Nearest neighbors:
		<%ID> = udiv i64 <%ID>, <INT>                                                                                           
		<%ID> = urem i32 <%ID>, <INT>                                                                                           
		ret i64 <%ID>                                                                                                           
		<%ID> = icmp uge i64 <%ID>, <%ID>                                                                                       
		<%ID> = getelementptr inbounds { i64, i64, i64, i64, i8**, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }, { i64, i64, i64, i64, i8**, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>

<%ID> = udiv i32 <%ID>, <INT>                                                                                           
<%ID> = udiv i64 <%ID>, <INT>                                                                                           
<%ID> = srem i32 <%ID>, <INT>                                                                                           
expected answer:
		<%ID> = srem i64 <%ID>, <INT>                                                                                           
Nearest neighbors:
		<%ID> = udiv i64 <%ID>, <INT>                                                                                           
		<%ID> = srem i32 <%ID>, <INT>                                                                                           
		<%ID> = load { { { { { { { { i64, i64, i8* } } } } } }, { { { { { { { i64, i64, i8* } } } } } }, { { { i32 (...)** } }, { { i8* } }, { { { { { { { { i64, i64, i8* } } } } } }* } }, i32, [1 x i32] } }* }, opaque* }*, { { { { { { { { i64, i64, i8* } } } } } }, { { { { { { { i64, i64, i8* } } } } } }, { { { i32 (...)** } }, { { i8* } }, { { { { { { { { i64, i64, i8* } } } } } }* } }, i32, [1 x i32] } }* }, opaque* }** <%ID>, align 8
		<%ID> = icmp slt i64 <%ID>, <INT>                                                                                       
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([152 x i8], [152 x i8]* <@ID>, i64 <INT>, i64 <INT>))

<%ID> = sdiv i32 <%ID>, <INT>                                                                                           
<%ID> = sdiv i64 <%ID>, <INT>                                                                                           
<%ID> = urem i32 <%ID>, <INT>                                                                                           
expected answer:
		<%ID> = urem i64 <%ID>, <INT>                                                                                           
Nearest neighbors:
		<%ID> = sdiv i64 <%ID>, <INT>                                                                                           
		<%ID> = urem i32 <%ID>, <INT>                                                                                           
		<%ID> = lshr i64 <%ID>, <INT>                                                                                           
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([202 x i8], [202 x i8]* <@ID>, i64 <INT>, i64 <INT>))
		define linkonce_odr void <@ID>({ i64 }*, i64) unnamed_addr                                                              

<%ID> = sdiv i32 <%ID>, <INT>                                                                                           
<%ID> = sdiv i64 <%ID>, <INT>                                                                                           
<%ID> = srem i32 <%ID>, <INT>                                                                                           
expected answer:
		<%ID> = srem i64 <%ID>, <INT>                                                                                           
Nearest neighbors:
		<%ID> = sdiv i64 <%ID>, <INT>                                                                                           
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([202 x i8], [202 x i8]* <@ID>, i64 <INT>, i64 <INT>))
		<%ID> = phi i64 [ <%ID>, <%ID> ], [ 0, <%ID> ]                                                                          
		<%ID> = lshr i64 <%ID>, <INT>                                                                                           
		<%ID> = add nuw i64 <%ID>, <INT>                                                                                        

<%ID> = add i8 <%ID>, <%ID>                                                                                             
<%ID> = add i32 <%ID>, <%ID>                                                                                            
<%ID> = sub i8 <%ID>, <%ID>                                                                                             
expected answer:
		<%ID> = sub i32 <%ID>, <%ID>                                                                                            
Nearest neighbors:
		<%ID> = add i32 <%ID>, <%ID>                                                                                            
		<%ID> = sub i8 <%ID>, <%ID>                                                                                             
		<%ID> = add nsw i32 <%ID>, <%ID>                                                                                        
		<%ID> = mul i32 <%ID>, <INT>                                                                                            
		<%ID> = icmp sgt i32 <%ID>, <%ID>                                                                                       

<%ID> = add i8 <%ID>, <%ID>                                                                                             
<%ID> = add i64 <%ID>, <%ID>                                                                                            
<%ID> = sub i8 <%ID>, <%ID>                                                                                             
expected answer:
		<%ID> = sub i64 <%ID>, <%ID>                                                                                            
Nearest neighbors:
		<%ID> = add i64 <%ID>, <%ID>                                                                                            
		<%ID> = sub i8 <%ID>, <%ID>                                                                                             
		<%ID> = icmp eq i8* <%ID>, null                                                                                         
		store i8* <%ID>, i8** <%ID>, align 8                                                                                    
		<%ID> = ptrtoint i8* <%ID> to i64                                                                                       

<%ID> = add i8 <%ID>, <%ID>                                                                                             
<%ID> = add <16 x i8> <%ID>, <%ID>                                                                                      
<%ID> = sub i8 <%ID>, <%ID>                                                                                             
expected answer:
		<%ID> = sub <16 x i8> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <16 x i8> <%ID>, <%ID>                                                                                      
		<%ID> = sub i8 <%ID>, <%ID>                                                                                             
		<%ID> = load <16 x i8>, <16 x i8>* <%ID>, align 1                                                                       
		<%ID> = shl <16 x i8> <%ID>, <i8 <INT>, i8 <INT>, i8 <INT>, i8 <INT>, i8 <INT>, i8 <INT>, i8 <INT>, i8 <INT>, i8 <INT>, i8 <INT>, i8 <INT>, i8 <INT>, i8 <INT>, i8 <INT>, i8 <INT>, i8 <INT>>
		store <16 x i8> <%ID>, <16 x i8>* <%ID>, align 1                                                                        

<%ID> = add i8 <%ID>, <%ID>                                                                                             
<%ID> = add <32 x i8> <%ID>, <%ID>                                                                                      
<%ID> = sub i8 <%ID>, <%ID>                                                                                             
expected answer:
		<%ID> = sub <32 x i8> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <32 x i8> <%ID>, <%ID>                                                                                      
		<%ID> = sub i8 <%ID>, <%ID>                                                                                             
		<%ID> = call i64 <@ID>(i8* <%ID>, i1 false)                                                                             
		call void <@ID>(metadata i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* <@ID>, i64 <INT>, i64 <INT>)())          
		<%ID> = add <16 x i16> <%ID>, <%ID>                                                                                     

<%ID> = add i8 <%ID>, <%ID>                                                                                             
<%ID> = add <8 x i16> <%ID>, <%ID>                                                                                      
<%ID> = sub i8 <%ID>, <%ID>                                                                                             
expected answer:
		<%ID> = sub <8 x i16> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <8 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = mul <8 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = extractelement <8 x i16> <%ID>, <TYP> 0                                                                         
		<%ID> = sub i8 <%ID>, <%ID>                                                                                             
		<%ID> = shufflevector <8 x i16> <%ID>, <8 x i16> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef>

<%ID> = add i8 <%ID>, <%ID>                                                                                             
<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
<%ID> = sub i8 <%ID>, <%ID>                                                                                             
expected answer:
		<%ID> = sub <4 x i64> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = sub i8 <%ID>, <%ID>                                                                                             
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 0                                                                         

<%ID> = add i32 <%ID>, <%ID>                                                                                            
<%ID> = add i64 <%ID>, <%ID>                                                                                            
<%ID> = sub i32 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = sub i64 <%ID>, <%ID>                                                                                            
Nearest neighbors:
		<%ID> = add i64 <%ID>, <%ID>                                                                                            
		<%ID> = sub i32 <%ID>, <%ID>                                                                                            
		<%ID> = icmp ugt i64 <%ID>, <INT>                                                                                       
		<%ID> = select i1 <%ID>, i64 <%ID>, i64 <INT>                                                                           
		<%ID> = shl i64 <%ID>, <INT>                                                                                            

<%ID> = add i32 <%ID>, <%ID>                                                                                            
<%ID> = add i64 <%ID>, <%ID>                                                                                            
<%ID> = sub nsw i32 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = sub nsw i64 <%ID>, <%ID>                                                                                        
Nearest neighbors:
		<%ID> = add i64 <%ID>, <%ID>                                                                                            
		<%ID> = sub nsw i32 <%ID>, <%ID>                                                                                        
		<%ID> = ptrtoint i8* <%ID> to i64                                                                                       
		<%ID> = select i1 <%ID>, i64 <%ID>, i64 <INT>                                                                           
		<%ID> = icmp ugt i64 <%ID>, <INT>                                                                                       

<%ID> = add nsw i32 <%ID>, <%ID>                                                                                        
<%ID> = add nsw i64 <%ID>, <%ID>                                                                                        
<%ID> = sub i32 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = sub i64 <%ID>, <%ID>                                                                                            
Nearest neighbors:
		<%ID> = add nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = icmp slt i64 <%ID>, <INT>                                                                                       
		<%ID> = sub i32 <%ID>, <%ID>                                                                                            
		<%ID> = sub nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = shl i64 <%ID>, <INT>                                                                                            

<%ID> = add nsw i32 <%ID>, <%ID>                                                                                        
<%ID> = add nsw i64 <%ID>, <%ID>                                                                                        
<%ID> = sub nsw i32 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = sub nsw i64 <%ID>, <%ID>                                                                                        
Nearest neighbors:
		<%ID> = add nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = icmp slt i64 <%ID>, <INT>                                                                                       
		<%ID> = sub nsw i32 <%ID>, <%ID>                                                                                        
		<%ID> = lshr i64 <%ID>, <INT>                                                                                           
		<%ID> = shl i64 <%ID>, <INT>                                                                                            

<%ID> = add nuw nsw i32 <%ID>, <%ID>                                                                                    
<%ID> = add nuw nsw i64 <%ID>, <%ID>                                                                                    
<%ID> = sub i32 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = sub i64 <%ID>, <%ID>                                                                                            
Nearest neighbors:
		<%ID> = add nuw nsw i64 <%ID>, <%ID>                                                                                    
		<%ID> = sub i32 <%ID>, <%ID>                                                                                            
		<%ID> = trunc i64 <%ID> to i32                                                                                          
		<%ID> = add i32 <%ID>, <%ID>                                                                                            
		<%ID> = mul nuw nsw i64 <%ID>, <INT>                                                                                    

<%ID> = add nuw nsw i32 <%ID>, <%ID>                                                                                    
<%ID> = add nuw nsw i64 <%ID>, <%ID>                                                                                    
<%ID> = sub nsw i32 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = sub nsw i64 <%ID>, <%ID>                                                                                        
Nearest neighbors:
		<%ID> = add nuw nsw i64 <%ID>, <%ID>                                                                                    
		<%ID> = sub nsw i32 <%ID>, <%ID>                                                                                        
		<%ID> = phi i64 [ 0, <%ID> ], [ <%ID>, <%ID> ]                                                                          
		<%ID> = trunc i64 <%ID> to i32                                                                                          
		<@ID> = private unnamed_addr constant [30 x i8]  <STRING>, align 1                                                      

<%ID> = add i32 <%ID>, <%ID>                                                                                            
<%ID> = add <32 x i8> <%ID>, <%ID>                                                                                      
<%ID> = sub i32 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = sub <32 x i8> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <32 x i8> <%ID>, <%ID>                                                                                      
		<%ID> = phi <32 x i8> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                
		<%ID> = sub i32 <%ID>, <%ID>                                                                                            
		<%ID> = phi i1 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                       
		<%ID> = phi { i16 }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                 

<%ID> = add i32 <%ID>, <%ID>                                                                                            
<%ID> = add <8 x i16> <%ID>, <%ID>                                                                                      
<%ID> = sub i32 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = sub <8 x i16> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <8 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = mul <8 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = shufflevector <8 x i16> <%ID>, <8 x i16> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = extractelement <8 x i16> <%ID>, <TYP> 0                                                                         
		<%ID> = shufflevector <8 x i16> <%ID>, <8 x i16> undef, <8 x i32> zeroinitializer                                       

<%ID> = add i32 <%ID>, <%ID>                                                                                            
<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
<%ID> = sub nsw i32 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = sub nsw <4 x i32> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       
		<%ID> = sub nsw i32 <%ID>, <%ID>                                                                                        
		<%ID> = add nsw <4 x i32> <%ID>, <%ID>                                                                                  

<%ID> = add nsw i32 <%ID>, <%ID>                                                                                        
<%ID> = add nsw <4 x i32> <%ID>, <%ID>                                                                                  
<%ID> = sub i32 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = sub i32 <%ID>, <%ID>                                                                                            
		<%ID> = mul nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = phi <4 x i32> [ <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>, <%ID> ], [ <%ID>, <%ID> ]                         
		<%ID> = sub nsw <4 x i32> <%ID>, <%ID>                                                                                  

<%ID> = add i32 <%ID>, <%ID>                                                                                            
<%ID> = add <8 x i32> <%ID>, <%ID>                                                                                      
<%ID> = sub nsw i32 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = sub nsw <8 x i32> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = add <8 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = mul <8 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = extractelement <8 x i32> <%ID>, <TYP> 0                                                                         
		<%ID> = shufflevector <8 x i32> <%ID>, <8 x i32> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = select <8 x i1> <%ID>, <8 x i32> <%ID>, <8 x i32> <%ID>                                                         

<%ID> = add i32 <%ID>, <%ID>                                                                                            
<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
<%ID> = sub i32 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = sub <4 x i64> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 0                                                                         
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = sub i32 <%ID>, <%ID>                                                                                            

<%ID> = add i32 <%ID>, <%ID>                                                                                            
<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
<%ID> = sub nsw i32 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = sub nsw <4 x i64> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 0                                                                         
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = sub nsw i32 <%ID>, <%ID>                                                                                        

<%ID> = add nsw i32 <%ID>, <%ID>                                                                                        
<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
<%ID> = sub i32 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = sub <4 x i64> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 0                                                                         

<%ID> = add nsw i32 <%ID>, <%ID>                                                                                        
<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
<%ID> = sub nsw i32 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = sub nsw <4 x i64> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 0                                                                         
		<%ID> = phi <4 x i64> [ <%ID>, <%ID> ], [ zeroinitializer, <%ID> ]                                                      

<%ID> = add i64 <%ID>, <%ID>                                                                                            
<%ID> = add <32 x i8> <%ID>, <%ID>                                                                                      
<%ID> = sub i64 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = sub <32 x i8> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <32 x i8> <%ID>, <%ID>                                                                                      
		<%ID> = sub i64 <%ID>, <%ID>                                                                                            
		store <32 x i8> <%ID>, <32 x i8>* <%ID>, align 1                                                                        
		define linkonce_odr void <@ID>({ { <{ i32 (...)**, { { { opaque* } } }, { { i32*, [24 x i8] } }, { { i32*, [24 x i8] } }, { { i32*, [24 x i8] } }, { { i32*, [24 x i8] } }, i32, i8, [3 x i8], { { { i8 }, { i8 }, i8, opaque*, opaque*, i64, i64, i64, i64, i64 } }, { { { i8 }, { i8 }, i8, opaque*, opaque*, i64, i64, i64, i64, i64 } }, i8 }> }, [7 x i8] }*, { { { { { { i32, { { { { { { i64, i64, i8* } } } } } } }* } } } }, { i64, <{ i32 (...)**, { { { opaque* } } }, { { i32*, [24 x i8] } }, { { i32*, [24 x i8] } }, { { i32*, [24 x i8] } }, { { i32*, [24 x i8] } }, i32, i8, [3 x i8], { { { i8 }, { i8 }, i8, opaque*, opaque*, i64, i64, i64, i64, i64 } }, { { { i8 }, { i8 }, i8, opaque*, opaque*, i64, i64, i64, i64, i64 } }, i8, [7 x i8] }>*, { i32 (...)**, { i32 (...)**, { { { { i32 (...)** }* } } }, { i32 (...)** }* }*, { i32, opaque* }*, <{ opaque*, { <{ i32 (...)**, { { { i32 } } } }>, [4 x i8] }*, opaque*, i32, [4 x i8] }>*, opaque*, <{ { i32 (...)** }*, i32, [4 x i8] }>* }*, { i32 (...)** }*, i8, i8, i8, { i32 }*, opaque*, opaque*, { <{ i32 (...)**, { { { i32 } } } }>, [4 x i8] }*, { { { i32, opaque* } }, i64, { <{ { { { { opaque* }**, { { { i64 } } } } } }, { { { opaque* } } }, { { i64 } }, { { float } }, [4 x i8] }> } }*, { { { i32, opaque* } }, { <{ { { { { opaque* }**, { { { i64 } } } } } }, { { { opaque* } } }, { { i64 } }, { { float } }, [4 x i8] }> } }*, { i8, { { i8 } }, { { i32, opaque* } }, <{ { { i32, opaque* } }, { { i32, opaque* } }, { { i8 } }, [7 x i8] }>, i64, { { { i8 }, { i8 }, i8, opaque*, opaque*, i64, i64, i64, i64, i64 } } }*, { { { { { i32, opaque* } }*, { { { { { { { { i64*, [40 x i8] } }* }*, [8 x i8] }, i64 } } }, { <{ i32 (...)**, { { { i32 } } } }>, [4 x i8] }* }* }*, [72 x i8] } }*, i8, { { { i32 }*, [24 x i8] } }*, { { { <{ i32 (...)**, { { { i32 } } } }>, [4 x i8] }**, [40 x i8] } }*, { <{ i32 (...)**, { { { i32 } } } }>, [4 x i8] }*, { i64, i64 }, opaque*, opaque*, opaque*, opaque*, opaque* }*, { { i32, opaque* } }, { { { { i32 (...)** }*, { { i32 (...)** }, { i32 (...)** }*, { { i32, opaque* } }, i32, i64, i64, i64, { { { i64, i64 }*, [72 x i8] } }, i8, [7 x i8], { <{ { { { { opaque* }**, { { { i64 } } } } } }, { { { opaque* } } }, { { i64 } }, { { float } }, [4 x i8] }> }, i64 }* }*, [72 x i8] } }, { { { { { i32, opaque* } }*, { { { { { { { { i64*, [40 x i8] } }* }*, [8 x i8] }, i64 } } }, { <{ i32 (...)**, { { { i32 } } } }>, [4 x i8] }* }* }*, [72 x i8] } }, { [64 x i8] }, i8, { { i32, opaque* } }, i64, i64, { { { opaque* } } }, { { { opaque* } } } }*) unnamed_addr
		<%ID> = phi <32 x i8> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                

<%ID> = add i64 <%ID>, <%ID>                                                                                            
<%ID> = add <8 x i16> <%ID>, <%ID>                                                                                      
<%ID> = sub i64 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = sub <8 x i16> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <8 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = mul <8 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = shufflevector <8 x i16> <%ID>, <8 x i16> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = extractelement <8 x i16> <%ID>, <TYP> 0                                                                         
		<%ID> = shufflevector <8 x i16> <%ID>, <8 x i16> undef, <8 x i32> <i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>

<%ID> = add i64 <%ID>, <%ID>                                                                                            
<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
<%ID> = sub nsw i64 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = sub nsw <4 x i32> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = sub nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      

<%ID> = add nsw i64 <%ID>, <%ID>                                                                                        
<%ID> = add nsw <4 x i32> <%ID>, <%ID>                                                                                  
<%ID> = sub i64 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = sub nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = sub i64 <%ID>, <%ID>                                                                                            
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      

<%ID> = add i64 <%ID>, <%ID>                                                                                            
<%ID> = add <8 x i32> <%ID>, <%ID>                                                                                      
<%ID> = sub nsw i64 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = sub nsw <8 x i32> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = add <8 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = shufflevector <8 x i32> <%ID>, <8 x i32> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = sub nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = extractelement <8 x i32> <%ID>, <TYP> 0                                                                         
		<%ID> = shufflevector <8 x i32> <%ID>, <8 x i32> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef>

<%ID> = add nsw i64 <%ID>, <%ID>                                                                                        
<%ID> = add nsw <8 x i32> <%ID>, <%ID>                                                                                  
<%ID> = sub nsw i64 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = sub nsw <8 x i32> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = add nsw <8 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw <8 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = shufflevector <8 x i32> <%ID>, <8 x i32> undef, <8 x i32> zeroinitializer                                       
		<%ID> = sub nsw i64 <%ID>, <%ID>                                                                                        
		store <8 x i32> <%ID>, <8 x i32>* <%ID>, align 4                                                                        

<%ID> = add i64 <%ID>, <%ID>                                                                                            
<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
<%ID> = sub i64 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = sub <4 x i64> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = sub i64 <%ID>, <%ID>                                                                                            
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 0                                                                         

<%ID> = add i64 <%ID>, <%ID>                                                                                            
<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
<%ID> = sub nsw i64 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = sub nsw <4 x i64> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = sub nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = sub <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  

<%ID> = add nsw i64 <%ID>, <%ID>                                                                                        
<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
<%ID> = sub i64 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = sub <4 x i64> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = phi <4 x i64> [ <%ID>, <%ID> ], [ undef, <%ID> ]                                                                
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 0                                                                         

<%ID> = add nsw i64 <%ID>, <%ID>                                                                                        
<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
<%ID> = sub nsw i64 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = sub nsw <4 x i64> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 0                                                                         

<%ID> = add <16 x i8> <%ID>, <%ID>                                                                                      
<%ID> = add <32 x i8> <%ID>, <%ID>                                                                                      
<%ID> = sub <16 x i8> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = sub <32 x i8> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <32 x i8> <%ID>, <%ID>                                                                                      
		<%ID> = sub <16 x i8> <%ID>, <%ID>                                                                                      
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([152 x i8], [152 x i8]* <@ID>, i64 <INT>, i64 <INT>))
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([146 x i8], [146 x i8]* <@ID>, i64 <INT>, i64 <INT>))
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([202 x i8], [202 x i8]* <@ID>, i64 <INT>, i64 <INT>))

<%ID> = add <16 x i8> <%ID>, <%ID>                                                                                      
<%ID> = add <8 x i16> <%ID>, <%ID>                                                                                      
<%ID> = sub <16 x i8> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = sub <8 x i16> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <8 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = extractelement <8 x i16> <%ID>, <TYP> 0                                                                         
		<%ID> = shufflevector <8 x i16> <%ID>, <8 x i16> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = mul <8 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = shufflevector <8 x i16> <%ID>, <8 x i16> undef, <8 x i32> <i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>

<%ID> = add <32 x i8> <%ID>, <%ID>                                                                                      
<%ID> = add <8 x i16> <%ID>, <%ID>                                                                                      
<%ID> = sub <32 x i8> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = sub <8 x i16> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <8 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = extractelement <8 x i16> <%ID>, <TYP> 0                                                                         
		<%ID> = sub <32 x i8> <%ID>, <%ID>                                                                                      
		<%ID> = shufflevector <8 x i16> <%ID>, <8 x i16> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = mul <8 x i16> <%ID>, <%ID>                                                                                      

<%ID> = add <32 x i8> <%ID>, <%ID>                                                                                      
<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
<%ID> = sub <32 x i8> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = phi <4 x i32> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                
		<%ID> = sub <32 x i8> <%ID>, <%ID>                                                                                      
		<%ID> = getelementptr inbounds { { { i32 (...)** } }, { { i8* } }, { { { { { { { i64, i64, i8* } } } } } }* }, i32, i32 }, { { { i32 (...)** } }, { { i8* } }, { { { { { { { i64, i64, i8* } } } } } }* }, i32, i32 }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>

<%ID> = add <32 x i8> <%ID>, <%ID>                                                                                      
<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
<%ID> = sub <32 x i8> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = sub <4 x i64> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = sub <32 x i8> <%ID>, <%ID>                                                                                      
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = bitcast { { { { { { { i64, i64, i8* } } } } } }* }* <%ID> to i64*                                               
		<%ID> = load <{ { { { { { { i64, i64, i8* } } } } } }, i32, [4 x i8] }>*, <{ { { { { { { i64, i64, i8* } } } } } }, i32, [4 x i8] }>** <%ID>, align 8

<%ID> = add <8 x i16> <%ID>, <%ID>                                                                                      
<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
<%ID> = sub <8 x i16> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = sub <8 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = mul nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     
		<%ID> = call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                          

<%ID> = add <8 x i16> <%ID>, <%ID>                                                                                      
<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
<%ID> = sub <8 x i16> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = sub <4 x i64> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = sub <8 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 0                                                                         

<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
<%ID> = add <8 x i32> <%ID>, <%ID>                                                                                      
<%ID> = sub nsw <4 x i32> <%ID>, <%ID>                                                                                  
expected answer:
		<%ID> = sub nsw <8 x i32> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = add <8 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = icmp slt <8 x i32> <%ID>, <%ID>                                                                                 
		<%ID> = icmp sgt <8 x i32> <%ID>, <%ID>                                                                                 
		<%ID> = select <8 x i1> <%ID>, <8 x i32> <%ID>, <8 x i32> <%ID>                                                         
		<%ID> = shufflevector <8 x i32> <%ID>, <8 x i32> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>

<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = sub <4 x i64> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 0                                                                         
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 1                                                                         

<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
<%ID> = sub nsw <4 x i32> <%ID>, <%ID>                                                                                  
expected answer:
		<%ID> = sub nsw <4 x i64> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 0                                                                         
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 1                                                                         

<%ID> = add nsw <4 x i32> <%ID>, <%ID>                                                                                  
<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = sub <4 x i64> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 0                                                                         
		<%ID> = phi <4 x i64> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                
		<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      

<%ID> = add nsw <4 x i32> <%ID>, <%ID>                                                                                  
<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
<%ID> = sub nsw <4 x i32> <%ID>, <%ID>                                                                                  
expected answer:
		<%ID> = sub nsw <4 x i64> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 0                                                                         
		<%ID> = phi <4 x i64> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 1                                                                         

<%ID> = add <8 x i32> <%ID>, <%ID>                                                                                      
<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
<%ID> = sub nsw <8 x i32> <%ID>, <%ID>                                                                                  
expected answer:
		<%ID> = sub nsw <4 x i64> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 0                                                                         
		<%ID> = sub nsw <8 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  

<%ID> = add nsw <8 x i32> <%ID>, <%ID>                                                                                  
<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
<%ID> = sub nsw <8 x i32> <%ID>, <%ID>                                                                                  
expected answer:
		<%ID> = sub nsw <4 x i64> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = sub nsw <8 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = phi <4 x i64> [ zeroinitializer, <%ID> ], [ <%ID>, <%ID> ]                                                      
		<%ID> = phi <4 x i64> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                

<%ID> = add i8 <%ID>, <%ID>                                                                                             
<%ID> = add i32 <%ID>, <%ID>                                                                                            
<%ID> = mul i8 <%ID>, <%ID>                                                                                             
expected answer:
		<%ID> = mul i32 <%ID>, <%ID>                                                                                            
Nearest neighbors:
		<%ID> = add i32 <%ID>, <%ID>                                                                                            
		<%ID> = mul i8 <%ID>, <%ID>                                                                                             
		<%ID> = zext i32 <%ID> to i64                                                                                           
		<%ID> = icmp sgt i32 <%ID>, <%ID>                                                                                       
		<%ID> = add nsw i32 <%ID>, <%ID>                                                                                        

<%ID> = add i8 <%ID>, <%ID>                                                                                             
<%ID> = add i64 <%ID>, <%ID>                                                                                            
<%ID> = mul i8 <%ID>, <%ID>                                                                                             
expected answer:
		<%ID> = mul i64 <%ID>, <%ID>                                                                                            
Nearest neighbors:
		<%ID> = add i64 <%ID>, <%ID>                                                                                            
		<%ID> = mul i8 <%ID>, <%ID>                                                                                             
		<%ID> = icmp ult i64 <%ID>, <INT>                                                                                       
		<%ID> = icmp sgt i64 <%ID>, <%ID>                                                                                       
		<%ID> = icmp ugt i64 <%ID>, <INT>                                                                                       

<%ID> = add i8 <%ID>, <%ID>                                                                                             
<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
<%ID> = mul i8 <%ID>, <%ID>                                                                                             
expected answer:
		<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = mul i8 <%ID>, <%ID>                                                                                             
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 0                                                                         

<%ID> = add i32 <%ID>, <%ID>                                                                                            
<%ID> = add i64 <%ID>, <%ID>                                                                                            
<%ID> = mul i32 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul i64 <%ID>, <%ID>                                                                                            
Nearest neighbors:
		<%ID> = add i64 <%ID>, <%ID>                                                                                            
		<%ID> = mul i32 <%ID>, <%ID>                                                                                            
		<%ID> = extractvalue { i32, i32, i32, i32 } <%ID>, 3                                                                    
		<%ID> = tail call { i32, i32, i32, i32 } asm sideeffect "cpuid", "={ax},={bx},={cx},={dx},0,2,~{dirflag},~{fpsr},~{flags}"(i32 <INT>, i32 <INT>)
		<%ID> = extractvalue { i32, i32, i32, i32 } <%ID>, 2                                                                    

<%ID> = add i32 <%ID>, <%ID>                                                                                            
<%ID> = add i64 <%ID>, <%ID>                                                                                            
<%ID> = mul nuw nsw i32 <%ID>, <%ID>                                                                                    
expected answer:
		<%ID> = mul nuw nsw i64 <%ID>, <%ID>                                                                                    
Nearest neighbors:
		<%ID> = mul nuw nsw i32 <%ID>, <%ID>                                                                                    
		<%ID> = add i64 <%ID>, <%ID>                                                                                            
		<%ID> = icmp ult i8 <%ID>, <%ID>                                                                                        
		<%ID> = getelementptr inbounds [256 x i8], [256 x i8]* <%ID>, i64 <INT>, i64 <%ID>                                      
		<%ID> = icmp ugt i8 <%ID>, <%ID>                                                                                        

<%ID> = add nsw i32 <%ID>, <%ID>                                                                                        
<%ID> = add nsw i64 <%ID>, <%ID>                                                                                        
<%ID> = mul i32 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul i64 <%ID>, <%ID>                                                                                            
Nearest neighbors:
		<%ID> = add nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = mul i32 <%ID>, <%ID>                                                                                            
		<%ID> = icmp slt i64 <%ID>, <INT>                                                                                       
		<%ID> = add i64 <%ID>, <INT>                                                                                            
		<%ID> = mul nsw i64 <%ID>, <INT>                                                                                        

<%ID> = add nsw i32 <%ID>, <%ID>                                                                                        
<%ID> = add nsw i64 <%ID>, <%ID>                                                                                        
<%ID> = mul nuw nsw i32 <%ID>, <%ID>                                                                                    
expected answer:
		<%ID> = mul nuw nsw i64 <%ID>, <%ID>                                                                                    
Nearest neighbors:
		<%ID> = add nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = mul nuw nsw i32 <%ID>, <%ID>                                                                                    
		<%ID> = icmp ne i16 <%ID>, <INT>                                                                                        
		<%ID> = icmp slt i64 <%ID>, <INT>                                                                                       
		<%ID> = getelementptr inbounds { [37 x i32], void (opaque*, i8*)*, void (opaque*, i8*)*, i8*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8*, void (opaque*, { i64, i64, i8, i8, i8, i8 }*, i8*)*, void (opaque*, { i64, i64, i8, i8, i8, i8 }*, i8*)*, i8*, i8, i8, i64, i64, i64, { i8*, i32, i64, i8*, i32, i64, i8*, { i32 }*, i8* (i8*, i32, i32)*, void (i8*, i8*)*, i8*, i32, i64, i64 }, i8*, i64, i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i64, i64, i8*, i8*, i8*, i8*, i8*, i8*, { i64, i64, i8, i8, i8, i8 }, i64, i64, { i8, i8, i8 }*, i16, i16, [5 x i8], i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i16, i8, float, { i8, i16, i16, i16, i16 }, { i8, i16, i16, i16, i16 }, void (opaque*)*, i64, i64, i32, float, float, i8*, i8*, i8*, i16**, i16**, i16**, { i8, i8, i8, i8, i8 }, { i8, i8, i8, i8, i8 }, i8*, { i8, i16, i16, i16, i16 }, void (opaque*, i64, i32)*, void (opaque*, i64, i32)*, void (opaque*, { i64, i64, i64, i64, { i8, i8, i8 }*, i16, i16, i8, i8, i8, i8, i8, i8, i8, i8, [8 x i8], float, i8, i32, i32, { i32, i8*, i8*, i64 }*, { i16, i8, i8, i8, i8, i8 }, { i8, i8, i8, i8, i8 }, i8*, { i8, i16, i16, i16, i16 }, { i8, i16, i16, i16, i16 }, i64, i64, i8, i64, i64, i8, i16*, float, float, float, float, float, float, float, float, i8*, i64, i64, i8*, i8**, i8, i8, i64, { [5 x i8], i8*, i64, i8 }*, i64, i8*, i8*, i64, i8, { i8*, i8, { i16, i16, i16, i16, i16 }*, i64 }*, i64, i8, double, double, i8*, i8*, i8**, i64, i64, i64, i64, i64, i64, i64, i64, i64 }*)*, void (opaque*, i8*, i64, i32)*, void (opaque*, { i64, i64, i64, i64, { i8, i8, i8 }*, i16, i16, i8, i8, i8, i8, i8, i8, i8, i8, [8 x i8], float, i8, i32, i32, { i32, i8*, i8*, i64 }*, { i16, i8, i8, i8, i8, i8 }, { i8, i8, i8, i8, i8 }, i8*, { i8, i16, i16, i16, i16 }, { i8, i16, i16, i16, i16 }, i64, i64, i8, i64, i64, i8, i16*, float, float, float, float, float, float, float, float, i8*, i64, i64, i8*, i8**, i8, i8, i64, { [5 x i8], i8*, i64, i8 }*, i64, i8*, i8*, i64, i8, { i8*, i8, { i16, i16, i16, i16, i16 }*, i64 }*, i64, i8, double, double, i8*, i8*, i8**, i64, i64, i64, i64, i64, i64, i64, i64, i64 }*)*, i8*, i8*, i8*, i8*, i64, i64, i64, i64, i64, i64, i32, i32, i64, i64, i8*, i8*, i8*, i8*, i16*, i8, i8, i8*, i16*, i16*, i16*, i16*, i8*, i64, i8*, i32 (opaque*, { [5 x i8], i8*, i64, i8 }*)*, i32, i8*, i8, i16, i16, i16, i64, i64, i8, i64, i8*, i8* (opaque*, i64)*, void (opaque*, i8*)*, i8*, i8*, i8*, i8*, i8, i64, i64, { [5 x i8], i8*, i64, i8 }, i64, i64, i8* }, { [37 x i32], void (opaque*, i8*)*, void (opaque*, i8*)*, i8*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8*, void (opaque*, { i64, i64, i8, i8, i8, i8 }*, i8*)*, void (opaque*, { i64, i64, i8, i8, i8, i8 }*, i8*)*, i8*, i8, i8, i64, i64, i64, { i8*, i32, i64, i8*, i32, i64, i8*, { i32 }*, i8* (i8*, i32, i32)*, void (i8*, i8*)*, i8*, i32, i64, i64 }, i8*, i64, i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i64, i64, i8*, i8*, i8*, i8*, i8*, i8*, { i64, i64, i8, i8, i8, i8 }, i64, i64, { i8, i8, i8 }*, i16, i16, [5 x i8], i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i16, i8, float, { i8, i16, i16, i16, i16 }, { i8, i16, i16, i16, i16 }, void (opaque*)*, i64, i64, i32, float, float, i8*, i8*, i8*, i16**, i16**, i16**, { i8, i8, i8, i8, i8 }, { i8, i8, i8, i8, i8 }, i8*, { i8, i16, i16, i16, i16 }, void (opaque*, i64, i32)*, void (opaque*, i64, i32)*, void (opaque*, { i64, i64, i64, i64, { i8, i8, i8 }*, i16, i16, i8, i8, i8, i8, i8, i8, i8, i8, [8 x i8], float, i8, i32, i32, { i32, i8*, i8*, i64 }*, { i16, i8, i8, i8, i8, i8 }, { i8, i8, i8, i8, i8 }, i8*, { i8, i16, i16, i16, i16 }, { i8, i16, i16, i16, i16 }, i64, i64, i8, i64, i64, i8, i16*, float, float, float, float, float, float, float, float, i8*, i64, i64, i8*, i8**, i8, i8, i64, { [5 x i8], i8*, i64, i8 }*, i64, i8*, i8*, i64, i8, { i8*, i8, { i16, i16, i16, i16, i16 }*, i64 }*, i64, i8, double, double, i8*, i8*, i8**, i64, i64, i64, i64, i64, i64, i64, i64, i64 }*)*, void (opaque*, i8*, i64, i32)*, void (opaque*, { i64, i64, i64, i64, { i8, i8, i8 }*, i16, i16, i8, i8, i8, i8, i8, i8, i8, i8, [8 x i8], float, i8, i32, i32, { i32, i8*, i8*, i64 }*, { i16, i8, i8, i8, i8, i8 }, { i8, i8, i8, i8, i8 }, i8*, { i8, i16, i16, i16, i16 }, { i8, i16, i16, i16, i16 }, i64, i64, i8, i64, i64, i8, i16*, float, float, float, float, float, float, float, float, i8*, i64, i64, i8*, i8**, i8, i8, i64, { [5 x i8], i8*, i64, i8 }*, i64, i8*, i8*, i64, i8, { i8*, i8, { i16, i16, i16, i16, i16 }*, i64 }*, i64, i8, double, double, i8*, i8*, i8**, i64, i64, i64, i64, i64, i64, i64, i64, i64 }*)*, i8*, i8*, i8*, i8*, i64, i64, i64, i64, i64, i64, i32, i32, i64, i64, i8*, i8*, i8*, i8*, i16*, i8, i8, i8*, i16*, i16*, i16*, i16*, i8*, i64, i8*, i32 (opaque*, { [5 x i8], i8*, i64, i8 }*)*, i32, i8*, i8, i16, i16, i16, i64, i64, i8, i64, i8*, i8* (opaque*, i64)*, void (opaque*, i8*)*, i8*, i8*, i8*, i8*, i8, i64, i64, { [5 x i8], i8*, i64, i8 }, i64, i64, i8* }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>

<%ID> = add nuw nsw i32 <%ID>, <%ID>                                                                                    
<%ID> = add nuw nsw i64 <%ID>, <%ID>                                                                                    
<%ID> = mul i32 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul i64 <%ID>, <%ID>                                                                                            
Nearest neighbors:
		<%ID> = add nuw nsw i64 <%ID>, <%ID>                                                                                    
		<%ID> = mul i32 <%ID>, <%ID>                                                                                            
		<%ID> = extractvalue { i32, i32, i32, i32 } <%ID>, 2                                                                    
		<%ID> = extractvalue { i32, i32, i32, i32 } <%ID>, 3                                                                    
		<%ID> = add i64 <%ID>, <INT>                                                                                            

<%ID> = add nuw nsw i32 <%ID>, <%ID>                                                                                    
<%ID> = add nuw nsw i64 <%ID>, <%ID>                                                                                    
<%ID> = mul nsw i32 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = mul nsw i64 <%ID>, <%ID>                                                                                        
Nearest neighbors:
		<%ID> = add nuw nsw i64 <%ID>, <%ID>                                                                                    
		<%ID> = mul nsw i32 <%ID>, <%ID>                                                                                        
		<%ID> = add nsw i64 <%ID>, <%ID>                                                                                        
		call void <@ID>(metadata { { i8* }, i64, { i64, [8 x i8] } }* <%ID>(DW_OP_stack_value))                                 
		<%ID> = getelementptr inbounds { i32, i32, i32, i32, { i32 (...)** }*, i32, { { i32 (...)** }*, { i32 (...)** }*, i32, i32, i8*, i8*, i64, i32, i8*, i8*, i32, i32, opaque* }*, i64, { i32* }, { i64*, [2 x i64] } }, { i32, i32, i32, i32, { i32 (...)** }*, i32, { { i32 (...)** }*, { i32 (...)** }*, i32, i32, i8*, i8*, i64, i32, i8*, i8*, i32, i32, opaque* }*, i64, { i32* }, { i64*, [2 x i64] } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>

<%ID> = add nuw nsw i32 <%ID>, <%ID>                                                                                    
<%ID> = add nuw nsw i64 <%ID>, <%ID>                                                                                    
<%ID> = mul nuw nsw i32 <%ID>, <%ID>                                                                                    
expected answer:
		<%ID> = mul nuw nsw i64 <%ID>, <%ID>                                                                                    
Nearest neighbors:
		<%ID> = add nuw nsw i64 <%ID>, <%ID>                                                                                    
		<%ID> = mul nuw nsw i32 <%ID>, <%ID>                                                                                    
		<%ID> = getelementptr inbounds [256 x i8], [256 x i8]* <@ID>, i64 <INT>, i64 <%ID>                                      
		<%ID> = add nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = mul nuw nsw i64 <%ID>, <INT>                                                                                    

<%ID> = add i32 <%ID>, <%ID>                                                                                            
<%ID> = add <32 x i8> <%ID>, <%ID>                                                                                      
<%ID> = mul i32 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul <32 x i8> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <32 x i8> <%ID>, <%ID>                                                                                      
		<%ID> = mul i32 <%ID>, <%ID>                                                                                            
		<%ID> = phi <32 x i8> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                
		<%ID> = extractvalue { i32, i32, i32, i32 } <%ID>, 3                                                                    
		<%ID> = bitcast i8* <%ID> to <32 x i8>*                                                                                 

<%ID> = add i32 <%ID>, <%ID>                                                                                            
<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
<%ID> = mul i32 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = mul i32 <%ID>, <%ID>                                                                                            
		<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ null, <%ID> ], [ null, <%ID> ]                                                     

<%ID> = add i32 <%ID>, <%ID>                                                                                            
<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
<%ID> = mul nsw i32 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = mul nsw <4 x i32> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = mul nsw i32 <%ID>, <%ID>                                                                                        
		<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       

<%ID> = add nsw i32 <%ID>, <%ID>                                                                                        
<%ID> = add nsw <4 x i32> <%ID>, <%ID>                                                                                  
<%ID> = mul i32 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = mul i32 <%ID>, <%ID>                                                                                            
		<%ID> = add nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = sub nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = tail call { i32, i32, i32, i32 } asm sideeffect "cpuid", "={ax},={bx},={cx},={dx},0,2,~{dirflag},~{fpsr},~{flags}"(i32 <INT>, i32 <INT>)

<%ID> = add i32 <%ID>, <%ID>                                                                                            
<%ID> = add <8 x i32> <%ID>, <%ID>                                                                                      
<%ID> = mul nsw i32 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = mul nsw <8 x i32> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = add <8 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = shufflevector <8 x i32> <%ID>, <8 x i32> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = mul nsw i32 <%ID>, <%ID>                                                                                        
		<%ID> = shufflevector <8 x i32> <%ID>, <8 x i32> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = extractelement <8 x i32> <%ID>, <TYP> 0                                                                         

<%ID> = add nsw i32 <%ID>, <%ID>                                                                                        
<%ID> = add nsw <8 x i32> <%ID>, <%ID>                                                                                  
<%ID> = mul i32 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul <8 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add nsw <8 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = mul i32 <%ID>, <%ID>                                                                                            
		<%ID> = load <8 x i32>, <8 x i32>* <%ID>, align 4                                                                       
		<%ID> = mul nsw <8 x i32> <%ID>, <%ID>                                                                                  
		store <8 x i32> <%ID>, <8 x i32>* <%ID>, align 4                                                                        

<%ID> = add i32 <%ID>, <%ID>                                                                                            
<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
<%ID> = mul i32 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = mul i32 <%ID>, <%ID>                                                                                            
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 0                                                                         
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  

<%ID> = add i64 <%ID>, <%ID>                                                                                            
<%ID> = add <32 x i8> <%ID>, <%ID>                                                                                      
<%ID> = mul i64 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul <32 x i8> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <32 x i8> <%ID>, <%ID>                                                                                      
		<%ID> = mul i64 <%ID>, <%ID>                                                                                            
		store <32 x i8> <%ID>, <32 x i8>* <%ID>, align 1                                                                        
		<%ID> = phi <32 x i8> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                
		<%ID> = bitcast i8* <%ID> to <32 x i8>*                                                                                 

<%ID> = add i64 <%ID>, <%ID>                                                                                            
<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
<%ID> = mul i64 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = mul i64 <%ID>, <%ID>                                                                                            
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     

<%ID> = add i64 <%ID>, <%ID>                                                                                            
<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
<%ID> = mul nsw i64 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = mul nsw <4 x i32> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = mul nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      

<%ID> = add nsw i64 <%ID>, <%ID>                                                                                        
<%ID> = add nsw <4 x i32> <%ID>, <%ID>                                                                                  
<%ID> = mul i64 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = sub nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = mul i64 <%ID>, <%ID>                                                                                            

<%ID> = add i64 <%ID>, <%ID>                                                                                            
<%ID> = add <8 x i32> <%ID>, <%ID>                                                                                      
<%ID> = mul nsw i64 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = mul nsw <8 x i32> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = add <8 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = mul <8 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = shufflevector <8 x i32> <%ID>, <8 x i32> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = mul nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = extractelement <8 x i32> <%ID>, <TYP> 0                                                                         

<%ID> = add nsw i64 <%ID>, <%ID>                                                                                        
<%ID> = add nsw <8 x i32> <%ID>, <%ID>                                                                                  
<%ID> = mul i64 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul <8 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add nsw <8 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw <8 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = mul i64 <%ID>, <%ID>                                                                                            
		<%ID> = shufflevector <8 x i32> <%ID>, <8 x i32> undef, <8 x i32> zeroinitializer                                       
		<%ID> = getelementptr inbounds { i32, i8* }, { i32, i8* }* <%ID>, i64 <INT>, i32 <INT>                                  

<%ID> = add i64 <%ID>, <%ID>                                                                                            
<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
<%ID> = mul i64 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = mul i64 <%ID>, <%ID>                                                                                            
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 2                                                                         

<%ID> = add <4 x i8> <%ID>, <%ID>                                                                                       
<%ID> = add <32 x i8> <%ID>, <%ID>                                                                                      
<%ID> = mul <4 x i8> <%ID>, <%ID>                                                                                       
expected answer:
		<%ID> = mul <32 x i8> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <32 x i8> <%ID>, <%ID>                                                                                      
		<%ID> = phi <32 x i8> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                
		store i16 <%ID>, i16* <%ID>, align 4                                                                                    
		store volatile i32 <INT>, i32* <%ID>, align 4                                                                           
		<%ID> = shufflevector <32 x i8> <%ID>, <32 x i8> undef, <32 x i32> zeroinitializer                                      

<%ID> = add <4 x i8> <%ID>, <%ID>                                                                                       
<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
<%ID> = mul <4 x i8> <%ID>, <%ID>                                                                                       
expected answer:
		<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 0                                                                         
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 1                                                                         

<%ID> = add <8 x i8> <%ID>, <%ID>                                                                                       
<%ID> = add <32 x i8> <%ID>, <%ID>                                                                                      
<%ID> = mul <8 x i8> <%ID>, <%ID>                                                                                       
expected answer:
		<%ID> = mul <32 x i8> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <32 x i8> <%ID>, <%ID>                                                                                      
		<%ID> = mul <8 x i8> <%ID>, <%ID>                                                                                       
		<%ID> = phi <32 x i8> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                
		<%ID> = phi i64 [ <%ID>, <%ID> ], [ 0, <%ID> ]                                                                          
		store i16 <%ID>, i16* <%ID>, align 4                                                                                    

<%ID> = add <8 x i8> <%ID>, <%ID>                                                                                       
<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
<%ID> = mul <8 x i8> <%ID>, <%ID>                                                                                       
expected answer:
		<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 0                                                                         
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 2                                                                         

<%ID> = add <32 x i8> <%ID>, <%ID>                                                                                      
<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
<%ID> = mul <32 x i8> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 0                                                                         
		<%ID> = mul <32 x i8> <%ID>, <%ID>                                                                                      
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 2                                                                         
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  

<%ID> = add <4 x i16> <%ID>, <%ID>                                                                                      
<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
<%ID> = mul <4 x i16> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 0                                                                         
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 1                                                                         

<%ID> = add <8 x i16> <%ID>, <%ID>                                                                                      
<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
<%ID> = mul <8 x i16> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 0                                                                         
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 2                                                                         

<%ID> = add <16 x i16> <%ID>, <%ID>                                                                                     
<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
<%ID> = mul <16 x i16> <%ID>, <%ID>                                                                                     
expected answer:
		<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 0                                                                         
		<%ID> = phi <4 x i64> [ zeroinitializer, <%ID> ], [ <%ID>, <%ID> ]                                                      

<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
<%ID> = add <8 x i32> <%ID>, <%ID>                                                                                      
<%ID> = mul nsw <4 x i32> <%ID>, <%ID>                                                                                  
expected answer:
		<%ID> = mul nsw <8 x i32> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = add <8 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = mul <8 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = icmp slt <8 x i32> <%ID>, <%ID>                                                                                 
		<%ID> = shufflevector <8 x i32> <%ID>, <8 x i32> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = select <8 x i1> <%ID>, <8 x i32> <%ID>, <8 x i32> <%ID>                                                         

<%ID> = add nsw <4 x i32> <%ID>, <%ID>                                                                                  
<%ID> = add nsw <8 x i32> <%ID>, <%ID>                                                                                  
<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = mul <8 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = add nsw <8 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = mul nsw <8 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = add <8 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = shufflevector <8 x i32> <%ID>, <8 x i32> undef, <8 x i32> zeroinitializer                                       

<%ID> = add i32 <%ID>, <%ID>                                                                                            
<%ID> = add i64 <%ID>, <%ID>                                                                                            
<%ID> = udiv i32 <%ID>, <%ID>                                                                                           
expected answer:
		<%ID> = udiv i64 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = add i64 <%ID>, <%ID>                                                                                            
		<%ID> = udiv i32 <%ID>, <%ID>                                                                                           
		<%ID> = add i64 <%ID>, <INT>                                                                                            
		<%ID> = icmp ugt i64 <%ID>, <INT>                                                                                       
		<%ID> = tail call i32 <@ID>({ i8*, i8*, opaque*, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, opaque*, { i32 (...)** }* }* nonnull <%ID>, i32 <%ID>)

<%ID> = add nsw i32 <%ID>, <%ID>                                                                                        
<%ID> = add nsw i64 <%ID>, <%ID>                                                                                        
<%ID> = udiv i32 <%ID>, <%ID>                                                                                           
expected answer:
		<%ID> = udiv i64 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = add nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = icmp slt i64 <%ID>, <INT>                                                                                       
		<%ID> = udiv i32 <%ID>, <%ID>                                                                                           
		<%ID> = sub nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = icmp slt i64 <%ID>, <%ID>                                                                                       

<%ID> = add nuw nsw i32 <%ID>, <%ID>                                                                                    
<%ID> = add nuw nsw i64 <%ID>, <%ID>                                                                                    
<%ID> = udiv i32 <%ID>, <%ID>                                                                                           
expected answer:
		<%ID> = udiv i64 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = add nuw nsw i64 <%ID>, <%ID>                                                                                    
		<%ID> = udiv i32 <%ID>, <%ID>                                                                                           
		<%ID> = phi { { i64, [56 x i8] } }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                  
		<%ID> = alloca i32, align 4                                                                                             
		<%ID> = phi i64 [ 0, <%ID> ], [ <%ID>, <%ID> ]                                                                          

<%ID> = add i32 <%ID>, <%ID>                                                                                            
<%ID> = add i64 <%ID>, <%ID>                                                                                            
<%ID> = sdiv i32 <%ID>, <%ID>                                                                                           
expected answer:
		<%ID> = sdiv i64 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = add i64 <%ID>, <%ID>                                                                                            
		<%ID> = sdiv i32 <%ID>, <%ID>                                                                                           
		<%ID> = phi i64 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                  
		<%ID> = mul i64 <%ID>, <INT>                                                                                            
		<%ID> = select i1 <%ID>, i64 <%ID>, i64 <INT>                                                                           

<%ID> = add nsw i32 <%ID>, <%ID>                                                                                        
<%ID> = add nsw i64 <%ID>, <%ID>                                                                                        
<%ID> = sdiv i32 <%ID>, <%ID>                                                                                           
expected answer:
		<%ID> = sdiv i64 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = add nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = sdiv i32 <%ID>, <%ID>                                                                                           
		<%ID> = icmp slt i64 <%ID>, <INT>                                                                                       
		<%ID> = sub nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = bitcast { { { float*, i64 } } }** <%ID> to { { float*, i64 } }**                                                

<%ID> = add nuw nsw i32 <%ID>, <%ID>                                                                                    
<%ID> = add nuw nsw i64 <%ID>, <%ID>                                                                                    
<%ID> = sdiv i32 <%ID>, <%ID>                                                                                           
expected answer:
		<%ID> = sdiv i64 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = add nuw nsw i64 <%ID>, <%ID>                                                                                    
		<%ID> = sdiv i32 <%ID>, <%ID>                                                                                           
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([152 x i8], [152 x i8]* <@ID>, i64 <INT>, i64 <INT>))
		<%ID> = mul nuw nsw i64 <%ID>, <INT>                                                                                    
		<%ID> = getelementptr inbounds { i32, i32, i32, i32, { i32 (...)** }*, i32, { { i32 (...)** }*, { i32 (...)** }*, i32, i32, i8*, i8*, i64, i32, i8*, i8*, i32, i32, opaque* }*, i64, { i32* }, { i64*, [2 x i64] } }, { i32, i32, i32, i32, { i32 (...)** }*, i32, { { i32 (...)** }*, { i32 (...)** }*, i32, i32, i8*, i8*, i64, i32, i8*, i8*, i32, i32, opaque* }*, i64, { i32* }, { i64*, [2 x i64] } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>

<%ID> = add i32 <%ID>, <%ID>                                                                                            
<%ID> = add i64 <%ID>, <%ID>                                                                                            
<%ID> = urem i32 <%ID>, <%ID>                                                                                           
expected answer:
		<%ID> = urem i64 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = add i64 <%ID>, <%ID>                                                                                            
		<%ID> = urem i32 <%ID>, <%ID>                                                                                           
		<%ID> = mul i64 <%ID>, <INT>                                                                                            
		<%ID> = icmp eq i32 <%ID>, <INT>                                                                                        
		<%ID> = add i64 <%ID>, <INT>                                                                                            

<%ID> = add nsw i32 <%ID>, <%ID>                                                                                        
<%ID> = add nsw i64 <%ID>, <%ID>                                                                                        
<%ID> = urem i32 <%ID>, <%ID>                                                                                           
expected answer:
		<%ID> = urem i64 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = add nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = urem i32 <%ID>, <%ID>                                                                                           
		<%ID> = sub nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = icmp slt i64 <%ID>, <INT>                                                                                       
		<%ID> = add i64 <%ID>, <INT>                                                                                            

<%ID> = add nuw nsw i32 <%ID>, <%ID>                                                                                    
<%ID> = add nuw nsw i64 <%ID>, <%ID>                                                                                    
<%ID> = urem i32 <%ID>, <%ID>                                                                                           
expected answer:
		<%ID> = urem i64 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = add nuw nsw i64 <%ID>, <%ID>                                                                                    
		<%ID> = urem i32 <%ID>, <%ID>                                                                                           
		define linkonce_odr i64 <@ID>({ i8 }*)                                                                                  
		<%ID> = load i32*, i32** <%ID>, align 8                                                                                 
		store opaque* null, opaque** <%ID>, align 8                                                                             

<%ID> = add i32 <%ID>, <%ID>                                                                                            
<%ID> = add i64 <%ID>, <%ID>                                                                                            
<%ID> = srem i32 <%ID>, <%ID>                                                                                           
expected answer:
		<%ID> = srem i64 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = add i64 <%ID>, <%ID>                                                                                            
		<%ID> = srem i32 <%ID>, <%ID>                                                                                           
		<%ID> = icmp ugt i64 <%ID>, <INT>                                                                                       
		<%ID> = select i1 <%ID>, i64 <%ID>, i64 <INT>                                                                           
		<%ID> = add i64 <%ID>, <INT>                                                                                            

<%ID> = add nsw i32 <%ID>, <%ID>                                                                                        
<%ID> = add nsw i64 <%ID>, <%ID>                                                                                        
<%ID> = srem i32 <%ID>, <%ID>                                                                                           
expected answer:
		<%ID> = srem i64 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = add nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = icmp slt i64 <%ID>, <INT>                                                                                       
		<%ID> = srem i32 <%ID>, <%ID>                                                                                           
		<%ID> = sub nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = add i64 <%ID>, <INT>                                                                                            

<%ID> = add nuw nsw i32 <%ID>, <%ID>                                                                                    
<%ID> = add nuw nsw i64 <%ID>, <%ID>                                                                                    
<%ID> = srem i32 <%ID>, <%ID>                                                                                           
expected answer:
		<%ID> = srem i64 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = add nuw nsw i64 <%ID>, <%ID>                                                                                    
		<%ID> = srem i32 <%ID>, <%ID>                                                                                           
		<%ID> = phi { { i64, [56 x i8] } }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                  
		<@ID> = private unnamed_addr constant [30 x i8]  <STRING>, align 1                                                      
		<%ID> = mul nuw nsw i64 <%ID>, <INT>                                                                                    

<%ID> = sub i8 <%ID>, <%ID>                                                                                             
<%ID> = sub i32 <%ID>, <%ID>                                                                                            
<%ID> = mul i8 <%ID>, <%ID>                                                                                             
expected answer:
		<%ID> = mul i32 <%ID>, <%ID>                                                                                            
Nearest neighbors:
		<%ID> = sub i32 <%ID>, <%ID>                                                                                            
		<%ID> = mul i8 <%ID>, <%ID>                                                                                             
		<%ID> = add i32 <%ID>, <%ID>                                                                                            
		<%ID> = trunc i64 <%ID> to i32                                                                                          
		<%ID> = sub nsw i32 <%ID>, <%ID>                                                                                        

<%ID> = sub i8 <%ID>, <%ID>                                                                                             
<%ID> = sub i64 <%ID>, <%ID>                                                                                            
<%ID> = mul i8 <%ID>, <%ID>                                                                                             
expected answer:
		<%ID> = mul i64 <%ID>, <%ID>                                                                                            
Nearest neighbors:
		<%ID> = sub i64 <%ID>, <%ID>                                                                                            
		<%ID> = mul i8 <%ID>, <%ID>                                                                                             
		<%ID> = lshr i64 <%ID>, <INT>                                                                                           
		<%ID> = icmp ult i64 <%ID>, <INT>                                                                                       
		<%ID> = icmp sgt i64 <%ID>, <%ID>                                                                                       

<%ID> = sub i8 <%ID>, <%ID>                                                                                             
<%ID> = sub <32 x i8> <%ID>, <%ID>                                                                                      
<%ID> = mul i8 <%ID>, <%ID>                                                                                             
expected answer:
		<%ID> = mul <32 x i8> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = sub <32 x i8> <%ID>, <%ID>                                                                                      
		<%ID> = mul i8 <%ID>, <%ID>                                                                                             
		<%ID> = bitcast { { { { i32 (...)** }* } } }* <%ID> to i64*                                                             
		<%ID> = add <32 x i8> <%ID>, <%ID>                                                                                      
		<%ID> = load <{ { { { { { { i64, i64, i8* } } } } } }, i32, [4 x i8] }>*, <{ { { { { { { i64, i64, i8* } } } } } }, i32, [4 x i8] }>** <%ID>, align 8

<%ID> = sub i8 <%ID>, <%ID>                                                                                             
<%ID> = sub <8 x i16> <%ID>, <%ID>                                                                                      
<%ID> = mul i8 <%ID>, <%ID>                                                                                             
expected answer:
		<%ID> = mul <8 x i16> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = sub <8 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = mul i8 <%ID>, <%ID>                                                                                             
		<%ID> = select <8 x i1> <%ID>, <8 x i16> <%ID>, <8 x i16> <%ID>                                                         
		<%ID> = bitcast <8 x i16> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            

<%ID> = sub i8 <%ID>, <%ID>                                                                                             
<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
<%ID> = mul i8 <%ID>, <%ID>                                                                                             
expected answer:
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = mul i8 <%ID>, <%ID>                                                                                             
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to i64*                                                               
		<%ID> = bitcast { { { i32*, i64, i64 } } }** <%ID> to { { i32*, i64, i64 } }**                                          

<%ID> = sub i32 <%ID>, <%ID>                                                                                            
<%ID> = sub i64 <%ID>, <%ID>                                                                                            
<%ID> = mul i32 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul i64 <%ID>, <%ID>                                                                                            
Nearest neighbors:
		<%ID> = sub i64 <%ID>, <%ID>                                                                                            
		<%ID> = mul i32 <%ID>, <%ID>                                                                                            
		<%ID> = add i64 <%ID>, <INT>                                                                                            
		<%ID> = extractvalue { i32, i32, i32, i32 } <%ID>, 3                                                                    
		<%ID> = extractvalue { i32, i32, i32, i32 } <%ID>, 2                                                                    

<%ID> = sub i32 <%ID>, <%ID>                                                                                            
<%ID> = sub i64 <%ID>, <%ID>                                                                                            
<%ID> = mul nsw i32 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = mul nsw i64 <%ID>, <%ID>                                                                                        
Nearest neighbors:
		<%ID> = sub i64 <%ID>, <%ID>                                                                                            
		<%ID> = mul nsw i32 <%ID>, <%ID>                                                                                        
		<%ID> = and i1 <%ID>, <%ID>                                                                                             
		<%ID> = add i64 <%ID>, <INT>                                                                                            
		<@ID> = private unnamed_addr constant [12 x i8]  <STRING>, align 1                                                      

<%ID> = sub i32 <%ID>, <%ID>                                                                                            
<%ID> = sub i64 <%ID>, <%ID>                                                                                            
<%ID> = mul nuw nsw i32 <%ID>, <%ID>                                                                                    
expected answer:
		<%ID> = mul nuw nsw i64 <%ID>, <%ID>                                                                                    
Nearest neighbors:
		<%ID> = mul nuw nsw i32 <%ID>, <%ID>                                                                                    
		<%ID> = sub i64 <%ID>, <%ID>                                                                                            
		<%ID> = getelementptr inbounds { i32*, { { [3 x i64] } } }, { i32*, { { [3 x i64] } } }* <%ID>, i64 <INT>, i32 <INT>    
		<%ID> = add i64 <%ID>, <INT>                                                                                            
		<%ID> = tail call zeroext i1 <%ID>({ i32 (...)** }* <%ID>, { i8*, i8*, opaque*, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, opaque*, { i32 (...)** }* }* nonnull <%ID>)

<%ID> = sub nsw i32 <%ID>, <%ID>                                                                                        
<%ID> = sub nsw i64 <%ID>, <%ID>                                                                                        
<%ID> = mul i32 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul i64 <%ID>, <%ID>                                                                                            
Nearest neighbors:
		<%ID> = sub nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = mul i32 <%ID>, <%ID>                                                                                            
		<%ID> = mul nsw i64 <%ID>, <INT>                                                                                        
		<%ID> = icmp sgt i64 <%ID>, <INT>                                                                                       
		switch i32 <%ID>, label <%ID> [
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>]                

<%ID> = sub nsw i32 <%ID>, <%ID>                                                                                        
<%ID> = sub nsw i64 <%ID>, <%ID>                                                                                        
<%ID> = mul nuw nsw i32 <%ID>, <%ID>                                                                                    
expected answer:
		<%ID> = mul nuw nsw i64 <%ID>, <%ID>                                                                                    
Nearest neighbors:
		<%ID> = mul nuw nsw i32 <%ID>, <%ID>                                                                                    
		<%ID> = sub nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = icmp ult i8 <%ID>, <%ID>                                                                                        
		<%ID> = icmp ugt i8 <%ID>, <%ID>                                                                                        
		<%ID> = lshr i16 <%ID>, <INT>                                                                                           

<%ID> = sub i32 <%ID>, <%ID>                                                                                            
<%ID> = sub <32 x i8> <%ID>, <%ID>                                                                                      
<%ID> = mul i32 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul <32 x i8> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = sub <32 x i8> <%ID>, <%ID>                                                                                      
		<%ID> = mul i32 <%ID>, <%ID>                                                                                            
		<%ID> = extractvalue { i32, i32, i32, i32 } <%ID>, 1                                                                    
		<%ID> = extractvalue { i32, i32, i32, i32 } <%ID>, 3                                                                    
		<%ID> = add <32 x i8> <%ID>, <%ID>                                                                                      

<%ID> = sub i32 <%ID>, <%ID>                                                                                            
<%ID> = sub <8 x i16> <%ID>, <%ID>                                                                                      
<%ID> = mul i32 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul <8 x i16> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = sub <8 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = mul i32 <%ID>, <%ID>                                                                                            
		<%ID> = bitcast <2 x i64> <%ID> to <8 x i16>                                                                            
		<%ID> = extractvalue { i32, i32, i32, i32 } <%ID>, 1                                                                    
		switch i32 <%ID>, label <%ID> [
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>]                

<%ID> = sub i32 <%ID>, <%ID>                                                                                            
<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
<%ID> = mul i32 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = mul i32 <%ID>, <%ID>                                                                                            
		<%ID> = extractvalue { i32, i32, i32, i32 } <%ID>, 2                                                                    
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ null, <%ID> ], [ null, <%ID> ]                                                     
		<%ID> = extractvalue { i32, i32, i32, i32 } <%ID>, 1                                                                    

<%ID> = sub i32 <%ID>, <%ID>                                                                                            
<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
<%ID> = mul nsw i32 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = mul nsw <4 x i32> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = mul nsw i32 <%ID>, <%ID>                                                                                        
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ null, <%ID> ], [ null, <%ID> ]                                                     

<%ID> = sub nsw i32 <%ID>, <%ID>                                                                                        
<%ID> = sub nsw <4 x i32> <%ID>, <%ID>                                                                                  
<%ID> = mul i32 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = sub nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = mul i32 <%ID>, <%ID>                                                                                            
		<%ID> = extractvalue { i32, i32, i32, i32 } <%ID>, 3                                                                    
		<%ID> = tail call { i32, i32, i32, i32 } asm sideeffect "cpuid", "={ax},={bx},={cx},={dx},0,2,~{dirflag},~{fpsr},~{flags}"(i32 <INT>, i32 <INT>)
		<%ID> = extractvalue { i32, i32, i32, i32 } <%ID>, 2                                                                    

<%ID> = sub nsw i32 <%ID>, <%ID>                                                                                        
<%ID> = sub nsw <8 x i32> <%ID>, <%ID>                                                                                  
<%ID> = mul i32 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul <8 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = sub nsw <8 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = mul i32 <%ID>, <%ID>                                                                                            
		<%ID> = load <8 x i32>, <8 x i32>* <%ID>, align 4                                                                       
		<%ID> = tail call { i32, i32, i32, i32 } asm sideeffect "cpuid", "={ax},={bx},={cx},={dx},0,2,~{dirflag},~{fpsr},~{flags}"(i32 <INT>, i32 <INT>)
		<%ID> = extractvalue { i32, i32, i32, i32 } <%ID>, 2                                                                    

<%ID> = sub i32 <%ID>, <%ID>                                                                                            
<%ID> = sub <4 x i64> <%ID>, <%ID>                                                                                      
<%ID> = mul i32 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = sub <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = mul i32 <%ID>, <%ID>                                                                                            
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  

<%ID> = sub nsw i32 <%ID>, <%ID>                                                                                        
<%ID> = sub nsw <4 x i64> <%ID>, <%ID>                                                                                  
<%ID> = mul i32 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = sub nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = mul i32 <%ID>, <%ID>                                                                                            
		<%ID> = lshr <4 x i64> <%ID>, <%ID>                                                                                     
		<%ID> = bitcast double* <%ID> to <4 x i64>*                                                                             
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([202 x i8], [202 x i8]* <@ID>, i64 <INT>, i64 <INT>))

<%ID> = sub i64 <%ID>, <%ID>                                                                                            
<%ID> = sub <32 x i8> <%ID>, <%ID>                                                                                      
<%ID> = mul i64 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul <32 x i8> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = sub <32 x i8> <%ID>, <%ID>                                                                                      
		<%ID> = mul i64 <%ID>, <%ID>                                                                                            
		call void <@ID>({ { { { { { i64, i64, i8* } } } } } }* nonnull <%ID>, { { { { { { i64, i64, i8* } } } } } }* dereferenceable(24) <%ID>)
		<%ID> = getelementptr inbounds <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>, <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = add <32 x i8> <%ID>, <%ID>                                                                                      

<%ID> = sub i64 <%ID>, <%ID>                                                                                            
<%ID> = sub <8 x i16> <%ID>, <%ID>                                                                                      
<%ID> = mul i64 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul <8 x i16> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = sub <8 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = mul i64 <%ID>, <%ID>                                                                                            
		<%ID> = select <8 x i1> <%ID>, <8 x i16> <%ID>, <8 x i16> <%ID>                                                         
		<%ID> = tail call <16 x i8> <@ID>(<8 x i16> <%ID>, <8 x i16> <%ID>)                                                     
		<%ID> = bitcast <8 x i16> <%ID> to <4 x i32>                                                                            

<%ID> = sub i64 <%ID>, <%ID>                                                                                            
<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
<%ID> = mul i64 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = mul i64 <%ID>, <%ID>                                                                                            
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ null, <%ID> ], [ null, <%ID> ]                                                     
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       

<%ID> = sub i64 <%ID>, <%ID>                                                                                            
<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
<%ID> = mul nsw i64 <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = mul nsw <4 x i32> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = mul nsw i64 <%ID>, <%ID>                                                                                        
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ null, <%ID> ], [ null, <%ID> ]                                                     

<%ID> = sub nsw i64 <%ID>, <%ID>                                                                                        
<%ID> = sub nsw <4 x i32> <%ID>, <%ID>                                                                                  
<%ID> = mul i64 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = sub nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = mul i64 <%ID>, <%ID>                                                                                            
		<%ID> = add nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = load <4 x i32>, <4 x i32>* <%ID>, align 4                                                                       

<%ID> = sub nsw i64 <%ID>, <%ID>                                                                                        
<%ID> = sub nsw <8 x i32> <%ID>, <%ID>                                                                                  
<%ID> = mul i64 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul <8 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = sub nsw <8 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = mul i64 <%ID>, <%ID>                                                                                            
		<%ID> = mul nsw <8 x i32> <%ID>, <%ID>                                                                                  
		store <8 x i32> <%ID>, <8 x i32>* <%ID>, align 4                                                                        
		<%ID> = load <8 x i32>, <8 x i32>* <%ID>, align 4                                                                       

<%ID> = sub i64 <%ID>, <%ID>                                                                                            
<%ID> = sub <4 x i64> <%ID>, <%ID>                                                                                      
<%ID> = mul i64 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = sub <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = mul i64 <%ID>, <%ID>                                                                                            
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  

<%ID> = sub nsw i64 <%ID>, <%ID>                                                                                        
<%ID> = sub nsw <4 x i64> <%ID>, <%ID>                                                                                  
<%ID> = mul i64 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = sub nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = mul i64 <%ID>, <%ID>                                                                                            
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = lshr i64 <INT>, <%ID>                                                                                           
		<%ID> = bitcast double* <%ID> to <4 x i64>*                                                                             

<%ID> = sub <32 x i8> <%ID>, <%ID>                                                                                      
<%ID> = sub <8 x i16> <%ID>, <%ID>                                                                                      
<%ID> = mul <32 x i8> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = mul <8 x i16> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = sub <8 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = mul <32 x i8> <%ID>, <%ID>                                                                                      
		<%ID> = getelementptr inbounds { i32 }, { i32 }* <%ID>, i64 <%ID>, i32 <INT>                                            
		<%ID> = phi i64 [ <%ID>, <%ID> ]                                                                                        
		<%ID> = add i32 <%ID>, <%ID>                                                                                            

<%ID> = sub <32 x i8> <%ID>, <%ID>                                                                                      
<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
<%ID> = mul <32 x i8> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = mul <32 x i8> <%ID>, <%ID>                                                                                      
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = load <4 x i32>, <4 x i32>* <%ID>, align 4                                                                       
		<%ID> = add nsw <4 x i32> <%ID>, <%ID>                                                                                  

<%ID> = sub <32 x i8> <%ID>, <%ID>                                                                                      
<%ID> = sub <4 x i64> <%ID>, <%ID>                                                                                      
<%ID> = mul <32 x i8> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = sub <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = mul <32 x i8> <%ID>, <%ID>                                                                                      
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 0                                                                         
		<%ID> = extractelement <4 x i64> <%ID>, <TYP> 1                                                                         

<%ID> = sub <8 x i16> <%ID>, <%ID>                                                                                      
<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
<%ID> = mul <8 x i16> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = mul <8 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ null, <%ID> ], [ null, <%ID> ]                                                     
		<%ID> = bitcast i32* <%ID> to <4 x i32>*                                                                                
		<%ID> = load i32, i32* <%ID>, align 8                                                                                   

<%ID> = sub nsw <4 x i32> <%ID>, <%ID>                                                                                  
<%ID> = sub nsw <8 x i32> <%ID>, <%ID>                                                                                  
<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = mul <8 x i32> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = sub nsw <8 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw <8 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = add nsw <8 x i32> <%ID>, <%ID>                                                                                  
		store <8 x i32> <%ID>, <8 x i32>* <%ID>, align 4                                                                        

<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
<%ID> = sub <4 x i64> <%ID>, <%ID>                                                                                      
<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = sub <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      

<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
<%ID> = sub <4 x i64> <%ID>, <%ID>                                                                                      
<%ID> = mul nsw <4 x i32> <%ID>, <%ID>                                                                                  
expected answer:
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = sub <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = mul nsw <4 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = add nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = select <4 x i1> <%ID>, <4 x i64> <%ID>, <4 x i64> <%ID>                                                         

<%ID> = sub nsw <4 x i32> <%ID>, <%ID>                                                                                  
<%ID> = sub nsw <4 x i64> <%ID>, <%ID>                                                                                  
<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = sub nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = mul nsw <4 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = lshr <4 x i64> <%ID>, <%ID>                                                                                     
		<%ID> = insertelement <16 x i16> undef, <TYP> <%ID>, <TYP> 0                                                            

<%ID> = sub i32 <%ID>, <%ID>                                                                                            
<%ID> = sub i64 <%ID>, <%ID>                                                                                            
<%ID> = udiv i32 <%ID>, <%ID>                                                                                           
expected answer:
		<%ID> = udiv i64 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = sub i64 <%ID>, <%ID>                                                                                            
		<%ID> = udiv i32 <%ID>, <%ID>                                                                                           
		<%ID> = add i64 <%ID>, <INT>                                                                                            
		<%ID> = phi i64 [ 0, <%ID> ], [ <%ID>, <%ID> ]                                                                          
		<%ID> = call { i32*, i64 } <@ID>({ { { { { { { { i64*, [40 x i8] } }* }*, [8 x i8] }, i64 } } }, { <{ i32 (...)**, { { { i32 } } } }>, [4 x i8] }* }* <%ID>, i64* nonnull <%ID>, i64 <INT>)

<%ID> = sub nsw i32 <%ID>, <%ID>                                                                                        
<%ID> = sub nsw i64 <%ID>, <%ID>                                                                                        
<%ID> = udiv i32 <%ID>, <%ID>                                                                                           
expected answer:
		<%ID> = udiv i64 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = sub nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = udiv i32 <%ID>, <%ID>                                                                                           
		<%ID> = icmp sgt i64 <%ID>, <%ID>                                                                                       
		<%ID> = icmp eq i16 <%ID>, <%ID>                                                                                        
		<%ID> = icmp slt i64 <%ID>, <INT>                                                                                       

<%ID> = sub i32 <%ID>, <%ID>                                                                                            
<%ID> = sub i64 <%ID>, <%ID>                                                                                            
<%ID> = sdiv i32 <%ID>, <%ID>                                                                                           
expected answer:
		<%ID> = sdiv i64 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = sub i64 <%ID>, <%ID>                                                                                            
		<%ID> = sdiv i32 <%ID>, <%ID>                                                                                           
		<%ID> = add i64 <%ID>, <INT>                                                                                            
		<%ID> = ptrtoint i8* <%ID> to i64                                                                                       
		<%ID> = lshr i64 <%ID>, <INT>                                                                                           

<%ID> = sub nsw i32 <%ID>, <%ID>                                                                                        
<%ID> = sub nsw i64 <%ID>, <%ID>                                                                                        
<%ID> = sdiv i32 <%ID>, <%ID>                                                                                           
expected answer:
		<%ID> = sdiv i64 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = sub nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = sdiv i32 <%ID>, <%ID>                                                                                           
		<%ID> = mul nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = icmp slt i64 <%ID>, <INT>                                                                                       
		<%ID> = icmp sgt i64 <%ID>, <%ID>                                                                                       

<%ID> = sub i32 <%ID>, <%ID>                                                                                            
<%ID> = sub i64 <%ID>, <%ID>                                                                                            
<%ID> = urem i32 <%ID>, <%ID>                                                                                           
expected answer:
		<%ID> = urem i64 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = sub i64 <%ID>, <%ID>                                                                                            
		<%ID> = urem i32 <%ID>, <%ID>                                                                                           
		<%ID> = add i64 <%ID>, <INT>                                                                                            
		<%ID> = alloca { i8 }*, align 8                                                                                         
		<%ID> = load { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x i64] }*, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x i64] }** <%ID>, align 8

<%ID> = sub nsw i32 <%ID>, <%ID>                                                                                        
<%ID> = sub nsw i64 <%ID>, <%ID>                                                                                        
<%ID> = urem i32 <%ID>, <%ID>                                                                                           
expected answer:
		<%ID> = urem i64 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = sub nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = urem i32 <%ID>, <%ID>                                                                                           
		<%ID> = call i64 <@ID>({ { { { { { i64*, [40 x i8] } }* }*, [8 x i8] }, i64 } }* nonnull <%ID>, i32 <INT>)              
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
		<%ID> = icmp sgt i64 <%ID>, <%ID>                                                                                       

<%ID> = sub i32 <%ID>, <%ID>                                                                                            
<%ID> = sub i64 <%ID>, <%ID>                                                                                            
<%ID> = srem i32 <%ID>, <%ID>                                                                                           
expected answer:
		<%ID> = srem i64 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = sub i64 <%ID>, <%ID>                                                                                            
		<%ID> = srem i32 <%ID>, <%ID>                                                                                           
		<%ID> = add i64 <%ID>, <INT>                                                                                            
		<@ID> = private unnamed_addr constant [30 x i8]  <STRING>, align 1                                                      
		<%ID> = lshr i64 <%ID>, <INT>                                                                                           

<%ID> = sub nsw i32 <%ID>, <%ID>                                                                                        
<%ID> = sub nsw i64 <%ID>, <%ID>                                                                                        
<%ID> = srem i32 <%ID>, <%ID>                                                                                           
expected answer:
		<%ID> = srem i64 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = sub nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = srem i32 <%ID>, <%ID>                                                                                           
		<%ID> = icmp sgt i64 <%ID>, <%ID>                                                                                       
		<%ID> = icmp slt i64 <%ID>, <INT>                                                                                       
		<%ID> = icmp ugt i64 <%ID>, <INT>                                                                                       

<%ID> = mul i32 <%ID>, <%ID>                                                                                            
<%ID> = mul i64 <%ID>, <%ID>                                                                                            
<%ID> = udiv i32 <%ID>, <%ID>                                                                                           
expected answer:
		<%ID> = udiv i64 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = mul i64 <%ID>, <%ID>                                                                                            
		<%ID> = udiv i32 <%ID>, <%ID>                                                                                           
		<%ID> = phi i32 [ 2, <%ID> ], [ <%ID>, <%ID> ]                                                                          
		<%ID> = select i1 <%ID>, i64 <%ID>, i64 <%ID>                                                                           
		<%ID> = icmp sle i32 <%ID>, <%ID>                                                                                       

<%ID> = mul nsw i32 <%ID>, <%ID>                                                                                        
<%ID> = mul nsw i64 <%ID>, <%ID>                                                                                        
<%ID> = udiv i32 <%ID>, <%ID>                                                                                           
expected answer:
		<%ID> = udiv i64 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = mul nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = udiv i32 <%ID>, <%ID>                                                                                           
		<%ID> = load i8*, i8** <%ID>, align 8                                                                                   
		<%ID> = lshr i64 <%ID>, <INT>                                                                                           
		<%ID> = phi i32 [ 2, <%ID> ], [ <%ID>, <%ID> ]                                                                          

<%ID> = mul nuw nsw i32 <%ID>, <%ID>                                                                                    
<%ID> = mul nuw nsw i64 <%ID>, <%ID>                                                                                    
<%ID> = udiv i32 <%ID>, <%ID>                                                                                           
expected answer:
		<%ID> = udiv i64 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = mul nuw nsw i64 <%ID>, <%ID>                                                                                    
		<%ID> = udiv i32 <%ID>, <%ID>                                                                                           
		<%ID> = phi i1 [ true, <%ID> ], [ false, <%ID> ]                                                                        
		<%ID> = icmp slt i64 <%ID>, <%ID>                                                                                       
		<%ID> = trunc i32 <%ID> to i16                                                                                          

<%ID> = mul nsw i32 <%ID>, <%ID>                                                                                        
<%ID> = mul nsw i128 <%ID>, <%ID>                                                                                       
<%ID> = udiv i32 <%ID>, <%ID>                                                                                           
expected answer:
		<%ID> = udiv i128 <%ID>, <%ID>                                                                                          
Nearest neighbors:
		<%ID> = mul nsw i128 <%ID>, <%ID>                                                                                       
		<%ID> = udiv i32 <%ID>, <%ID>                                                                                           
		<%ID> = sext i64 <%ID> to i128                                                                                          
		<%ID> = lshr i64 <%ID>, <%ID>                                                                                           
		<%ID> = getelementptr inbounds { { { { [8 x i64] }, { [8 x { i64, i32, i32 }] }, { [8 x i64] }, { { i8 }*, { { [8 x i64] } }, { i8 }*, { { i8 }*, { { [8 x i64] } } }* }, { i8 }*, { { [8 x i64] } }, { { [8 x i64] } } } }, { { { [8 x i64] }, { [8 x { i64, i32, i32 }] }, { [8 x i64] }, { { i8 }*, { { [8 x i64] } }, { i8 }*, { { i8 }*, { { [8 x i64] } } }* }, { i8 }*, { { [8 x i64] } }, { { [8 x i64] } } } } }, { { { { [8 x i64] }, { [8 x { i64, i32, i32 }] }, { [8 x i64] }, { { i8 }*, { { [8 x i64] } }, { i8 }*, { { i8 }*, { { [8 x i64] } } }* }, { i8 }*, { { [8 x i64] } }, { { [8 x i64] } } } }, { { { [8 x i64] }, { [8 x { i64, i32, i32 }] }, { [8 x i64] }, { { i8 }*, { { [8 x i64] } }, { i8 }*, { { i8 }*, { { [8 x i64] } } }* }, { i8 }*, { { [8 x i64] } }, { { [8 x i64] } } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i64 <INT>, i32 <INT>

<%ID> = mul nsw i64 <%ID>, <%ID>                                                                                        
<%ID> = mul nsw i128 <%ID>, <%ID>                                                                                       
<%ID> = udiv i64 <%ID>, <%ID>                                                                                           
expected answer:
		<%ID> = udiv i128 <%ID>, <%ID>                                                                                          
Nearest neighbors:
		<%ID> = mul nsw i128 <%ID>, <%ID>                                                                                       
		<%ID> = udiv i64 <%ID>, <%ID>                                                                                           
		<%ID> = sext i64 <%ID> to i128                                                                                          
		<%ID> = zext i64 <%ID> to i128                                                                                          
		<%ID> = lshr i64 <%ID>, <%ID>                                                                                           

<%ID> = mul i32 <%ID>, <%ID>                                                                                            
<%ID> = mul i64 <%ID>, <%ID>                                                                                            
<%ID> = sdiv i32 <%ID>, <%ID>                                                                                           
expected answer:
		<%ID> = sdiv i64 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = sdiv i32 <%ID>, <%ID>                                                                                           
		<%ID> = mul i64 <%ID>, <%ID>                                                                                            
		<%ID> = select i1 <%ID>, i64 <%ID>, i64 <%ID>                                                                           
		<%ID> = phi i32 [ 2, <%ID> ], [ <%ID>, <%ID> ]                                                                          
		<%ID> = shl i64 <%ID>, <%ID>                                                                                            

<%ID> = mul nsw i32 <%ID>, <%ID>                                                                                        
<%ID> = mul nsw i64 <%ID>, <%ID>                                                                                        
<%ID> = sdiv i32 <%ID>, <%ID>                                                                                           
expected answer:
		<%ID> = sdiv i64 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = sdiv i32 <%ID>, <%ID>                                                                                           
		<%ID> = mul nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = phi i64 [ 0, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                      
		<%ID> = load i8*, i8** <%ID>, align 8                                                                                   
		<%ID> = shl nuw nsw i64 <%ID>, <INT>                                                                                    

<%ID> = mul nuw nsw i32 <%ID>, <%ID>                                                                                    
<%ID> = mul nuw nsw i64 <%ID>, <%ID>                                                                                    
<%ID> = sdiv i32 <%ID>, <%ID>                                                                                           
expected answer:
		<%ID> = sdiv i64 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = sdiv i32 <%ID>, <%ID>                                                                                           
		<%ID> = mul nuw nsw i64 <%ID>, <%ID>                                                                                    
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                   
		<%ID> = sub i32 <%ID>, <%ID>                                                                                            
		<%ID> = trunc i64 <%ID> to i32                                                                                          

<%ID> = mul i32 <%ID>, <%ID>                                                                                            
<%ID> = mul i64 <%ID>, <%ID>                                                                                            
<%ID> = urem i32 <%ID>, <%ID>                                                                                           
expected answer:
		<%ID> = urem i64 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = urem i32 <%ID>, <%ID>                                                                                           
		<%ID> = mul i64 <%ID>, <%ID>                                                                                            
		<%ID> = getelementptr inbounds { i8, i8, i8, i8 }, { i8, i8, i8, i8 }* <%ID>, i64 <INT>, i32 <INT>                      
		<%ID> = phi i32 [ 2, <%ID> ], [ <%ID>, <%ID> ]                                                                          
		store volatile i32 <%ID>, i32* <%ID>, align 4                                                                           

<%ID> = mul nsw i32 <%ID>, <%ID>                                                                                        
<%ID> = mul nsw i64 <%ID>, <%ID>                                                                                        
<%ID> = urem i32 <%ID>, <%ID>                                                                                           
expected answer:
		<%ID> = urem i64 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = urem i32 <%ID>, <%ID>                                                                                           
		<%ID> = mul nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = phi i32 [ 1, <%ID> ], [ 0, <%ID> ]                                                                              
		<%ID> = load i8*, i8** <%ID>, align 8                                                                                   
		<%ID> = phi i32 [ 0, <%ID> ], [ <%ID>, <%ID> ], [ 0, <%ID> ]                                                            

<%ID> = mul nuw nsw i32 <%ID>, <%ID>                                                                                    
<%ID> = mul nuw nsw i64 <%ID>, <%ID>                                                                                    
<%ID> = urem i32 <%ID>, <%ID>                                                                                           
expected answer:
		<%ID> = urem i64 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = mul nuw nsw i64 <%ID>, <%ID>                                                                                    
		<%ID> = urem i32 <%ID>, <%ID>                                                                                           
		<%ID> = call i8* <@ID>(i8* <%ID>, i8* <%ID>, i64 <%ID>, i64 <%ID>)                                                      
		<%ID> = trunc i64 <%ID> to i32                                                                                          
		<%ID> = shl i32 <INT>, <%ID>                                                                                            

<%ID> = mul i32 <%ID>, <%ID>                                                                                            
<%ID> = mul i64 <%ID>, <%ID>                                                                                            
<%ID> = srem i32 <%ID>, <%ID>                                                                                           
expected answer:
		<%ID> = srem i64 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = srem i32 <%ID>, <%ID>                                                                                           
		<%ID> = mul i64 <%ID>, <%ID>                                                                                            
		<%ID> = phi i32 [ 2, <%ID> ], [ <%ID>, <%ID> ]                                                                          
		<%ID> = select i1 <%ID>, i64 <%ID>, i64 <%ID>                                                                           
		store volatile i32 <%ID>, i32* <%ID>, align 4                                                                           

<%ID> = mul nsw i32 <%ID>, <%ID>                                                                                        
<%ID> = mul nsw i64 <%ID>, <%ID>                                                                                        
<%ID> = srem i32 <%ID>, <%ID>                                                                                           
expected answer:
		<%ID> = srem i64 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = mul nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = srem i32 <%ID>, <%ID>                                                                                           
		<%ID> = load i8*, i8** <%ID>, align 8                                                                                   
		<%ID> = lshr i64 <%ID>, <INT>                                                                                           
		<%ID> = icmp ugt i64 <%ID>, <INT>                                                                                       

<%ID> = mul nuw nsw i32 <%ID>, <%ID>                                                                                    
<%ID> = mul nuw nsw i64 <%ID>, <%ID>                                                                                    
<%ID> = srem i32 <%ID>, <%ID>                                                                                           
expected answer:
		<%ID> = srem i64 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = mul nuw nsw i64 <%ID>, <%ID>                                                                                    
		<%ID> = srem i32 <%ID>, <%ID>                                                                                           
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                   
		<%ID> = icmp ugt i32 <%ID>, <INT>                                                                                       
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                     

<%ID> = udiv i32 <%ID>, <%ID>                                                                                           
<%ID> = udiv i64 <%ID>, <%ID>                                                                                           
<%ID> = urem i32 <%ID>, <%ID>                                                                                           
expected answer:
		<%ID> = urem i64 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = udiv i64 <%ID>, <%ID>                                                                                           
		<%ID> = urem i32 <%ID>, <%ID>                                                                                           
		<%ID> = srem i64 <%ID>, <%ID>                                                                                           
		<%ID> = sub nsw i64 <%ID>, <%ID>                                                                                        
		<%ID> = srem i64 <%ID>, <INT>                                                                                           

<%ID> = udiv i32 <%ID>, <%ID>                                                                                           
<%ID> = udiv i64 <%ID>, <%ID>                                                                                           
<%ID> = srem i32 <%ID>, <%ID>                                                                                           
expected answer:
		<%ID> = srem i64 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = udiv i64 <%ID>, <%ID>                                                                                           
		<%ID> = srem i32 <%ID>, <%ID>                                                                                           
		<%ID> = sdiv i64 <%ID>, <%ID>                                                                                           
		<%ID> = phi i64 [ <%ID>, <%ID> ], [ 1572864, <%ID> ], [ <%ID>, <%ID> ]                                                  
		<%ID> = phi i64 [ 0, <%ID> ], [ 0, <%ID> ], [ <%ID>, <%ID> ]                                                            

<%ID> = sdiv i32 <%ID>, <%ID>                                                                                           
<%ID> = sdiv i64 <%ID>, <%ID>                                                                                           
<%ID> = urem i32 <%ID>, <%ID>                                                                                           
expected answer:
		<%ID> = urem i64 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = sdiv i64 <%ID>, <%ID>                                                                                           
		<%ID> = urem i32 <%ID>, <%ID>                                                                                           
		<%ID> = srem i64 <%ID>, <%ID>                                                                                           
		<%ID> = getelementptr inbounds { { { i32 (...)** }*, i8, i64, i64, i8*, i8* }, { { { i32, i16 }*, { i32, i16 }*, { { { i32, i16 }* } } } }, i16, i8, i8, { { i32*, i32*, { { i32* } } } }, i64, i8, i8, { { opaque*, { { opaque } }, { { i64, { { { i32 (...)** }*, i8, i64, i64, i8*, i8* }* } } } } }* }, { { { i32 (...)** }*, i8, i64, i64, i8*, i8* }, { { { i32, i16 }*, { i32, i16 }*, { { { i32, i16 }* } } } }, i16, i8, i8, { { i32*, i32*, { { i32* } } } }, i64, i8, i8, { { opaque*, { { opaque } }, { { i64, { { { i32 (...)** }*, i8, i64, i64, i8*, i8* }* } } } } }* }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		switch i16 <%ID>, label <%ID> [
 i16 <INT>, label <%ID>
 i16 <INT>, label <%ID>]                                        

<%ID> = urem i32 <%ID>, <%ID>                                                                                           
<%ID> = urem i64 <%ID>, <%ID>                                                                                           
<%ID> = srem i32 <%ID>, <%ID>                                                                                           
expected answer:
		<%ID> = srem i64 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = urem i64 <%ID>, <%ID>                                                                                           
		<%ID> = and i64 <%ID>, <%ID>                                                                                            
		<%ID> = load { opaque* }*, { opaque* }** <%ID>, align 8                                                                 
		<%ID> = getelementptr inbounds { opaque* }, { opaque* }* <%ID>, i64 <INT>                                               
		store { opaque* }* null, { opaque* }** <%ID>, align 8                                                                   
------------------------------------------------------------------------------------------------------------------------
Floating point binary operations (type semantic analogy): 6048
------------------------------------------------------------------------------------------------------------------------
--- Correct predictions:

<%ID> = fadd fast float <%ID>, <%ID>                                                                                    
<%ID> = fadd fast <2 x float> <%ID>, <%ID>                                                                              
<%ID> = fsub fast float <%ID>, <%ID>                                                                                    
expected answer:
		<%ID> = fsub fast <2 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fadd fast <2 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul fast <2 x float> <%ID>, <%ID>                                                                              
		<%ID> = shufflevector <2 x float> <%ID>, <2 x float> undef, <2 x i32> <i32 <INT>, i32 <INT>>                            
		<%ID> = fsub fast <2 x float> <%ID>, <%ID>                                                                              
		<%ID> = fsub fast float <%ID>, <%ID>                                                                                    

<%ID> = fadd float <%ID>, <%ID>                                                                                         
<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = fsub float <%ID>, <%ID>                                                                                         
expected answer:
		<%ID> = fsub <4 x float> <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fsub <4 x float> <%ID>, <%ID>                                                                                   
		store <4 x float> <%ID>, <4 x float>* <%ID>, align 16                                                                   

<%ID> = fadd fast float <%ID>, <%ID>                                                                                    
<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fsub fast float <%ID>, <%ID>                                                                                    
expected answer:
		<%ID> = fsub fast <4 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fsub fast float <%ID>, <%ID>                                                                                    
		<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fsub fast <4 x float> <%ID>, <%ID>                                                                              

<%ID> = fadd float <%ID>, <%ID>                                                                                         
<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = fsub float <%ID>, <%ID>                                                                                         
expected answer:
		<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = load <8 x float>, <8 x float>* <%ID>, align 16                                                                  
		<%ID> = fsub fast <8 x float> <%ID>, <%ID>                                                                              

<%ID> = fadd float <%ID>, <%ID>                                                                                         
<%ID> = fadd double <%ID>, <%ID>                                                                                        
<%ID> = fsub float <%ID>, <%ID>                                                                                         
expected answer:
		<%ID> = fsub double <%ID>, <%ID>                                                                                        
Nearest neighbors:
		<%ID> = fadd double <%ID>, <%ID>                                                                                        
		<%ID> = fsub double <%ID>, <%ID>                                                                                        
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
		<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         

<%ID> = fadd fast float <%ID>, <%ID>                                                                                    
<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
<%ID> = fsub fast float <%ID>, <%ID>                                                                                    
expected answer:
		<%ID> = fsub fast double <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
		<%ID> = fadd double <%ID>, <%ID>                                                                                        
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
		<%ID> = fsub fast double <%ID>, <%ID>                                                                                   
		<%ID> = fsub double <%ID>, <%ID>                                                                                        

<%ID> = fadd float <%ID>, <%ID>                                                                                         
<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
<%ID> = fsub float <%ID>, <%ID>                                                                                         
expected answer:
		<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             

<%ID> = fadd fast float <%ID>, <%ID>                                                                                    
<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fsub fast float <%ID>, <%ID>                                                                                    
expected answer:
		<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
		store <2 x double> <%ID>, <2 x double>* <%ID>, align 8                                                                  

<%ID> = fadd fast <2 x float> <%ID>, <%ID>                                                                              
<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fsub fast <2 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fsub fast <4 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fsub fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   

<%ID> = fadd <2 x float> <%ID>, <%ID>                                                                                   
<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = fsub <2 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fsub <2 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = load <8 x float>, <8 x float>* <%ID>, align 16                                                                  

<%ID> = fadd <2 x float> <%ID>, <%ID>                                                                                   
<%ID> = fadd double <%ID>, <%ID>                                                                                        
<%ID> = fsub <2 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fsub double <%ID>, <%ID>                                                                                        
Nearest neighbors:
		<%ID> = fadd double <%ID>, <%ID>                                                                                        
		<%ID> = fsub double <%ID>, <%ID>                                                                                        
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
		<%ID> = fsub <2 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fadd fast double <%ID>, <%ID>                                                                                   

<%ID> = fadd fast <2 x float> <%ID>, <%ID>                                                                              
<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fsub fast <2 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             

<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = fsub <4 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   
		store <8 x float> <%ID>, <8 x float>* <%ID>, align 16                                                                   
		<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fsub fast <8 x float> <%ID>, <%ID>                                                                              

<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = fadd double <%ID>, <%ID>                                                                                        
<%ID> = fsub <4 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fsub double <%ID>, <%ID>                                                                                        
Nearest neighbors:
		<%ID> = fadd double <%ID>, <%ID>                                                                                        
		<%ID> = fsub double <%ID>, <%ID>                                                                                        
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
		<%ID> = fadd fast double <%ID>, <%ID>                                                                                   

<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
<%ID> = fsub fast <4 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fsub fast double <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
		<%ID> = fadd double <%ID>, <%ID>                                                                                        
		<%ID> = fsub double <%ID>, <%ID>                                                                                        
		<%ID> = fsub fast double <%ID>, <%ID>                                                                                   

<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
<%ID> = fsub <4 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
		store <2 x double> <%ID>, <2 x double>* <%ID>, align 8                                                                  
		<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             

<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fsub fast <4 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([146 x i8], [146 x i8]* <@ID>, i64 <INT>, i64 <INT>))

<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = fadd double <%ID>, <%ID>                                                                                        
<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fsub double <%ID>, <%ID>                                                                                        
Nearest neighbors:
		<%ID> = fadd double <%ID>, <%ID>                                                                                        
		<%ID> = fsub double <%ID>, <%ID>                                                                                        
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         
		<%ID> = load <2 x double>, <2 x double>* <%ID>, align 8                                                                 

<%ID> = fadd fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
<%ID> = fsub fast <8 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fsub fast double <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
		<%ID> = fadd double <%ID>, <%ID>                                                                                        
		<%ID> = fsub fast double <%ID>, <%ID>                                                                                   
		<%ID> = fsub double <%ID>, <%ID>                                                                                        
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   

<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  
		store <2 x double> <%ID>, <2 x double>* <%ID>, align 8                                                                  
		<%ID> = load <2 x double>, <2 x double>* <%ID>, align 8                                                                 

<%ID> = fadd double <%ID>, <%ID>                                                                                        
<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
<%ID> = fsub double <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fsub double <%ID>, <%ID>                                                                                        
		<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             

<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fsub fast double <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fsub fast double <%ID>, <%ID>                                                                                   
		<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		store <2 x double> <%ID>, <2 x double>* <%ID>, align 8                                                                  

<%ID> = fadd double <%ID>, <%ID>                                                                                        
<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = fsub double <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fsub double <%ID>, <%ID>                                                                                        

<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fsub fast double <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fsub fast double <%ID>, <%ID>                                                                                   
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  

<%ID> = fadd float <%ID>, <%ID>                                                                                         
<%ID> = fadd <2 x float> <%ID>, <%ID>                                                                                   
<%ID> = fmul float <%ID>, <%ID>                                                                                         
expected answer:
		<%ID> = fmul <2 x float> <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fadd <2 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fmul float <%ID>, <%ID>                                                                                         
		<%ID> = fmul <2 x float> <%ID>, <%ID>                                                                                   
		<%ID> = tail call float <@ID>(float <%ID>)                                                                              
		<%ID> = phi <2 x float> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                              

<%ID> = fadd fast float <%ID>, <%ID>                                                                                    
<%ID> = fadd fast <2 x float> <%ID>, <%ID>                                                                              
<%ID> = fmul fast float <%ID>, <%ID>                                                                                    
expected answer:
		<%ID> = fmul fast <2 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fadd fast <2 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul fast float <%ID>, <%ID>                                                                                    
		<%ID> = fmul fast <2 x float> <%ID>, <%ID>                                                                              
		<%ID> = shufflevector <2 x float> <%ID>, <2 x float> undef, <2 x i32> <i32 <INT>, i32 <INT>>                            
		<%ID> = call <2 x float> <@ID>({ float, float }* dereferenceable(8) <%ID>, { float, float }* nonnull dereferenceable(8) <%ID>)

<%ID> = fadd float <%ID>, <%ID>                                                                                         
<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = fmul float <%ID>, <%ID>                                                                                         
expected answer:
		<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul float <%ID>, <%ID>                                                                                         

<%ID> = fadd fast float <%ID>, <%ID>                                                                                    
<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fmul fast float <%ID>, <%ID>                                                                                    
expected answer:
		<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul fast float <%ID>, <%ID>                                                                                    
		<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   

<%ID> = fadd float <%ID>, <%ID>                                                                                         
<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = fmul float <%ID>, <%ID>                                                                                         
expected answer:
		<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   
		store <8 x float> <%ID>, <8 x float>* <%ID>, align 16                                                                   
		<%ID> = load <8 x float>, <8 x float>* <%ID>, align 16                                                                  
		<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   

<%ID> = fadd fast float <%ID>, <%ID>                                                                                    
<%ID> = fadd fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fmul fast float <%ID>, <%ID>                                                                                    
expected answer:
		<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fadd fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul fast float <%ID>, <%ID>                                                                                    
		<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = shufflevector <8 x float> <%ID>, <8 x float> undef, <8 x i32> zeroinitializer                                   
		<%ID> = load <8 x float>, <8 x float>* <%ID>, align 1                                                                   

<%ID> = fadd float <%ID>, <%ID>                                                                                         
<%ID> = fadd double <%ID>, <%ID>                                                                                        
<%ID> = fmul float <%ID>, <%ID>                                                                                         
expected answer:
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
Nearest neighbors:
		<%ID> = fadd double <%ID>, <%ID>                                                                                        
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
		<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
		<%ID> = fsub double <%ID>, <%ID>                                                                                        
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         

<%ID> = fadd float <%ID>, <FLOAT>                                                                                       
<%ID> = fadd double <%ID>, <FLOAT>                                                                                      
<%ID> = fmul float <%ID>, <FLOAT>                                                                                       
expected answer:
		<%ID> = fmul double <%ID>, <FLOAT>                                                                                      
Nearest neighbors:
		<%ID> = fadd double <%ID>, <FLOAT>                                                                                      
		<%ID> = fmul float <%ID>, <FLOAT>                                                                                       
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
		<%ID> = fmul double <%ID>, <FLOAT>                                                                                      
		<%ID> = tail call double <@ID>(double <%ID>)                                                                            

<%ID> = fadd fast float <%ID>, <%ID>                                                                                    
<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
<%ID> = fmul fast float <%ID>, <%ID>                                                                                    
expected answer:
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
		<%ID> = fadd double <%ID>, <%ID>                                                                                        
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         

<%ID> = fadd fast float <%ID>, <FLOAT>                                                                                  
<%ID> = fadd fast double <%ID>, <FLOAT>                                                                                 
<%ID> = fmul fast float <%ID>, <FLOAT>                                                                                  
expected answer:
		<%ID> = fmul fast double <%ID>, <FLOAT>                                                                                 
Nearest neighbors:
		<%ID> = fadd fast double <%ID>, <FLOAT>                                                                                 
		<%ID> = fmul fast double <%ID>, <FLOAT>                                                                                 
		<%ID> = fmul fast float <%ID>, <FLOAT>                                                                                  
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
		<%ID> = fadd double <%ID>, <FLOAT>                                                                                      

<%ID> = fadd float <%ID>, <%ID>                                                                                         
<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
<%ID> = fmul float <%ID>, <%ID>                                                                                         
expected answer:
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = phi i64 [ 0, <%ID> ], [ 2, <%ID> ]                                                                              

<%ID> = fadd fast float <%ID>, <%ID>                                                                                    
<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fmul fast float <%ID>, <%ID>                                                                                    
expected answer:
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             

<%ID> = fadd float <%ID>, <%ID>                                                                                         
<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = fmul float <%ID>, <%ID>                                                                                         
expected answer:
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = phi <4 x double> [ zeroinitializer, <%ID> ], [ <%ID>, <%ID> ]                                                   

<%ID> = fadd fast float <%ID>, <%ID>                                                                                    
<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fmul fast float <%ID>, <%ID>                                                                                    
expected answer:
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = tail call fast <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>, <4 x double> <%ID>)                   
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  

<%ID> = fadd fast float <%ID>, <%ID>                                                                                    
<%ID> = fadd fast <8 x double> <%ID>, <%ID>                                                                             
<%ID> = fmul fast float <%ID>, <%ID>                                                                                    
expected answer:
		<%ID> = fmul fast <8 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fadd fast <8 x double> <%ID>, <%ID>                                                                             
		<%ID> = shufflevector <8 x double> <%ID>, <8 x double> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = fmul fast <8 x double> <%ID>, <%ID>                                                                             
		<%ID> = shufflevector <8 x double> <%ID>, <8 x double> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = shufflevector <8 x double> <%ID>, <8 x double> undef, <8 x i32> <i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>

<%ID> = fadd <2 x float> <%ID>, <%ID>                                                                                   
<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = fmul <2 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fsub <4 x float> <%ID>, <%ID>                                                                                   

<%ID> = fadd fast <2 x float> <%ID>, <%ID>                                                                              
<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fmul fast <2 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fsub fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   

<%ID> = fadd <2 x float> <%ID>, <%ID>                                                                                   
<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = fmul <2 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = load <8 x float>, <8 x float>* <%ID>, align 16                                                                  
		<%ID> = fadd fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul <2 x float> <%ID>, <%ID>                                                                                   

<%ID> = fadd fast <2 x float> <%ID>, <%ID>                                                                              
<%ID> = fadd fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fmul fast <2 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fadd fast <8 x float> <%ID>, <%ID>                                                                              
		store <8 x float> <%ID>, <8 x float>* <%ID>, align 4                                                                    
		<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = load <8 x float>, <8 x float>* <%ID>, align 16                                                                  

<%ID> = fadd <2 x float> <%ID>, <%ID>                                                                                   
<%ID> = fadd double <%ID>, <%ID>                                                                                        
<%ID> = fmul <2 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
Nearest neighbors:
		<%ID> = fadd double <%ID>, <%ID>                                                                                        
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
		<%ID> = fsub double <%ID>, <%ID>                                                                                        
		<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         

<%ID> = fadd fast <2 x float> <%ID>, <%ID>                                                                              
<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
<%ID> = fmul fast <2 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
		<%ID> = fadd double <%ID>, <%ID>                                                                                        
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul double <%ID>, <%ID>                                                                                        

<%ID> = fadd <2 x float> <%ID>, <%ID>                                                                                   
<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
<%ID> = fmul <2 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         
		store <2 x double> <%ID>, <2 x double>* <%ID>, align 8                                                                  

<%ID> = fadd fast <2 x float> <%ID>, <%ID>                                                                              
<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fmul fast <2 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             

<%ID> = fadd <2 x float> <%ID>, <%ID>                                                                                   
<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = fmul <2 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
		store <4 x double> <%ID>, <4 x double>* <%ID>, align 16                                                                 
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             

<%ID> = fadd fast <2 x float> <%ID>, <%ID>                                                                              
<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fmul fast <2 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>, <4 x double> <%ID>)                        

<%ID> = fadd fast <2 x float> <%ID>, <%ID>                                                                              
<%ID> = fadd fast <8 x double> <%ID>, <%ID>                                                                             
<%ID> = fmul fast <2 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fmul fast <8 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fadd fast <8 x double> <%ID>, <%ID>                                                                             
		<%ID> = shufflevector <8 x double> <%ID>, <8 x double> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = fmul fast <8 x double> <%ID>, <%ID>                                                                             
		<%ID> = shufflevector <8 x double> <%ID>, <8 x double> undef, <8 x i32> <i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = shufflevector <8 x double> <%ID>, <8 x double> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef>

<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = load <8 x float>, <8 x float>* <%ID>, align 16                                                                  
		store <8 x float> <%ID>, <8 x float>* <%ID>, align 16                                                                   
		<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   

<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fadd fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fadd fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = load <8 x float>, <8 x float>* <%ID>, align 4                                                                   
		<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = phi float* [ <%ID>, <%ID> ], [ null, <%ID> ]                                                                    

<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = fadd double <%ID>, <%ID>                                                                                        
<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
Nearest neighbors:
		<%ID> = fadd double <%ID>, <%ID>                                                                                        
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
		<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
		<%ID> = fsub double <%ID>, <%ID>                                                                                        
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         

<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
		<%ID> = fadd double <%ID>, <%ID>                                                                                        
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         
		<%ID> = fmul double <%ID>, <%ID>                                                                                        

<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         

<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([146 x i8], [146 x i8]* <@ID>, i64 <INT>, i64 <INT>))

<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>, <4 x double> <%ID>)                        
		<%ID> = shufflevector <4 x double> <%ID>, <4 x double> undef, <4 x i32> zeroinitializer                                 

<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = load <4 x double>, <4 x double>* <%ID>, align 1                                                                 
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  

<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fadd fast <8 x double> <%ID>, <%ID>                                                                             
<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fmul fast <8 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fadd fast <8 x double> <%ID>, <%ID>                                                                             
		<%ID> = shufflevector <8 x double> <%ID>, <8 x double> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = fmul fast <8 x double> <%ID>, <%ID>                                                                             
		<%ID> = shufflevector <8 x double> <%ID>, <8 x double> undef, <8 x i32> <i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = shufflevector <8 x double> <%ID>, <8 x double> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef>

<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = fadd double <%ID>, <%ID>                                                                                        
<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
Nearest neighbors:
		<%ID> = fadd double <%ID>, <%ID>                                                                                        
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         
		<%ID> = fsub double <%ID>, <%ID>                                                                                        
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   

<%ID> = fadd fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
		<%ID> = fadd double <%ID>, <%ID>                                                                                        
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
		<%ID> = fsub double <%ID>, <%ID>                                                                                        
		<%ID> = fmul double <%ID>, <%ID>                                                                                        

<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         
		store <2 x double> <%ID>, <2 x double>* <%ID>, align 8                                                                  

<%ID> = fadd fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             

<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = shufflevector <4 x double> <%ID>, <4 x double> undef, <4 x i32> zeroinitializer                                 
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             

<%ID> = fadd fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fadd fast <8 x double> <%ID>, <%ID>                                                                             
<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fmul fast <8 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fadd fast <8 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul fast <8 x double> <%ID>, <%ID>                                                                             
		<%ID> = shufflevector <8 x double> <%ID>, <8 x double> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = shufflevector <8 x double> <%ID>, <8 x double> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = shufflevector <8 x double> <%ID>, <8 x double> undef, <8 x i32> <i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>

<%ID> = fadd double <%ID>, <%ID>                                                                                        
<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
<%ID> = fmul double <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         

<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         

<%ID> = fadd double <%ID>, <%ID>                                                                                        
<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = fmul double <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>, <4 x double> <%ID>)                        

<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  

<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
<%ID> = fadd fast <8 x double> <%ID>, <%ID>                                                                             
<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fmul fast <8 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fadd fast <8 x double> <%ID>, <%ID>                                                                             
		<%ID> = shufflevector <8 x double> <%ID>, <8 x double> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = shufflevector <8 x double> <%ID>, <8 x double> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = shufflevector <8 x double> <%ID>, <8 x double> undef, <8 x i32> <i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = fmul fast <8 x double> <%ID>, <%ID>                                                                             

<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
expected answer:
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = shufflevector <4 x double> <%ID>, <4 x double> undef, <4 x i32> zeroinitializer                                 

<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fadd fast <8 x double> <%ID>, <%ID>                                                                             
<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
expected answer:
		<%ID> = fmul fast <8 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fadd fast <8 x double> <%ID>, <%ID>                                                                             
		<%ID> = shufflevector <8 x double> <%ID>, <8 x double> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = shufflevector <8 x double> <%ID>, <8 x double> undef, <8 x i32> <i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = fmul fast <8 x double> <%ID>, <%ID>                                                                             
		<%ID> = shufflevector <8 x double> <%ID>, <8 x double> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef>

<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fadd fast <8 x double> <%ID>, <%ID>                                                                             
<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
expected answer:
		<%ID> = fmul fast <8 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fadd fast <8 x double> <%ID>, <%ID>                                                                             
		<%ID> = shufflevector <8 x double> <%ID>, <8 x double> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = shufflevector <8 x double> <%ID>, <8 x double> undef, <8 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = shufflevector <8 x double> <%ID>, <8 x double> undef, <8 x i32> <i32 <INT>, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
		<%ID> = fmul fast <8 x double> <%ID>, <%ID>                                                                             

<%ID> = fadd fast float <%ID>, <%ID>                                                                                    
<%ID> = fadd fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fdiv fast float <%ID>, <%ID>                                                                                    
expected answer:
		<%ID> = fdiv fast <8 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fdiv fast float <%ID>, <%ID>                                                                                    
		<%ID> = fadd fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = fdiv fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = phi <8 x float> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                              

<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fadd fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fdiv fast <4 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fdiv fast <8 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fadd fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = fdiv fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = fdiv fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = load <8 x float>, <8 x float>* <%ID>, align 4                                                                   

<%ID> = fadd double <%ID>, <%ID>                                                                                        
<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
<%ID> = fdiv double <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = fdiv <2 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fdiv double <%ID>, <%ID>                                                                                        
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fdiv <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = inttoptr i64 <%ID> to <2 x double>*                                                                             
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([202 x i8], [202 x i8]* <@ID>, i64 <INT>, i64 <INT>))

<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fdiv fast double <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fdiv fast <4 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fdiv fast double <%ID>, <%ID>                                                                                   
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fdiv double <%ID>, <%ID>                                                                                        
		<%ID> = fdiv fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fcmp fast olt <4 x double> <%ID>, <%ID>                                                                         

<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fdiv fast <2 x double> <%ID>, <%ID>                                                                             
expected answer:
		<%ID> = fdiv fast <4 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fdiv fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fdiv <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>, <4 x double> <%ID>)                             
		<%ID> = fdiv fast <4 x double> <%ID>, <%ID>                                                                             

<%ID> = fsub fast float <%ID>, <%ID>                                                                                    
<%ID> = fsub fast <2 x float> <%ID>, <%ID>                                                                              
<%ID> = fmul fast float <%ID>, <%ID>                                                                                    
expected answer:
		<%ID> = fmul fast <2 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fsub fast <2 x float> <%ID>, <%ID>                                                                              
		<%ID> = fadd fast <2 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul fast float <%ID>, <%ID>                                                                                    
		<%ID> = fmul fast <2 x float> <%ID>, <%ID>                                                                              
		<%ID> = shufflevector <2 x float> <%ID>, <2 x float> <%ID>, <2 x i32> <i32 <INT>, i32 <INT>>                            

<%ID> = fsub float <%ID>, <%ID>                                                                                         
<%ID> = fsub <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = fmul float <%ID>, <%ID>                                                                                         
expected answer:
		<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fsub <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fmul float <%ID>, <%ID>                                                                                         
		<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
		store <4 x float> <%ID>, <4 x float>* <%ID>, align 4                                                                    

<%ID> = fsub fast float <%ID>, <%ID>                                                                                    
<%ID> = fsub fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fmul fast float <%ID>, <%ID>                                                                                    
expected answer:
		<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fsub fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul fast float <%ID>, <%ID>                                                                                    
		<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fcmp une float <%ID>, <FLOAT>                                                                                   

<%ID> = fsub float <%ID>, <%ID>                                                                                         
<%ID> = fsub double <%ID>, <%ID>                                                                                        
<%ID> = fmul float <%ID>, <%ID>                                                                                         
expected answer:
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
Nearest neighbors:
		<%ID> = fsub double <%ID>, <%ID>                                                                                        
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         
		<%ID> = fadd double <%ID>, <%ID>                                                                                        
		<%ID> = fadd double <%ID>, <FLOAT>                                                                                      

<%ID> = fsub fast float <%ID>, <%ID>                                                                                    
<%ID> = fsub fast double <%ID>, <%ID>                                                                                   
<%ID> = fmul fast float <%ID>, <%ID>                                                                                    
expected answer:
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fsub fast double <%ID>, <%ID>                                                                                   
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         
		<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
		<%ID> = fmul fast float <%ID>, <%ID>                                                                                    

<%ID> = fsub fast float <%ID>, <%ID>                                                                                    
<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fmul fast float <%ID>, <%ID>                                                                                    
expected answer:
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  

<%ID> = fsub float <%ID>, <%ID>                                                                                         
<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = fmul float <%ID>, <%ID>                                                                                         
expected answer:
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
		store <4 x double> <%ID>, <4 x double>* <%ID>, align 16                                                                 
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  

<%ID> = fsub fast float <%ID>, <%ID>                                                                                    
<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fmul fast float <%ID>, <%ID>                                                                                    
expected answer:
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = tail call fast <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>, <4 x double> <%ID>)                   
		store <4 x double> <%ID>, <4 x double>* <%ID>, align 16                                                                 

<%ID> = fsub <2 x float> <%ID>, <%ID>                                                                                   
<%ID> = fsub <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = fmul <2 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fsub <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
		store <4 x float> <%ID>, <4 x float>* <%ID>, align 4                                                                    
		<%ID> = bitcast float* <%ID> to <4 x float>*                                                                            
		<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   

<%ID> = fsub <2 x float> <%ID>, <%ID>                                                                                   
<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = fmul <2 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = bitcast float* <%ID> to <8 x i32>*                                                                              
		<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              

<%ID> = fsub fast <2 x float> <%ID>, <%ID>                                                                              
<%ID> = fsub fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fmul fast <2 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fsub fast <8 x float> <%ID>, <%ID>                                                                              
		store <8 x float> <%ID>, <8 x float>* <%ID>, align 4                                                                    
		<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = phi float* [ <%ID>, <%ID> ], [ null, <%ID> ], [ null, <%ID> ]                                                   

<%ID> = fsub <2 x float> <%ID>, <%ID>                                                                                   
<%ID> = fsub double <%ID>, <%ID>                                                                                        
<%ID> = fmul <2 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
Nearest neighbors:
		<%ID> = fsub double <%ID>, <%ID>                                                                                        
		<%ID> = fadd double <%ID>, <%ID>                                                                                        
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
		<%ID> = tail call double <@ID>(double <%ID>)                                                                            
		<%ID> = load double, double* <%ID>, align 8                                                                             

<%ID> = fsub fast <2 x float> <%ID>, <%ID>                                                                              
<%ID> = fsub fast double <%ID>, <%ID>                                                                                   
<%ID> = fmul fast <2 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fsub fast double <%ID>, <%ID>                                                                                   
		<%ID> = bitcast double* <%ID> to <4 x double>*                                                                          
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
		<%ID> = ptrtoint double* <%ID> to i64                                                                                   
		<%ID> = icmp ugt double* <%ID>, <%ID>                                                                                   

<%ID> = fsub fast <2 x float> <%ID>, <%ID>                                                                              
<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fmul fast <2 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
		store <2 x double> <%ID>, <2 x double>* <%ID>, align 16                                                                 
		<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  

<%ID> = fsub <2 x float> <%ID>, <%ID>                                                                                   
<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = fmul <2 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
		store <4 x double> <%ID>, <4 x double>* <%ID>, align 16                                                                 
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  

<%ID> = fsub fast <2 x float> <%ID>, <%ID>                                                                              
<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fmul fast <2 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = bitcast double* <%ID> to <4 x double>*                                                                          
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             

<%ID> = fsub <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = load <8 x float>, <8 x float>* <%ID>, align 16                                                                  

<%ID> = fsub fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fsub fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fsub fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = shufflevector <8 x float> <%ID>, <8 x float> undef, <8 x i32> zeroinitializer                                   
		<%ID> = load <8 x float>, <8 x float>* <%ID>, align 4                                                                   

<%ID> = fsub <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = fsub double <%ID>, <%ID>                                                                                        
<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
Nearest neighbors:
		<%ID> = fsub double <%ID>, <%ID>                                                                                        
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
		<%ID> = fadd double <%ID>, <%ID>                                                                                        
		<%ID> = fadd double <%ID>, <FLOAT>                                                                                      
		<%ID> = tail call double <@ID>(double <%ID>)                                                                            

<%ID> = fsub fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fsub fast double <%ID>, <%ID>                                                                                   
<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fsub fast double <%ID>, <%ID>                                                                                   
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
		<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
		<%ID> = fsub double <%ID>, <%ID>                                                                                        
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         

<%ID> = fsub <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  
<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             

<%ID> = fsub fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = load <2 x double>, <2 x double>* <%ID>, align 1                                                                 
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = phi <2 x double> [ <%ID>, <%ID> ], [ zeroinitializer, <%ID> ]                                                   

<%ID> = fsub <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = bitcast double* <%ID> to <4 x double>*                                                                          

<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = fsub double <%ID>, <%ID>                                                                                        
<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
Nearest neighbors:
		<%ID> = fsub double <%ID>, <%ID>                                                                                        
		<%ID> = fadd double <%ID>, <%ID>                                                                                        
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         
		<%ID> = load double, double* <%ID>, align 8                                                                             

<%ID> = fsub fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fsub fast double <%ID>, <%ID>                                                                                   
<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fsub fast double <%ID>, <%ID>                                                                                   
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
		<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
		<%ID> = fsub double <%ID>, <%ID>                                                                                        
		<%ID> = shufflevector <4 x double> <%ID>, <4 x double> undef, <4 x i32> zeroinitializer                                 

<%ID> = fsub fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = load <2 x double>, <2 x double>* <%ID>, align 1                                                                 
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             

<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = shufflevector <4 x double> <%ID>, <4 x double> undef, <4 x i32> zeroinitializer                                 

<%ID> = fsub fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = shufflevector <4 x double> <%ID>, <4 x double> undef, <4 x i32> zeroinitializer                                 
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = load <4 x double>, <4 x double>* <%ID>, align 1                                                                 

<%ID> = fsub double <%ID>, <%ID>                                                                                        
<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  
<%ID> = fmul double <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
		store <2 x double> <%ID>, <2 x double>* <%ID>, align 8                                                                  
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  

<%ID> = fsub fast double <%ID>, <%ID>                                                                                   
<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             

<%ID> = fsub double <%ID>, <%ID>                                                                                        
<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = fmul double <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             

<%ID> = fsub fast double <%ID>, <%ID>                                                                                   
<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
		<%ID> = tail call fast <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>, <4 x double> <%ID>)                   
		<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  

<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  
<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
expected answer:
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             

<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
expected answer:
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             

<%ID> = fsub <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = fdiv <4 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fdiv <8 x float> <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fdiv <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fdiv <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = icmp eq <8 x i64> <%ID>, <%ID>                                                                                  
		<%ID> = fdiv fast <8 x float> <%ID>, <%ID>                                                                              

<%ID> = fsub fast double <%ID>, <%ID>                                                                                   
<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fdiv fast double <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fdiv fast <2 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fdiv fast double <%ID>, <%ID>                                                                                   
		<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fdiv double <%ID>, <%ID>                                                                                        
		<%ID> = fdiv fast <2 x double> <%ID>, <%ID>                                                                             

<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  
<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = fdiv <2 x double> <%ID>, <%ID>                                                                                  
expected answer:
		<%ID> = fdiv <4 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fdiv <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fdiv <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fdiv fast <2 x double> <%ID>, <%ID>                                                                             

<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = fdiv <4 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fdiv <8 x float> <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fdiv <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fdiv <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fcmp olt <8 x float> <%ID>, <%ID>                                                                               
		<%ID> = fdiv fast <8 x float> <%ID>, <%ID>                                                                              

<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fdiv fast <4 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fdiv fast <8 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = fdiv fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fdiv <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fdiv fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = fsub fast <8 x float> <%ID>, <%ID>                                                                              

<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fdiv fast double <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fdiv fast <2 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fdiv fast double <%ID>, <%ID>                                                                                   
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fdiv <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fdiv fast <2 x double> <%ID>, <%ID>                                                                             

<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fdiv fast double <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fdiv fast <4 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fdiv fast double <%ID>, <%ID>                                                                                   
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fdiv double <%ID>, <%ID>                                                                                        
		<%ID> = fdiv fast <4 x double> <%ID>, <%ID>                                                                             

--- Incorrect predictions:

<%ID> = fadd float <%ID>, <%ID>                                                                                         
<%ID> = fadd <2 x float> <%ID>, <%ID>                                                                                   
<%ID> = fsub float <%ID>, <%ID>                                                                                         
expected answer:
		<%ID> = fsub <2 x float> <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fadd <2 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fsub float <%ID>, <%ID>                                                                                         
		<%ID> = fmul <2 x float> <%ID>, <%ID>                                                                                   
		<%ID> = phi <2 x float> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                              
		<%ID> = insertelement <2 x float> undef, float <%ID>, <TYP> 0                                                           

<%ID> = fadd fast float <%ID>, <%ID>                                                                                    
<%ID> = fadd fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fsub fast float <%ID>, <%ID>                                                                                    
expected answer:
		<%ID> = fsub fast <8 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fadd fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = fsub fast float <%ID>, <%ID>                                                                                    
		store <8 x float> <%ID>, <8 x float>* <%ID>, align 4                                                                    
		<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              

<%ID> = fadd float <%ID>, <%ID>                                                                                         
<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = fsub float <%ID>, <%ID>                                                                                         
expected answer:
		<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = phi <4 x double> [ zeroinitializer, <%ID> ], [ <%ID>, <%ID> ]                                                   
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>, <4 x double> <%ID>)                        

<%ID> = fadd fast float <%ID>, <%ID>                                                                                    
<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fsub fast float <%ID>, <%ID>                                                                                    
expected answer:
		<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = phi <4 x double> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                             

<%ID> = fadd <2 x float> <%ID>, <%ID>                                                                                   
<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = fsub <2 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fsub <4 x float> <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fsub <2 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   

<%ID> = fadd fast <2 x float> <%ID>, <%ID>                                                                              
<%ID> = fadd fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fsub fast <2 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fsub fast <8 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fadd fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = load <8 x float>, <8 x float>* <%ID>, align 4                                                                   
		<%ID> = fsub fast <2 x float> <%ID>, <%ID>                                                                              
		store <8 x float> <%ID>, <8 x float>* <%ID>, align 4                                                                    
		<%ID> = fsub fast float <%ID>, <%ID>                                                                                    

<%ID> = fadd fast <2 x float> <%ID>, <%ID>                                                                              
<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
<%ID> = fsub fast <2 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fsub fast double <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
		<%ID> = fadd double <%ID>, <%ID>                                                                                        
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
		<%ID> = fsub fast <2 x float> <%ID>, <%ID>                                                                              
		<%ID> = fsub double <%ID>, <%ID>                                                                                        

<%ID> = fadd <2 x float> <%ID>, <%ID>                                                                                   
<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
<%ID> = fsub <2 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fsub <2 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             

<%ID> = fadd <2 x float> <%ID>, <%ID>                                                                                   
<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = fsub <2 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fsub <2 x float> <%ID>, <%ID>                                                                                   

<%ID> = fadd fast <2 x float> <%ID>, <%ID>                                                                              
<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fsub fast <2 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fcmp fast olt <4 x double> <%ID>, <%ID>                                                                         

<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fadd fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fsub fast <4 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fsub fast <8 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fadd fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = load <8 x float>, <8 x float>* <%ID>, align 4                                                                   
		<%ID> = fsub fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = icmp eq float* <%ID>, <%ID>                                                                                     
		store i8* <%ID>, i8** <%ID>, align 8                                                                                    

<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = fsub <4 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = phi <4 x double> [ zeroinitializer, <%ID> ], [ <%ID>, <%ID> ]                                                   

<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fsub fast <4 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = phi <4 x double> [ zeroinitializer, <%ID> ], [ <%ID>, <%ID> ]                                                   
		<%ID> = phi <4 x double> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                             

<%ID> = fadd fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fsub fast <8 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  

<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>, <4 x double> <%ID>)                        

<%ID> = fadd fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fsub fast <8 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fsub fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             

<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  
expected answer:
		<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             

<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
expected answer:
		<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		store <4 x double> <%ID>, <4 x double>* <%ID>, align 16                                                                 
		<%ID> = load <4 x double>, <4 x double>* <%ID>, align 1                                                                 

<%ID> = fadd fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = load <4 x double>, <4 x double>* <%ID>, align 1                                                                 
		<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              

<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
expected answer:
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = load <4 x double>, <4 x double>* <%ID>, align 1                                                                 
		store <4 x double> <%ID>, <4 x double>* <%ID>, align 16                                                                 

<%ID> = fadd float <%ID>, <%ID>                                                                                         
<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = fdiv float <%ID>, <%ID>                                                                                         
expected answer:
		<%ID> = fdiv <4 x float> <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fdiv float <%ID>, <%ID>                                                                                         
		<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fsub fast <4 x float> <%ID>, <%ID>                                                                              

<%ID> = fadd fast float <%ID>, <%ID>                                                                                    
<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fdiv fast float <%ID>, <%ID>                                                                                    
expected answer:
		<%ID> = fdiv fast <4 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fdiv fast float <%ID>, <%ID>                                                                                    
		<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
		store <4 x float> <%ID>, <4 x float>* <%ID>, align 16                                                                   

<%ID> = fadd float <%ID>, <%ID>                                                                                         
<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = fdiv float <%ID>, <%ID>                                                                                         
expected answer:
		<%ID> = fdiv <8 x float> <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fdiv float <%ID>, <%ID>                                                                                         
		<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   
		store <8 x float> <%ID>, <8 x float>* <%ID>, align 16                                                                   
		<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   

<%ID> = fadd float <%ID>, <%ID>                                                                                         
<%ID> = fadd double <%ID>, <%ID>                                                                                        
<%ID> = fdiv float <%ID>, <%ID>                                                                                         
expected answer:
		<%ID> = fdiv double <%ID>, <%ID>                                                                                        
Nearest neighbors:
		<%ID> = fadd double <%ID>, <%ID>                                                                                        
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
		<%ID> = fdiv float <%ID>, <%ID>                                                                                         
		<%ID> = fsub double <%ID>, <%ID>                                                                                        
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         

<%ID> = fadd fast float <%ID>, <%ID>                                                                                    
<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
<%ID> = fdiv fast float <%ID>, <%ID>                                                                                    
expected answer:
		<%ID> = fdiv fast double <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
		<%ID> = fdiv fast float <%ID>, <%ID>                                                                                    
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
		<%ID> = fadd double <%ID>, <%ID>                                                                                        
		<%ID> = fcmp fast ogt double <%ID>, <%ID>                                                                               

<%ID> = fadd float <%ID>, <%ID>                                                                                         
<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
<%ID> = fdiv float <%ID>, <%ID>                                                                                         
expected answer:
		<%ID> = fdiv <2 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fdiv float <%ID>, <%ID>                                                                                         
		store <2 x double> <%ID>, <2 x double>* <%ID>, align 8                                                                  
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  

<%ID> = fadd fast float <%ID>, <%ID>                                                                                    
<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fdiv fast float <%ID>, <%ID>                                                                                    
expected answer:
		<%ID> = fdiv fast <2 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fdiv fast float <%ID>, <%ID>                                                                                    
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  

<%ID> = fadd float <%ID>, <%ID>                                                                                         
<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = fdiv float <%ID>, <%ID>                                                                                         
expected answer:
		<%ID> = fdiv <4 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = phi <4 x double> [ zeroinitializer, <%ID> ], [ <%ID>, <%ID> ]                                                   
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>, <4 x double> <%ID>)                        

<%ID> = fadd fast float <%ID>, <%ID>                                                                                    
<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fdiv fast float <%ID>, <%ID>                                                                                    
expected answer:
		<%ID> = fdiv fast <4 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fdiv fast float <%ID>, <%ID>                                                                                    
		<%ID> = phi <4 x double> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                             
		<%ID> = tail call fast <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>, <4 x double> <%ID>)                   
		<%ID> = fcmp fast olt <4 x double> <%ID>, <%ID>                                                                         

<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = fdiv <4 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fdiv <8 x float> <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fdiv <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   
		store <8 x float> <%ID>, <8 x float>* <%ID>, align 16                                                                   
		<%ID> = fdiv fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   

<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = fadd double <%ID>, <%ID>                                                                                        
<%ID> = fdiv <4 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fdiv double <%ID>, <%ID>                                                                                        
Nearest neighbors:
		<%ID> = fadd double <%ID>, <%ID>                                                                                        
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         
		<%ID> = fdiv <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
		<%ID> = fmul double <%ID>, <%ID>                                                                                        

<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
<%ID> = fdiv fast <4 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fdiv fast double <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
		<%ID> = fdiv fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fadd double <%ID>, <%ID>                                                                                        
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         

<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
<%ID> = fdiv <4 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fdiv <2 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fdiv <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         

<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fdiv fast <4 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fdiv fast <2 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fdiv fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         
		<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             

<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = fdiv <4 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fdiv <4 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fdiv <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = phi <4 x double> [ zeroinitializer, <%ID> ], [ <%ID>, <%ID> ]                                                   

<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fdiv fast <4 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fdiv fast <4 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fdiv fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = phi <4 x double> [ zeroinitializer, <%ID> ], [ <%ID>, <%ID> ]                                                   
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             

<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = fadd double <%ID>, <%ID>                                                                                        
<%ID> = fdiv <8 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fdiv double <%ID>, <%ID>                                                                                        
Nearest neighbors:
		<%ID> = fadd double <%ID>, <%ID>                                                                                        
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         
		<%ID> = fsub double <%ID>, <%ID>                                                                                        
		<%ID> = fadd fast double <%ID>, <%ID>                                                                                   

<%ID> = fadd fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
<%ID> = fdiv fast <8 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fdiv fast double <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
		<%ID> = fadd double <%ID>, <%ID>                                                                                        
		<%ID> = fdiv fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         

<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
<%ID> = fdiv <8 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fdiv <2 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fdiv <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         

<%ID> = fadd fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fdiv fast <8 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fdiv fast <2 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fdiv fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  

<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = fdiv <8 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fdiv <4 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fdiv <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             

<%ID> = fadd fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fdiv fast <8 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fdiv fast <4 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fdiv fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = load <4 x double>, <4 x double>* <%ID>, align 8                                                                 
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  

<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fdiv fast double <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fdiv fast <2 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fdiv fast double <%ID>, <%ID>                                                                                   
		<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fdiv double <%ID>, <%ID>                                                                                        
		<%ID> = fdiv <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  

<%ID> = fadd double <%ID>, <%ID>                                                                                        
<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = fdiv double <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = fdiv <4 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fdiv double <%ID>, <%ID>                                                                                        
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>, <4 x double> <%ID>)                        

<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = fdiv <2 x double> <%ID>, <%ID>                                                                                  
expected answer:
		<%ID> = fdiv <4 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fdiv <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = shufflevector <4 x double> <%ID>, <4 x double> undef, <4 x i32> zeroinitializer                                 
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             

<%ID> = fsub float <%ID>, <%ID>                                                                                         
<%ID> = fsub <2 x float> <%ID>, <%ID>                                                                                   
<%ID> = fmul float <%ID>, <%ID>                                                                                         
expected answer:
		<%ID> = fmul <2 x float> <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fsub <2 x float> <%ID>, <%ID>                                                                                   
		<%ID> = shufflevector <2 x float> <%ID>, <2 x float> <%ID>, <2 x i32> <i32 <INT>, i32 <INT>>                            
		<%ID> = fmul float <%ID>, <%ID>                                                                                         
		<%ID> = shufflevector <2 x float> <%ID>, <2 x float> undef, <2 x i32> <i32 <INT>, i32 <INT>>                            
		<%ID> = phi <2 x float> [ zeroinitializer, <%ID> ], [ <%ID>, <%ID> ]                                                    

<%ID> = fsub fast float <%ID>, <%ID>                                                                                    
<%ID> = fsub fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fmul fast float <%ID>, <%ID>                                                                                    
expected answer:
		<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fsub fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul fast float <%ID>, <%ID>                                                                                    
		<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              

<%ID> = fsub float <%ID>, <%ID>                                                                                         
<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = fmul float <%ID>, <%ID>                                                                                         
expected answer:
		<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fmul float <%ID>, <%ID>                                                                                         
		store <8 x float> <%ID>, <8 x float>* <%ID>, align 16                                                                   
		<%ID> = bitcast float* <%ID> to <8 x float>*                                                                            
		<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   

<%ID> = fsub float <FLOAT>, <%ID>                                                                                       
<%ID> = fsub double <FLOAT>, <%ID>                                                                                      
<%ID> = fmul float <FLOAT>, <%ID>                                                                                       
expected answer:
		<%ID> = fmul double <FLOAT>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = fmul float <FLOAT>, <%ID>                                                                                       
		<%ID> = fsub double <FLOAT>, <%ID>                                                                                      
		<%ID> = call fast float <@ID>(float <%ID>, float <%ID>)                                                                 
		<%ID> = fcmp uno float <%ID>, <%ID>                                                                                     
		<%ID> = fmul double <%ID>, <%ID>                                                                                        

<%ID> = fsub fast float <FLOAT>, <%ID>                                                                                  
<%ID> = fsub fast double <FLOAT>, <%ID>                                                                                 
<%ID> = fmul fast float <FLOAT>, <%ID>                                                                                  
expected answer:
		<%ID> = fmul fast double <FLOAT>, <%ID>                                                                                 
Nearest neighbors:
		<%ID> = fsub fast double <FLOAT>, <%ID>                                                                                 
		<%ID> = fmul fast float <FLOAT>, <%ID>                                                                                  
		<%ID> = fsub double <FLOAT>, <%ID>                                                                                      
		<%ID> = call fast float <@ID>(float <%ID>, float <%ID>)                                                                 
		<%ID> = insertelement <4 x double> <%ID>, double <%ID>, <TYP> 2                                                         

<%ID> = fsub float <%ID>, <%ID>                                                                                         
<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  
<%ID> = fmul float <%ID>, <%ID>                                                                                         
expected answer:
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
		store <2 x double> <%ID>, <2 x double>* <%ID>, align 8                                                                  
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  

<%ID> = fsub fast <2 x float> <%ID>, <%ID>                                                                              
<%ID> = fsub fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fmul fast <2 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fsub fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fsub <4 x float> <%ID>, <%ID>                                                                                   

<%ID> = fsub <2 x float> <%ID>, <%ID>                                                                                   
<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  
<%ID> = fmul <2 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  
		store <2 x double> <%ID>, <2 x double>* <%ID>, align 8                                                                  
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             

<%ID> = fsub fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = shufflevector <4 x double> <%ID>, <4 x double> undef, <4 x i32> zeroinitializer                                 
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = load <4 x double>, <4 x double>* <%ID>, align 1                                                                 

<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  
<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
		store <2 x double> <%ID>, <2 x double>* <%ID>, align 8                                                                  

<%ID> = fsub float <%ID>, <%ID>                                                                                         
<%ID> = fsub <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = fdiv float <%ID>, <%ID>                                                                                         
expected answer:
		<%ID> = fdiv <4 x float> <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fsub <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fdiv float <%ID>, <%ID>                                                                                         
		<%ID> = inttoptr i64 <%ID> to <4 x float>*                                                                              
		store <4 x float> <%ID>, <4 x float>* <%ID>, align 16                                                                   
		<%ID> = load <4 x float>, <4 x float>* <%ID>, align 1                                                                   

<%ID> = fsub fast float <%ID>, <%ID>                                                                                    
<%ID> = fsub fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fdiv fast float <%ID>, <%ID>                                                                                    
expected answer:
		<%ID> = fdiv fast <4 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fsub fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fdiv fast float <%ID>, <%ID>                                                                                    
		store <4 x float> <%ID>, <4 x float>* <%ID>, align 16                                                                   
		<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   

<%ID> = fsub float <%ID>, <%ID>                                                                                         
<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = fdiv float <%ID>, <%ID>                                                                                         
expected answer:
		<%ID> = fdiv <8 x float> <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fdiv float <%ID>, <%ID>                                                                                         
		<%ID> = icmp eq { opaque* }* <%ID>, null                                                                                
		store <8 x float> <%ID>, <8 x float>* <%ID>, align 16                                                                   
		store { opaque* }* null, { opaque* }** <%ID>, align 8                                                                   

<%ID> = fsub fast float <%ID>, <%ID>                                                                                    
<%ID> = fsub fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fdiv fast float <%ID>, <%ID>                                                                                    
expected answer:
		<%ID> = fdiv fast <8 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fdiv fast float <%ID>, <%ID>                                                                                    
		<%ID> = fsub fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = bitcast { { { float*, i64 } } }* <%ID> to i64*                                                                  
		<%ID> = phi <{ float*, { i8 }, [7 x i8] }>* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                          
		<%ID> = fcmp une float <%ID>, <FLOAT>                                                                                   

<%ID> = fsub float <%ID>, <%ID>                                                                                         
<%ID> = fsub double <%ID>, <%ID>                                                                                        
<%ID> = fdiv float <%ID>, <%ID>                                                                                         
expected answer:
		<%ID> = fdiv double <%ID>, <%ID>                                                                                        
Nearest neighbors:
		<%ID> = fsub double <%ID>, <%ID>                                                                                        
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
		<%ID> = fadd double <%ID>, <%ID>                                                                                        
		<%ID> = fdiv float <%ID>, <%ID>                                                                                         
		<%ID> = fsub double <FLOAT>, <%ID>                                                                                      

<%ID> = fsub float <FLOAT>, <%ID>                                                                                       
<%ID> = fsub double <FLOAT>, <%ID>                                                                                      
<%ID> = fdiv float <FLOAT>, <%ID>                                                                                       
expected answer:
		<%ID> = fdiv double <FLOAT>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = fsub double <FLOAT>, <%ID>                                                                                      
		<%ID> = fdiv float <FLOAT>, <%ID>                                                                                       
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
		<%ID> = fsub double <%ID>, <%ID>                                                                                        
		store double <%ID>, double* <%ID>, align 8                                                                              

<%ID> = fsub fast float <%ID>, <%ID>                                                                                    
<%ID> = fsub fast double <%ID>, <%ID>                                                                                   
<%ID> = fdiv fast float <%ID>, <%ID>                                                                                    
expected answer:
		<%ID> = fdiv fast double <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fsub fast double <%ID>, <%ID>                                                                                   
		<%ID> = fdiv fast float <%ID>, <%ID>                                                                                    
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
		<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         

<%ID> = fsub float <%ID>, <%ID>                                                                                         
<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  
<%ID> = fdiv float <%ID>, <%ID>                                                                                         
expected answer:
		<%ID> = fdiv <2 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  
		store <2 x double> <%ID>, <2 x double>* <%ID>, align 8                                                                  
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fdiv float <%ID>, <%ID>                                                                                         
		<%ID> = load <2 x double>, <2 x double>* <%ID>, align 8                                                                 

<%ID> = fsub fast float <%ID>, <%ID>                                                                                    
<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fdiv fast float <%ID>, <%ID>                                                                                    
expected answer:
		<%ID> = fdiv fast <2 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  

<%ID> = fsub float <%ID>, <%ID>                                                                                         
<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = fdiv float <%ID>, <%ID>                                                                                         
expected answer:
		<%ID> = fdiv <4 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             

<%ID> = fsub fast float <%ID>, <%ID>                                                                                    
<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fdiv fast float <%ID>, <%ID>                                                                                    
expected answer:
		<%ID> = fdiv fast <4 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fdiv fast float <%ID>, <%ID>                                                                                    
		<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            
		<%ID> = tail call fast <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>, <4 x double> <%ID>)                   

<%ID> = fsub fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fsub fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fdiv fast <4 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fdiv fast <8 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fsub fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = fdiv fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = fdiv <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = shufflevector <8 x float> <%ID>, <8 x float> undef, <8 x i32> zeroinitializer                                   

<%ID> = fsub <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = fsub double <%ID>, <%ID>                                                                                        
<%ID> = fdiv <4 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fdiv double <%ID>, <%ID>                                                                                        
Nearest neighbors:
		<%ID> = fsub double <%ID>, <%ID>                                                                                        
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
		<%ID> = fadd double <%ID>, <%ID>                                                                                        
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         
		<%ID> = fadd fast double <%ID>, <%ID>                                                                                   

<%ID> = fsub fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fsub fast double <%ID>, <%ID>                                                                                   
<%ID> = fdiv fast <4 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fdiv fast double <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fsub fast double <%ID>, <%ID>                                                                                   
		<%ID> = fdiv fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         
		<%ID> = fsub double <%ID>, <%ID>                                                                                        
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   

<%ID> = fsub <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  
<%ID> = fdiv <4 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fdiv <2 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fdiv <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         

<%ID> = fsub fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fdiv fast <4 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fdiv fast <2 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fdiv fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         
		<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             

<%ID> = fsub <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = fdiv <4 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fdiv <4 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = phi <4 x double> [ <%ID>, <%ID> ], [ undef, <%ID> ]                                                             

<%ID> = fsub fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fdiv fast <4 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fdiv fast <4 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = shufflevector <4 x double> <%ID>, <4 x double> undef, <4 x i32> zeroinitializer                                 
		<%ID> = fdiv fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = tail call fast <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>, <4 x double> <%ID>)                   

<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = fsub double <%ID>, <%ID>                                                                                        
<%ID> = fdiv <8 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fdiv double <%ID>, <%ID>                                                                                        
Nearest neighbors:
		<%ID> = fsub double <%ID>, <%ID>                                                                                        
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
		<%ID> = fadd double <%ID>, <%ID>                                                                                        
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         
		<%ID> = tail call double <@ID>(double <%ID>)                                                                            

<%ID> = fsub fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fsub fast double <%ID>, <%ID>                                                                                   
<%ID> = fdiv fast <8 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fdiv fast double <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fsub fast double <%ID>, <%ID>                                                                                   
		<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
		<%ID> = fdiv fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = fadd double <%ID>, <%ID>                                                                                        

<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  
<%ID> = fdiv <8 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fdiv <2 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             

<%ID> = fsub fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fdiv fast <8 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fdiv fast <2 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fdiv fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             

<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = fdiv <8 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fdiv <4 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = phi <4 x double> [ zeroinitializer, <%ID> ], [ <%ID>, <%ID> ]                                                   
		<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             

<%ID> = fsub fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fdiv fast <8 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fdiv fast <4 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fdiv fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = load <4 x double>, <4 x double>* <%ID>, align 8                                                                 
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  

<%ID> = fsub double <%ID>, <%ID>                                                                                        
<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  
<%ID> = fdiv double <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = fdiv <2 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fdiv double <%ID>, <%ID>                                                                                        
		<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
		store <2 x double> <%ID>, <2 x double>* <%ID>, align 16                                                                 
		store <2 x double> <%ID>, <2 x double>* <%ID>, align 8                                                                  

<%ID> = fsub double <%ID>, <%ID>                                                                                        
<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = fdiv double <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = fdiv <4 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fdiv double <%ID>, <%ID>                                                                                        
		<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>, <4 x double> <%ID>)                        

<%ID> = fsub fast double <%ID>, <%ID>                                                                                   
<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fdiv fast double <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fdiv fast <4 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fdiv fast double <%ID>, <%ID>                                                                                   
		<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fdiv double <%ID>, <%ID>                                                                                        
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             

<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fdiv fast <2 x double> <%ID>, <%ID>                                                                             
expected answer:
		<%ID> = fdiv fast <4 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fdiv fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fdiv <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             

<%ID> = fmul float <%ID>, <%ID>                                                                                         
<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = fdiv float <%ID>, <%ID>                                                                                         
expected answer:
		<%ID> = fdiv <4 x float> <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fdiv float <%ID>, <%ID>                                                                                         
		<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = phi <4 x float> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                              

<%ID> = fmul fast float <%ID>, <%ID>                                                                                    
<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fdiv fast float <%ID>, <%ID>                                                                                    
expected answer:
		<%ID> = fdiv fast <4 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fdiv fast float <%ID>, <%ID>                                                                                    
		<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
		store <4 x float> <%ID>, <4 x float>* <%ID>, align 16                                                                   
		<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   

<%ID> = fmul float <%ID>, <%ID>                                                                                         
<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = fdiv float <%ID>, <%ID>                                                                                         
expected answer:
		<%ID> = fdiv <8 x float> <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fdiv float <%ID>, <%ID>                                                                                         
		<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   

<%ID> = fmul fast float <%ID>, <%ID>                                                                                    
<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fdiv fast float <%ID>, <%ID>                                                                                    
expected answer:
		<%ID> = fdiv fast <8 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = fdiv fast float <%ID>, <%ID>                                                                                    
		<%ID> = phi <8 x float> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                              
		<%ID> = load <8 x float>, <8 x float>* <%ID>, align 4                                                                   
		<%ID> = tail call fast <8 x float> <@ID>(<8 x float> <%ID>, <8 x float> <%ID>, <8 x float> <%ID>)                       

<%ID> = fmul float <%ID>, <%ID>                                                                                         
<%ID> = fmul double <%ID>, <%ID>                                                                                        
<%ID> = fdiv float <%ID>, <%ID>                                                                                         
expected answer:
		<%ID> = fdiv double <%ID>, <%ID>                                                                                        
Nearest neighbors:
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
		<%ID> = fadd double <%ID>, <%ID>                                                                                        
		<%ID> = fsub double <%ID>, <%ID>                                                                                        
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         
		<%ID> = fdiv float <%ID>, <%ID>                                                                                         

<%ID> = fmul float <FLOAT>, <%ID>                                                                                       
<%ID> = fmul double <FLOAT>, <%ID>                                                                                      
<%ID> = fdiv float <FLOAT>, <%ID>                                                                                       
expected answer:
		<%ID> = fdiv double <FLOAT>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = fmul double <FLOAT>, <%ID>                                                                                      
		<%ID> = fdiv float <FLOAT>, <%ID>                                                                                       
		<%ID> = insertvalue { double, double } <%ID>, double <%ID>, 1                                                           
		<%ID> = tail call fast double <@ID>({ { { { double*, i64, i64 } } }, { { { double*, i64, i64 } } }*, { { double*, { i64 } } }, { { double*, { i64 } } }, i64 }* <%ID>, i64 <%ID>, i64 <%ID>)
		<%ID> = extractvalue { double, double } <%ID>, 1                                                                        

<%ID> = fmul fast float <%ID>, <%ID>                                                                                    
<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
<%ID> = fdiv fast float <%ID>, <%ID>                                                                                    
expected answer:
		<%ID> = fdiv fast double <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
		<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
		<%ID> = fdiv fast float <%ID>, <%ID>                                                                                    
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
		<%ID> = fadd double <%ID>, <%ID>                                                                                        

<%ID> = fmul float <%ID>, <%ID>                                                                                         
<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
<%ID> = fdiv float <%ID>, <%ID>                                                                                         
expected answer:
		<%ID> = fdiv <2 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
		store <2 x double> <%ID>, <2 x double>* <%ID>, align 8                                                                  
		<%ID> = load <2 x double>, <2 x double>* <%ID>, align 8                                                                 
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  

<%ID> = fmul fast float <%ID>, <%ID>                                                                                    
<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fdiv fast float <%ID>, <%ID>                                                                                    
expected answer:
		<%ID> = fdiv fast <2 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fdiv fast float <%ID>, <%ID>                                                                                    
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  

<%ID> = fmul float <%ID>, <%ID>                                                                                         
<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = fdiv float <%ID>, <%ID>                                                                                         
expected answer:
		<%ID> = fdiv <4 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = tail call fast <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>, <4 x double> <%ID>)                   
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>, <4 x double> <%ID>)                        
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             

<%ID> = fmul fast float <%ID>, <%ID>                                                                                    
<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fdiv fast float <%ID>, <%ID>                                                                                    
expected answer:
		<%ID> = fdiv fast <4 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = tail call fast <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>, <4 x double> <%ID>)                   

<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = fmul double <%ID>, <%ID>                                                                                        
<%ID> = fdiv <4 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fdiv double <%ID>, <%ID>                                                                                        
Nearest neighbors:
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
		<%ID> = fdiv <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fadd double <%ID>, <%ID>                                                                                        

<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
<%ID> = fdiv fast <4 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fdiv fast double <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
		<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         
		<%ID> = fsub fast double <%ID>, <%ID>                                                                                   

<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
<%ID> = fdiv <4 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fdiv <2 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fdiv <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = load <2 x double>, <2 x double>* <%ID>, align 8                                                                 
		<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             

<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fdiv fast <4 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fdiv fast <2 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fdiv fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             

<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = fdiv <4 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fdiv <4 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = phi <4 x double> [ zeroinitializer, <%ID> ], [ <%ID>, <%ID> ]                                                   

<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fdiv fast <4 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fdiv fast <4 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>, <4 x double> <%ID>)                        
		<%ID> = tail call fast <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>, <4 x double> <%ID>)                   

<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = fmul double <%ID>, <%ID>                                                                                        
<%ID> = fdiv <8 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fdiv double <%ID>, <%ID>                                                                                        
Nearest neighbors:
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
		<%ID> = fdiv <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fsub double <%ID>, <%ID>                                                                                        
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         
		<%ID> = fadd double <%ID>, <%ID>                                                                                        

<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
<%ID> = fdiv fast <8 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fdiv fast double <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
		<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
		<%ID> = fadd double <%ID>, <%ID>                                                                                        
		<%ID> = fdiv fast <8 x float> <%ID>, <%ID>                                                                              

<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
<%ID> = fdiv <8 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fdiv <2 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fdiv <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = load <2 x double>, <2 x double>* <%ID>, align 8                                                                 

<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fdiv fast <8 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fdiv fast <2 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fdiv fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  

<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = fdiv <8 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fdiv <4 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fdiv <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = phi <4 x double> [ zeroinitializer, <%ID> ], [ <%ID>, <%ID> ]                                                   

<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fdiv fast <8 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fdiv fast <4 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>, <4 x double> <%ID>)                        

<%ID> = fmul double <%ID>, <%ID>                                                                                        
<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
<%ID> = fdiv double <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = fdiv <2 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fdiv double <%ID>, <%ID>                                                                                        
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		store <2 x double> <%ID>, <2 x double>* <%ID>, align 16                                                                 
		store <2 x double> <%ID>, <2 x double>* <%ID>, align 8                                                                  

<%ID> = fmul double <%ID>, <%ID>                                                                                        
<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = fdiv double <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = fdiv <4 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fdiv double <%ID>, <%ID>                                                                                        
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>, <4 x double> <%ID>)                        

<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = fdiv <2 x double> <%ID>, <%ID>                                                                                  
expected answer:
		<%ID> = fdiv <4 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fdiv <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = shufflevector <4 x double> <%ID>, <4 x double> undef, <4 x i32> zeroinitializer                                 
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>, <4 x double> <%ID>)                        

<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fdiv fast <2 x double> <%ID>, <%ID>                                                                             
expected answer:
		<%ID> = fdiv fast <4 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fdiv fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>, <4 x double> <%ID>)                        
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
------------------------------------------------------------------------------------------------------------------------
Floating point / Integer binary operations (type semantic analogy): 84
------------------------------------------------------------------------------------------------------------------------
--- Correct predictions:

<%ID> = add i32 <%ID>, <%ID>                                                                                            
<%ID> = fadd float <%ID>, <%ID>                                                                                         
<%ID> = sub i32 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = fsub float <%ID>, <%ID>                                                                                         
Nearest neighbors:
		<%ID> = fadd float <%ID>, <%ID>                                                                                         
		<%ID> = fsub float <%ID>, <%ID>                                                                                         
		<%ID> = fmul float <%ID>, <%ID>                                                                                         
		<%ID> = fmul float <%ID>, <FLOAT>                                                                                       
		<%ID> = fadd fast float <%ID>, <%ID>                                                                                    

<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = fsub <4 x float> <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fsub <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fsub fast <4 x float> <%ID>, <%ID>                                                                              

<%ID> = add i64 <%ID>, <%ID>                                                                                            
<%ID> = fadd double <%ID>, <%ID>                                                                                        
<%ID> = sub i64 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = fsub double <%ID>, <%ID>                                                                                        
Nearest neighbors:
		<%ID> = fadd double <%ID>, <%ID>                                                                                        
		<%ID> = fsub double <%ID>, <%ID>                                                                                        
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
		<%ID> = sub i64 <%ID>, <%ID>                                                                                            
		<%ID> = fadd fast double <%ID>, <%ID>                                                                                   

<%ID> = add i32 <%ID>, <%ID>                                                                                            
<%ID> = fadd float <%ID>, <%ID>                                                                                         
<%ID> = mul i32 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = fmul float <%ID>, <%ID>                                                                                         
Nearest neighbors:
		<%ID> = fadd float <%ID>, <%ID>                                                                                         
		<%ID> = mul i32 <%ID>, <%ID>                                                                                            
		<%ID> = fsub float <%ID>, <%ID>                                                                                         
		<%ID> = fadd fast float <%ID>, <%ID>                                                                                    
		<%ID> = fmul float <%ID>, <%ID>                                                                                         

<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fsub <4 x float> <%ID>, <%ID>                                                                                   

<%ID> = add <8 x i32> <%ID>, <%ID>                                                                                      
<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = mul <8 x i32> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
		store <8 x float> <%ID>, <8 x float>* <%ID>, align 16                                                                   
		<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = load <8 x float>, <8 x float>* <%ID>, align 16                                                                  

<%ID> = add i64 <%ID>, <%ID>                                                                                            
<%ID> = fadd double <%ID>, <%ID>                                                                                        
<%ID> = mul i64 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
Nearest neighbors:
		<%ID> = fadd double <%ID>, <%ID>                                                                                        
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
		<%ID> = fsub double <%ID>, <%ID>                                                                                        
		<%ID> = mul i64 <%ID>, <%ID>                                                                                            
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         

<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             

<%ID> = sub i32 <%ID>, <%ID>                                                                                            
<%ID> = fsub float <%ID>, <%ID>                                                                                         
<%ID> = mul i32 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = fmul float <%ID>, <%ID>                                                                                         
Nearest neighbors:
		<%ID> = fsub float <%ID>, <%ID>                                                                                         
		<%ID> = mul i32 <%ID>, <%ID>                                                                                            
		<%ID> = fadd float <%ID>, <%ID>                                                                                         
		<%ID> = fmul float <%ID>, <%ID>                                                                                         
		<%ID> = fadd fast float <%ID>, <%ID>                                                                                    

<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
<%ID> = fsub <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fsub <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   

<%ID> = sub i64 <%ID>, <%ID>                                                                                            
<%ID> = fsub double <%ID>, <%ID>                                                                                        
<%ID> = mul i64 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
Nearest neighbors:
		<%ID> = fsub double <%ID>, <%ID>                                                                                        
		<%ID> = fadd double <%ID>, <%ID>                                                                                        
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
		<%ID> = mul i64 <%ID>, <%ID>                                                                                            
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         

--- Incorrect predictions:

<%ID> = add <4 x i64> <%ID>, <%ID>                                                                                      
<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = sub <4 x i64> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = sub <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = shufflevector <4 x double> <%ID>, <4 x double> undef, <4 x i32> zeroinitializer                                 

<%ID> = add i32 <%ID>, <INT>                                                                                            
<%ID> = fadd float <%ID>, <FLOAT>                                                                                       
<%ID> = mul i32 <%ID>, <INT>                                                                                            
expected answer:
		<%ID> = fmul float <%ID>, <FLOAT>                                                                                       
Nearest neighbors:
		<%ID> = fadd float <%ID>, <FLOAT>                                                                                       
		<%ID> = mul i32 <%ID>, <INT>                                                                                            
		<%ID> = fadd fast float <%ID>, <FLOAT>                                                                                  
		<%ID> = bitcast i8* <%ID> to opaque**                                                                                   
		<%ID> = fmul fast float <%ID>, <FLOAT>                                                                                  

<%ID> = add i64 <%ID>, <INT>                                                                                            
<%ID> = fadd double <%ID>, <FLOAT>                                                                                      
<%ID> = mul i64 <%ID>, <INT>                                                                                            
expected answer:
		<%ID> = fmul double <%ID>, <FLOAT>                                                                                      
Nearest neighbors:
		<%ID> = fadd double <%ID>, <FLOAT>                                                                                      
		<%ID> = mul i64 <%ID>, <INT>                                                                                            
		<%ID> = sitofp i32 <%ID> to double                                                                                      
		<%ID> = tail call double <@ID>(double <%ID>)                                                                            
		<%ID> = phi double [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                   

<%ID> = sub <4 x i64> <%ID>, <%ID>                                                                                      
<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      
expected answer:
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = mul <4 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  

<%ID> = sub i64 <INT>, <%ID>                                                                                            
<%ID> = fsub double <FLOAT>, <%ID>                                                                                      
<%ID> = mul i64 <INT>, <%ID>                                                                                            
expected answer:
		<%ID> = fmul double <FLOAT>, <%ID>                                                                                      
Nearest neighbors:
		<%ID> = mul i64 <INT>, <%ID>                                                                                            
		<%ID> = fsub double <FLOAT>, <%ID>                                                                                      
		<%ID> = fsub fast double <FLOAT>, <%ID>                                                                                 
		<%ID> = fcmp une double <%ID>, <FLOAT>                                                                                  
		<%ID> = extractvalue { i64*, i64 } <%ID>, 1                                                                             
------------------------------------------------------------------------------------------------------------------------
Insertelement - Extractelement operations (type): 6720
------------------------------------------------------------------------------------------------------------------------
--- Correct predictions:None
--- Incorrect predictions:

<%ID> = insertelement <2 x float> <%ID>, float <%ID>, <TYP> 1                                                           
<%ID> = insertelement <4 x float> <%ID>, float <%ID>, <TYP> 1                                                           
<%ID> = extractelement <2 x float> <%ID>, <TYP> 1                                                                       
expected answer:
		<%ID> = extractelement <4 x float> <%ID>, <TYP> 1                                                                       
Nearest neighbors:
		<%ID> = insertelement <4 x float> <%ID>, float <%ID>, <TYP> 1                                                           
		<%ID> = insertelement <4 x float> <%ID>, float <%ID>, <TYP> 2                                                           
		<%ID> = extractelement <2 x float> <%ID>, <TYP> 1                                                                       
		<%ID> = insertelement <4 x float> <%ID>, float <%ID>, <TYP> 3                                                           
		<%ID> = load <4 x float>, <4 x float>* <%ID>, align 16                                                                  

<%ID> = insertelement <2 x float> <%ID>, float <%ID>, <TYP> 1                                                           
<%ID> = insertelement <2 x double> <%ID>, double <%ID>, <TYP> 1                                                         
<%ID> = extractelement <2 x float> <%ID>, <TYP> 1                                                                       
expected answer:
		<%ID> = extractelement <2 x double> <%ID>, <TYP> 1                                                                      
Nearest neighbors:
		<%ID> = insertelement <2 x double> <%ID>, double <%ID>, <TYP> 1                                                         
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = shufflevector <2 x double> <%ID>, <2 x double> undef, <2 x i32> zeroinitializer                                 
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             

<%ID> = insertelement <2 x float> <%ID>, float <%ID>, <TYP> 1                                                           
<%ID> = insertelement <4 x double> <%ID>, double <%ID>, <TYP> 1                                                         
<%ID> = extractelement <2 x float> <%ID>, <TYP> 1                                                                       
expected answer:
		<%ID> = extractelement <4 x double> <%ID>, <TYP> 1                                                                      
Nearest neighbors:
		<%ID> = insertelement <4 x double> <%ID>, double <%ID>, <TYP> 1                                                         
		<%ID> = insertelement <4 x double> <%ID>, double <%ID>, <TYP> 2                                                         
		<%ID> = insertelement <4 x double> <%ID>, double <%ID>, <TYP> 3                                                         
		<%ID> = tail call double <@ID>(double <%ID>, double <%ID>, double <%ID>)                                                
		<%ID> = insertelement <4 x double> undef, double <%ID>, <TYP> 0                                                         

<%ID> = insertelement <4 x float> <%ID>, float <%ID>, <TYP> 1                                                           
<%ID> = insertelement <2 x double> <%ID>, double <%ID>, <TYP> 1                                                         
<%ID> = extractelement <4 x float> <%ID>, <TYP> 1                                                                       
expected answer:
		<%ID> = extractelement <2 x double> <%ID>, <TYP> 1                                                                      
Nearest neighbors:
		<%ID> = insertelement <2 x double> <%ID>, double <%ID>, <TYP> 1                                                         
		<%ID> = extractelement <4 x float> <%ID>, <TYP> 1                                                                       
		<%ID> = phi <2 x double> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                             
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             

<%ID> = insertelement <4 x float> <%ID>, float <%ID>, <TYP> 1                                                           
<%ID> = insertelement <4 x double> <%ID>, double <%ID>, <TYP> 1                                                         
<%ID> = extractelement <4 x float> <%ID>, <TYP> 1                                                                       
expected answer:
		<%ID> = extractelement <4 x double> <%ID>, <TYP> 1                                                                      
Nearest neighbors:
		<%ID> = insertelement <4 x double> <%ID>, double <%ID>, <TYP> 1                                                         
		<%ID> = insertelement <4 x double> <%ID>, double <%ID>, <TYP> 2                                                         
		<%ID> = extractelement <4 x float> <%ID>, <TYP> 1                                                                       
		<%ID> = insertelement <4 x double> <%ID>, double <%ID>, <TYP> 3                                                         
		<%ID> = phi double [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                               

<%ID> = insertelement <4 x float> <%ID>, float <%ID>, <TYP> 2                                                           
<%ID> = insertelement <4 x double> <%ID>, double <%ID>, <TYP> 2                                                         
<%ID> = extractelement <4 x float> <%ID>, <TYP> 2                                                                       
expected answer:
		<%ID> = extractelement <4 x double> <%ID>, <TYP> 2                                                                      
Nearest neighbors:
		<%ID> = insertelement <4 x double> <%ID>, double <%ID>, <TYP> 2                                                         
		<%ID> = insertelement <4 x double> <%ID>, double <%ID>, <TYP> 1                                                         
		<%ID> = insertelement <4 x double> <%ID>, double <%ID>, <TYP> 3                                                         
		<%ID> = load <4 x double>, <4 x double>* <%ID>, align 32                                                                
		<%ID> = load <4 x double>, <4 x double>* <%ID>, align 1                                                                 

<%ID> = insertelement <4 x float> <%ID>, float <%ID>, <TYP> 3                                                           
<%ID> = insertelement <4 x double> <%ID>, double <%ID>, <TYP> 3                                                         
<%ID> = extractelement <4 x float> <%ID>, <TYP> 3                                                                       
expected answer:
		<%ID> = extractelement <4 x double> <%ID>, <TYP> 3                                                                      
Nearest neighbors:
		<%ID> = insertelement <4 x double> <%ID>, double <%ID>, <TYP> 3                                                         
		<%ID> = insertelement <4 x double> <%ID>, double <%ID>, <TYP> 2                                                         
		<%ID> = shufflevector <4 x double> <%ID>, <4 x double> undef, <4 x i32> zeroinitializer                                 
		<%ID> = insertelement <4 x double> undef, double <%ID>, <TYP> 0                                                         
		<%ID> = insertelement <4 x double> <%ID>, double <%ID>, <TYP> 1                                                         

<%ID> = insertelement <2 x double> <%ID>, double <%ID>, <TYP> 1                                                         
<%ID> = insertelement <4 x double> <%ID>, double <%ID>, <TYP> 1                                                         
<%ID> = extractelement <2 x double> <%ID>, <TYP> 1                                                                      
expected answer:
		<%ID> = extractelement <4 x double> <%ID>, <TYP> 1                                                                      
Nearest neighbors:
		<%ID> = insertelement <4 x double> <%ID>, double <%ID>, <TYP> 1                                                         
		<%ID> = insertelement <4 x double> <%ID>, double <%ID>, <TYP> 2                                                         
		<%ID> = extractelement <2 x double> <%ID>, <TYP> 1                                                                      
		<%ID> = insertelement <4 x double> <%ID>, double <%ID>, <TYP> 3                                                         
		<%ID> = extractelement <2 x double> <%ID>, <TYP> 0                                                                      
------------------------------------------------------------------------------------------------------------------------
Floating point ops (fast-math analogies): 216
------------------------------------------------------------------------------------------------------------------------
--- Correct predictions:

<%ID> = fadd float <%ID>, <%ID>                                                                                         
<%ID> = fadd fast float <%ID>, <%ID>                                                                                    
<%ID> = fsub float <%ID>, <%ID>                                                                                         
expected answer:
		<%ID> = fsub fast float <%ID>, <%ID>                                                                                    
Nearest neighbors:
		<%ID> = fadd fast float <%ID>, <%ID>                                                                                    
		<%ID> = fsub float <%ID>, <%ID>                                                                                         
		<%ID> = fsub fast float <%ID>, <%ID>                                                                                    
		<%ID> = fmul fast float <%ID>, <%ID>                                                                                    
		<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   

<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fsub <4 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fsub fast <4 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fsub <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fsub fast <4 x float> <%ID>, <%ID>                                                                              
		store <4 x float> <%ID>, <4 x float>* <%ID>, align 16                                                                   
		store <4 x float> <%ID>, <4 x float>* <%ID>, align 4                                                                    

<%ID> = fadd double <%ID>, <%ID>                                                                                        
<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
<%ID> = fsub double <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = fsub fast double <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
		<%ID> = fsub double <%ID>, <%ID>                                                                                        
		<%ID> = fsub fast double <%ID>, <%ID>                                                                                   
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
		<%ID> = fmul double <%ID>, <%ID>                                                                                        

<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  
expected answer:
		<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
		store <2 x double> <%ID>, <2 x double>* <%ID>, align 8                                                                  
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             

<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
expected answer:
		<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
		call void <@ID>({ { { double*, i64 } } }* nonnull dereferenceable(16) <%ID>, { { { { { double*, i64 } } }* }, { { { { double*, i64, i64 } } }* } }* nonnull dereferenceable(16) <%ID>, { i8 }* nonnull dereferenceable(1) <%ID>, i8* null)

<%ID> = fadd float <%ID>, <%ID>                                                                                         
<%ID> = fadd fast float <%ID>, <%ID>                                                                                    
<%ID> = fmul float <%ID>, <%ID>                                                                                         
expected answer:
		<%ID> = fmul fast float <%ID>, <%ID>                                                                                    
Nearest neighbors:
		<%ID> = fadd fast float <%ID>, <%ID>                                                                                    
		<%ID> = fmul float <%ID>, <%ID>                                                                                         
		<%ID> = fsub fast float <%ID>, <%ID>                                                                                    
		<%ID> = fmul fast float <%ID>, <%ID>                                                                                    
		<%ID> = load float, float* <%ID>, align 4                                                                               

<%ID> = fadd float <%ID>, <FLOAT>                                                                                       
<%ID> = fadd fast float <%ID>, <FLOAT>                                                                                  
<%ID> = fmul float <%ID>, <FLOAT>                                                                                       
expected answer:
		<%ID> = fmul fast float <%ID>, <FLOAT>                                                                                  
Nearest neighbors:
		<%ID> = fmul float <%ID>, <FLOAT>                                                                                       
		<%ID> = fadd fast float <%ID>, <FLOAT>                                                                                  
		<%ID> = fmul fast float <%ID>, <FLOAT>                                                                                  
		<%ID> = fcmp uno float <%ID>, <FLOAT>                                                                                   
		store { <{ float*, { i8 } }>, [7 x i8] }* <%ID>, { <{ float*, { i8 } }>, [7 x i8] }** <%ID>, align 8                    

<%ID> = fadd <2 x float> <%ID>, <%ID>                                                                                   
<%ID> = fadd fast <2 x float> <%ID>, <%ID>                                                                              
<%ID> = fmul <2 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fmul fast <2 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fadd fast <2 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul <2 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fmul fast <2 x float> <%ID>, <%ID>                                                                              
		<%ID> = shufflevector <2 x float> <%ID>, <2 x float> undef, <2 x i32> <i32 <INT>, i32 <INT>>                            
		<%ID> = fsub fast <2 x float> <%ID>, <%ID>                                                                              

<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fsub fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = phi <4 x float> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                              

<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = fadd fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fadd fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = load <8 x float>, <8 x float>* <%ID>, align 4                                                                   
		store <8 x float> <%ID>, <8 x float>* <%ID>, align 4                                                                    

<%ID> = fadd double <%ID>, <%ID>                                                                                        
<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
<%ID> = fmul double <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         
		<%ID> = load double, double* <%ID>, align 8                                                                             

<%ID> = fadd double <%ID>, <FLOAT>                                                                                      
<%ID> = fadd fast double <%ID>, <FLOAT>                                                                                 
<%ID> = fmul double <%ID>, <FLOAT>                                                                                      
expected answer:
		<%ID> = fmul fast double <%ID>, <FLOAT>                                                                                 
Nearest neighbors:
		<%ID> = fadd fast double <%ID>, <FLOAT>                                                                                 
		<%ID> = fmul double <%ID>, <FLOAT>                                                                                      
		<%ID> = fmul fast double <%ID>, <FLOAT>                                                                                 
		<%ID> = fadd double <%ID>, <%ID>                                                                                        
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   

<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
expected answer:
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
		store <2 x double> <%ID>, <2 x double>* <%ID>, align 8                                                                  
		<%ID> = extractelement <2 x double> <%ID>, <TYP> 0                                                                      

<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
expected answer:
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = load <4 x double>, <4 x double>* <%ID>, align 1                                                                 
		<%ID> = tail call fast <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>, <4 x double> <%ID>)                   

<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fdiv <4 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fdiv fast <4 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fdiv <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fdiv fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fsub fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = inttoptr i64 <%ID> to <4 x float>*                                                                              

<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = fadd fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fdiv <8 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fdiv fast <8 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fdiv <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fadd fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = fdiv fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = fcmp olt <8 x float> <%ID>, <%ID>                                                                               

<%ID> = fadd double <%ID>, <%ID>                                                                                        
<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
<%ID> = fdiv double <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = fdiv fast double <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fdiv double <%ID>, <%ID>                                                                                        
		<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
		<%ID> = fdiv fast double <%ID>, <%ID>                                                                                   
		<%ID> = extractelement <2 x double> <%ID>, <TYP> 0                                                                      
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   

<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fdiv <2 x double> <%ID>, <%ID>                                                                                  
expected answer:
		<%ID> = fdiv fast <2 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fdiv <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fdiv fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  

<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fdiv <4 x double> <%ID>, <%ID>                                                                                  
expected answer:
		<%ID> = fdiv fast <4 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fdiv <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fdiv fast <4 x double> <%ID>, <%ID>                                                                             
		call void <@ID>(i64 <%ID>, i64 <%ID>, { { double*, i64 } }* nonnull dereferenceable(16) <%ID>, { { double*, i64 } }* nonnull dereferenceable(16) <%ID>, double* <%ID>, i64 <INT>, double <FLOAT>)
		<%ID> = ptrtoint double* <%ID> to i64                                                                                   

<%ID> = fsub float <%ID>, <%ID>                                                                                         
<%ID> = fsub fast float <%ID>, <%ID>                                                                                    
<%ID> = fmul float <%ID>, <%ID>                                                                                         
expected answer:
		<%ID> = fmul fast float <%ID>, <%ID>                                                                                    
Nearest neighbors:
		<%ID> = fsub fast float <%ID>, <%ID>                                                                                    
		<%ID> = fmul float <%ID>, <%ID>                                                                                         
		<%ID> = fmul fast float <%ID>, <%ID>                                                                                    
		<%ID> = load float, float* <%ID>, align 4                                                                               
		<%ID> = fadd fast float <%ID>, <%ID>                                                                                    

<%ID> = fsub <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = fsub fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fsub fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   

<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = fsub fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fsub fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = load <8 x float>, <8 x float>* <%ID>, align 4                                                                   
		<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   

<%ID> = fsub double <%ID>, <%ID>                                                                                        
<%ID> = fsub fast double <%ID>, <%ID>                                                                                   
<%ID> = fmul double <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fsub fast double <%ID>, <%ID>                                                                                   
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
		<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         

<%ID> = fsub double <FLOAT>, <%ID>                                                                                      
<%ID> = fsub fast double <FLOAT>, <%ID>                                                                                 
<%ID> = fmul double <FLOAT>, <%ID>                                                                                      
expected answer:
		<%ID> = fmul fast double <FLOAT>, <%ID>                                                                                 
Nearest neighbors:
		<%ID> = fmul double <FLOAT>, <%ID>                                                                                      
		<%ID> = fmul fast double <FLOAT>, <%ID>                                                                                 
		<%ID> = call double <@ID>(double <FLOAT>, double <%ID>)                                                                 
		<%ID> = fsub fast double <FLOAT>, <%ID>                                                                                 
		<%ID> = fcmp uno double <%ID>, <%ID>                                                                                    

<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  
<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
expected answer:
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  

<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
expected answer:
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = shufflevector <4 x double> <%ID>, <4 x double> undef, <4 x i32> zeroinitializer                                 

<%ID> = fsub <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = fsub fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fdiv <4 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fdiv fast <4 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fdiv <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fsub fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fdiv fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              

<%ID> = fsub double <%ID>, <%ID>                                                                                        
<%ID> = fsub fast double <%ID>, <%ID>                                                                                   
<%ID> = fdiv double <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = fdiv fast double <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fdiv double <%ID>, <%ID>                                                                                        
		<%ID> = fsub fast double <%ID>, <%ID>                                                                                   
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
		<%ID> = fdiv fast double <%ID>, <%ID>                                                                                   
		<%ID> = bitcast i64 <%ID> to double                                                                                     

<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  
<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fdiv <2 x double> <%ID>, <%ID>                                                                                  
expected answer:
		<%ID> = fdiv fast <2 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fdiv <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fdiv fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = phi i64 [ 0, <%ID> ], [ 2, <%ID> ]                                                                              
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             

<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fdiv <4 x double> <%ID>, <%ID>                                                                                  
expected answer:
		<%ID> = fdiv fast <4 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fdiv <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fdiv fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = tail call fast <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>, <4 x double> <%ID>)                   
		<%ID> = call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>, <4 x double> <%ID>)                             

<%ID> = fmul float <%ID>, <%ID>                                                                                         
<%ID> = fmul fast float <%ID>, <%ID>                                                                                    
<%ID> = fdiv float <%ID>, <%ID>                                                                                         
expected answer:
		<%ID> = fdiv fast float <%ID>, <%ID>                                                                                    
Nearest neighbors:
		<%ID> = fdiv float <%ID>, <%ID>                                                                                         
		<%ID> = fmul fast float <%ID>, <%ID>                                                                                    
		<%ID> = fsub fast float <%ID>, <%ID>                                                                                    
		<%ID> = fdiv fast float <%ID>, <%ID>                                                                                    
		<%ID> = trunc i64 <%ID> to i32                                                                                          

<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fdiv <4 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fdiv fast <4 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fdiv <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fdiv fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fsub fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = phi <4 x float> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                              

<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fdiv <8 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fdiv fast <8 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fdiv <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = fdiv fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = fcmp olt <8 x float> <%ID>, <%ID>                                                                               
		<%ID> = phi <8 x float> [ zeroinitializer, <%ID> ], [ <%ID>, <%ID> ]                                                    

<%ID> = fmul double <%ID>, <%ID>                                                                                        
<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
<%ID> = fdiv double <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = fdiv fast double <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fdiv double <%ID>, <%ID>                                                                                        
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
		<%ID> = fsub fast double <%ID>, <%ID>                                                                                   
		<%ID> = fdiv fast double <%ID>, <%ID>                                                                                   
		<%ID> = fadd fast double <%ID>, <%ID>                                                                                   

<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fdiv <2 x double> <%ID>, <%ID>                                                                                  
expected answer:
		<%ID> = fdiv fast <2 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fdiv <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fdiv fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = phi i64 [ 0, <%ID> ], [ 2, <%ID> ]                                                                              
		<%ID> = phi i64 [ 2, <%ID> ], [ 0, <%ID> ]                                                                              

<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fdiv <4 x double> <%ID>, <%ID>                                                                                  
expected answer:
		<%ID> = fdiv fast <4 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fdiv <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fdiv fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = ptrtoint double* <%ID> to i64                                                                                   
		<%ID> = load i64, i64* <%ID>, align 16                                                                                  

--- Incorrect predictions:

<%ID> = fadd <2 x float> <%ID>, <%ID>                                                                                   
<%ID> = fadd fast <2 x float> <%ID>, <%ID>                                                                              
<%ID> = fsub <2 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fsub fast <2 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fadd fast <2 x float> <%ID>, <%ID>                                                                              
		<%ID> = fsub <2 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fmul fast <2 x float> <%ID>, <%ID>                                                                              
		<%ID> = shufflevector <2 x float> <%ID>, <2 x float> <%ID>, <2 x i32> <i32 <INT>, i32 <INT>>                            
		<%ID> = shufflevector <2 x float> <%ID>, <2 x float> undef, <2 x i32> <i32 <INT>, i32 <INT>>                            

<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = fadd fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fsub fast <8 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fadd fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = load <8 x float>, <8 x float>* <%ID>, align 4                                                                   
		<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
		store <8 x float> <%ID>, <8 x float>* <%ID>, align 4                                                                    

<%ID> = fadd float <%ID>, <%ID>                                                                                         
<%ID> = fadd fast float <%ID>, <%ID>                                                                                    
<%ID> = fdiv float <%ID>, <%ID>                                                                                         
expected answer:
		<%ID> = fdiv fast float <%ID>, <%ID>                                                                                    
Nearest neighbors:
		<%ID> = fdiv float <%ID>, <%ID>                                                                                         
		<%ID> = fadd fast float <%ID>, <%ID>                                                                                    
		<%ID> = bitcast <{ { { float*, { i8 }, { i64 } } }, { { i8 }, { i8 } }, [6 x i8] }>* <%ID> to i64*                      
		<%ID> = fsub fast float <%ID>, <%ID>                                                                                    
		<%ID> = uitofp i64 <%ID> to float                                                                                       

<%ID> = fsub float <FLOAT>, <%ID>                                                                                       
<%ID> = fsub fast float <FLOAT>, <%ID>                                                                                  
<%ID> = fmul float <FLOAT>, <%ID>                                                                                       
expected answer:
		<%ID> = fmul fast float <FLOAT>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fmul float <FLOAT>, <%ID>                                                                                       
		<%ID> = fcmp uno float <%ID>, <%ID>                                                                                     
		<%ID> = call fast float <@ID>(float <%ID>, float <%ID>)                                                                 
		<%ID> = call float <@ID>(float <%ID>, float <%ID>)                                                                      
		<%ID> = fsub fast float <FLOAT>, <%ID>                                                                                  

<%ID> = fsub <2 x float> <%ID>, <%ID>                                                                                   
<%ID> = fsub fast <2 x float> <%ID>, <%ID>                                                                              
<%ID> = fmul <2 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fmul fast <2 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fsub fast <2 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul <2 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fadd fast <2 x float> <%ID>, <%ID>                                                                              
		<%ID> = fsub fast float <%ID>, <%ID>                                                                                    
		<%ID> = fadd <2 x float> <%ID>, <%ID>                                                                                   

<%ID> = fsub float <%ID>, <%ID>                                                                                         
<%ID> = fsub fast float <%ID>, <%ID>                                                                                    
<%ID> = fdiv float <%ID>, <%ID>                                                                                         
expected answer:
		<%ID> = fdiv fast float <%ID>, <%ID>                                                                                    
Nearest neighbors:
		<%ID> = fdiv float <%ID>, <%ID>                                                                                         
		<%ID> = fsub fast float <%ID>, <%ID>                                                                                    
		store { opaque* }* <%ID>, { opaque* }** <%ID>, align 8                                                                  
		<%ID> = icmp eq { opaque* }* <%ID>, null                                                                                
		store { opaque* }* null, { opaque* }** <%ID>, align 8                                                                   

<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = fsub fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fdiv <8 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fdiv fast <8 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fdiv <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fsub fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = fcmp olt <8 x float> <%ID>, <%ID>                                                                               
		<%ID> = load <8 x float>, <8 x float>* <%ID>, align 4                                                                   
------------------------------------------------------------------------------------------------------------------------
Insertelement - Extractelement operations (index analogy): 2352
------------------------------------------------------------------------------------------------------------------------
--- Correct predictions:

<%ID> = insertelement <4 x float> <%ID>, float <%ID>, <TYP> 1                                                           
<%ID> = insertelement <4 x float> <%ID>, float <%ID>, <TYP> 3                                                           
<%ID> = extractelement <4 x float> <%ID>, <TYP> 1                                                                       
expected answer:
		<%ID> = extractelement <4 x float> <%ID>, <TYP> 3                                                                       
Nearest neighbors:
		<%ID> = extractelement <4 x float> <%ID>, <TYP> 1                                                                       
		<%ID> = extractelement <4 x float> <%ID>, <TYP> 0                                                                       
		<%ID> = extractelement <4 x float> <%ID>, <TYP> 3                                                                       
		<%ID> = extractelement <4 x float> <%ID>, <TYP> 2                                                                       
		<%ID> = phi <4 x float> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                              

<%ID> = insertelement <4 x float> <%ID>, float <%ID>, <TYP> 2                                                           
<%ID> = insertelement <4 x float> <%ID>, float <%ID>, <TYP> 3                                                           
<%ID> = extractelement <4 x float> <%ID>, <TYP> 2                                                                       
expected answer:
		<%ID> = extractelement <4 x float> <%ID>, <TYP> 3                                                                       
Nearest neighbors:
		<%ID> = extractelement <4 x float> <%ID>, <TYP> 2                                                                       
		<%ID> = extractelement <4 x float> <%ID>, <TYP> 3                                                                       
		<%ID> = insertelement <4 x float> <%ID>, float <%ID>, <TYP> 3                                                           
		<%ID> = extractelement <4 x float> <%ID>, <TYP> 1                                                                       
		<%ID> = phi <4 x float> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                            

<%ID> = insertelement <4 x double> <%ID>, double <%ID>, <TYP> 1                                                         
<%ID> = insertelement <4 x double> <%ID>, double <%ID>, <TYP> 2                                                         
<%ID> = extractelement <4 x double> <%ID>, <TYP> 1                                                                      
expected answer:
		<%ID> = extractelement <4 x double> <%ID>, <TYP> 2                                                                      
Nearest neighbors:
		<%ID> = extractelement <4 x double> <%ID>, <TYP> 1                                                                      
		<%ID> = extractelement <4 x double> <%ID>, <TYP> 2                                                                      
		<%ID> = extractelement <4 x double> <%ID>, <TYP> 3                                                                      
		<%ID> = extractelement <4 x double> <%ID>, <TYP> 0                                                                      
		<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  

<%ID> = insertelement <4 x double> <%ID>, double <%ID>, <TYP> 1                                                         
<%ID> = insertelement <4 x double> <%ID>, double <%ID>, <TYP> 3                                                         
<%ID> = extractelement <4 x double> <%ID>, <TYP> 1                                                                      
expected answer:
		<%ID> = extractelement <4 x double> <%ID>, <TYP> 3                                                                      
Nearest neighbors:
		<%ID> = extractelement <4 x double> <%ID>, <TYP> 1                                                                      
		<%ID> = extractelement <4 x double> <%ID>, <TYP> 2                                                                      
		<%ID> = extractelement <4 x double> <%ID>, <TYP> 3                                                                      
		<%ID> = extractelement <4 x double> <%ID>, <TYP> 0                                                                      
		<%ID> = insertelement <4 x double> <%ID>, double <%ID>, <TYP> 3                                                         

<%ID> = insertelement <4 x double> <%ID>, double <%ID>, <TYP> 2                                                         
<%ID> = insertelement <4 x double> <%ID>, double <%ID>, <TYP> 3                                                         
<%ID> = extractelement <4 x double> <%ID>, <TYP> 2                                                                      
expected answer:
		<%ID> = extractelement <4 x double> <%ID>, <TYP> 3                                                                      
Nearest neighbors:
		<%ID> = extractelement <4 x double> <%ID>, <TYP> 2                                                                      
		<%ID> = extractelement <4 x double> <%ID>, <TYP> 1                                                                      
		<%ID> = extractelement <4 x double> <%ID>, <TYP> 3                                                                      
		<%ID> = extractelement <4 x double> <%ID>, <TYP> 0                                                                      
		<%ID> = insertelement <4 x double> <%ID>, double <%ID>, <TYP> 3                                                         

--- Incorrect predictions:

<%ID> = insertelement <4 x float> <%ID>, float <%ID>, <TYP> 1                                                           
<%ID> = insertelement <4 x float> <%ID>, float <%ID>, <TYP> 2                                                           
<%ID> = extractelement <4 x float> <%ID>, <TYP> 1                                                                       
expected answer:
		<%ID> = extractelement <4 x float> <%ID>, <TYP> 2                                                                       
Nearest neighbors:
		<%ID> = extractelement <4 x float> <%ID>, <TYP> 1                                                                       
		<%ID> = extractelement <4 x float> <%ID>, <TYP> 0                                                                       
		<%ID> = extractelement <4 x float> <%ID>, <TYP> 3                                                                       
		<%ID> = phi <4 x float> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                              
		<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
------------------------------------------------------------------------------------------------------------------------
Insertvalue - Extractvalue operations (index analogy): 4
------------------------------------------------------------------------------------------------------------------------
--- Correct predictions:

<%ID> = insertvalue { double, double } undef, double <%ID>, 0                                                           
<%ID> = insertvalue { double, double } <%ID>, double <%ID>, 1                                                           
<%ID> = extractvalue { double, double } <%ID>, 0                                                                        
expected answer:
		<%ID> = extractvalue { double, double } <%ID>, 1                                                                        
Nearest neighbors:
		<%ID> = extractvalue { double, double } <%ID>, 0                                                                        
		<%ID> = extractvalue { double, double } <%ID>, 1                                                                        
		<%ID> = call { double, double } <@ID>({ double, double }* nonnull dereferenceable(16) <%ID>, { double, double }* nonnull dereferenceable(16) <%ID>)
		<%ID> = insertvalue { double, double } <%ID>, double <%ID>, 1                                                           
		<%ID> = call { double, double } <@ID>({ double, double }* dereferenceable(16) <%ID>, { double, double }* nonnull dereferenceable(16) <%ID>)

<%ID> = insertvalue { float*, i64 } undef, float* <%ID>, 0                                                              
<%ID> = extractvalue { float*, i64 } <%ID>, 0                                                                           
<%ID> = insertvalue { float*, i64 } <%ID>, i64 <%ID>, 1                                                                 
expected answer:
		<%ID> = extractvalue { float*, i64 } <%ID>, 1                                                                           
Nearest neighbors:
		<%ID> = extractvalue { float*, i64 } <%ID>, 0                                                                           
		<%ID> = extractvalue { float*, i64 } <%ID>, 1                                                                           
		<%ID> = insertvalue { float*, i64 } <%ID>, i64 <%ID>, 1                                                                 
		<%ID> = extractvalue { i8*, i64 } <%ID>, 0                                                                              
		<%ID> = bitcast { float*, { { [1 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { float*, { { [1 x i64] } } }* }* <%ID> to i64*

<%ID> = insertvalue { i32*, i64 } undef, i32* <%ID>, 0                                                                  
<%ID> = extractvalue { i32*, i64 } <%ID>, 0                                                                             
<%ID> = insertvalue { i32*, i64 } <%ID>, i64 <%ID>, 1                                                                   
expected answer:
		<%ID> = extractvalue { i32*, i64 } <%ID>, 1                                                                             
Nearest neighbors:
		<%ID> = extractvalue { i32*, i64 } <%ID>, 0                                                                             
		<%ID> = extractvalue { i32*, i64 } <%ID>, 1                                                                             
		<%ID> = insertvalue { i32*, i64 } <%ID>, i64 <%ID>, 1                                                                   
		<%ID> = extractvalue { float*, i64 } <%ID>, 0                                                                           
		<%ID> = extractvalue { float*, i64 } <%ID>, 1                                                                           

<%ID> = insertvalue { i8*, i32 } undef, i8* <%ID>, 0                                                                    
<%ID> = extractvalue { i8*, i32 } <%ID>, 0                                                                              
<%ID> = insertvalue { i8*, i32 } <%ID>, i32 <%ID>, 1                                                                    
expected answer:
		<%ID> = extractvalue { i8*, i32 } <%ID>, 1                                                                              
Nearest neighbors:
		<%ID> = extractvalue { i8*, i32 } <%ID>, 0                                                                              
		<%ID> = insertvalue { i8*, i32 } <%ID>, i32 <%ID>, 1                                                                    
		<%ID> = extractvalue { i8*, i32 } <%ID>, 1                                                                              
		<%ID> = landingpad { i8*, i32 }
 cleanup                                                                                
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     

--- Incorrect predictions:None------------------------------------------------------------------------------------------------------------------------
Bitcast x to y - y to x (inverse operations analogy): 1275
------------------------------------------------------------------------------------------------------------------------
--- Correct predictions:

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
expected answer:
		<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
Nearest neighbors:
		<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = insertelement <2 x float> <%ID>, float <%ID>, <TYP> 1                                                           
		store <2 x float> <%ID>, <2 x float>* <%ID>, align 8                                                                    
		<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
expected answer:
		<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
Nearest neighbors:
		<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
		<%ID> = getelementptr inbounds { { i64*, i64 } }, { { i64*, i64 } }* <%ID>, i32 <INT>, i32 <INT>                        
		<%ID> = load { { i64*, i64 } }*, { { i64*, i64 } }** <%ID>, align 8                                                     
		<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
		store { { i64*, i64 } }* <%ID>, { { i64*, i64 } }** <%ID>, align 8                                                      

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
Nearest neighbors:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = phi <2 x double> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                           
		<%ID> = phi <2 x double> [ zeroinitializer, <%ID> ], [ <%ID>, <%ID> ]                                                   

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = bitcast <2 x i64> <%ID> to <4 x float>                                                                          
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = shufflevector <2 x i64> <%ID>, <2 x i64> <%ID>, <2 x i32> <i32 <INT>, i32 <INT>>                                
		<%ID> = load <4 x i32>, <4 x i32>* <%ID>, align 1                                                                       
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast <2 x i64> <%ID> to <4 x float>                                                                          

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
expected answer:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = and <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
expected answer:
		<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
Nearest neighbors:
		<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = insertelement <2 x float> <%ID>, float <%ID>, <TYP> 1                                                           
		<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
		store <2 x float> <%ID>, <2 x float>* <%ID>, align 8                                                                    

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
expected answer:
		<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
Nearest neighbors:
		<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
		<%ID> = getelementptr inbounds { { i64*, i64 } }, { { i64*, i64 } }* <%ID>, i32 <INT>, i32 <INT>                        
		store { { i64*, i64 } }* <%ID>, { { i64*, i64 } }** <%ID>, align 8                                                      
		<%ID> = load { { i64*, i64 } }*, { { i64*, i64 } }** <%ID>, align 8                                                     
		<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = extractelement <4 x i32> <%ID>, <TYP> 3                                                                         

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = shufflevector <2 x i64> <%ID>, <2 x i64> <%ID>, <2 x i32> <i32 <INT>, i32 <INT>>                                
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
expected answer:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = load <8 x float>, <8 x float>* <%ID>, align 16                                                                  
		<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
expected answer:
		<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
Nearest neighbors:
		<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
		<%ID> = getelementptr inbounds { { i64*, i64 } }, { { i64*, i64 } }* <%ID>, i32 <INT>, i32 <INT>                        
		store { i64*, i64 }* <%ID>, { i64*, i64 }** <%ID>, align 8                                                              
		<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
		<%ID> = load { i64*, i64 }*, { i64*, i64 }** <%ID>, align 8                                                             

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
Nearest neighbors:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> undef, <4 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef>      
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> <%ID>, <4 x i32> <i32 <INT>, i32 undef, i32 undef, i32 <INT>>      
		<%ID> = phi <2 x double> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                           
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = insertelement <4 x i32> <<TYP> undef, <TYP> 0, <TYP> 0, <TYP> 0>, <TYP> <%ID>, <TYP> 0                          
		<%ID> = shufflevector <4 x i32> <%ID>, <4 x i32> undef, <4 x i32> zeroinitializer                                       
		<%ID> = extractelement <4 x i32> <%ID>, <TYP> 3                                                                         

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		<%ID> = shufflevector <2 x i64> <%ID>, <2 x i64> <%ID>, <2 x i32> <i32 <INT>, i32 <INT>>                                
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = load <4 x i32>, <4 x i32>* <%ID>, align 1                                                                       

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
expected answer:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            
		<%ID> = tail call fast <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                       
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
		<%ID> = bitcast { double, double }* <%ID> to <4 x double>*                                                              

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
expected answer:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = bitcast { i32*, { { [5 x i64] } } }* <%ID> to i64*                                                              

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
expected answer:
		<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
Nearest neighbors:
		<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
		<%ID> = bitcast <2 x float>* <%ID> to i8*                                                                               
		<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
expected answer:
		<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
Nearest neighbors:
		<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
		<%ID> = getelementptr inbounds { { i64*, i64 } }, { { i64*, i64 } }* <%ID>, i32 <INT>, i32 <INT>                        
		store { { i64*, i64 } }* <%ID>, { { i64*, i64 } }** <%ID>, align 8                                                      
		<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
		invoke void <@ID>({ i8 }* <%ID>, { i64*, i64 }* dereferenceable(16) <%ID>, i64* <%ID>, i64* <%ID>, i64 <%ID>, i64 <%ID>, i64 <%ID>, i64 <%ID>, i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>)
 to label <%ID> unwind label <%ID>

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
		<%ID> = load { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }** <%ID>, align 8             
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
		invoke void <@ID>({ { { { { { { i64, i64, i8* } } } } } }* }* nonnull <%ID>, { { { { { { i64, i64, i8* } } } } } }* nonnull <%ID>)
 to label <%ID> unwind label <%ID>

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
Nearest neighbors:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> undef, <4 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef>      
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = phi <2 x double> [ zeroinitializer, <%ID> ], [ <%ID>, <%ID> ]                                                   
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       
		<%ID> = phi i64 [ 0, <%ID> ], [ 8, <%ID> ]                                                                              

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
expected answer:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
		<%ID> = xor <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = shufflevector <2 x double> <%ID>, <2 x double> undef, <4 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>    
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		<%ID> = shufflevector <2 x i64> <%ID>, <2 x i64> <%ID>, <2 x i32> <i32 <INT>, i32 <INT>>                                
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
expected answer:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
		<%ID> = tail call <8 x float> <@ID>(<8 x float> <%ID>, <8 x float> <%ID>, <8 x float> <float <FLOAT>, float <FLOAT>, float <FLOAT>, float <FLOAT>, float <FLOAT>, float <FLOAT>, float <FLOAT>, float <FLOAT>>)
		<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
		<%ID> = load <4 x i32>, <4 x i32>* <%ID>, align 1                                                                       

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
expected answer:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = bitcast <4 x i32> <%ID> to <2 x double>                                                                         
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> <%ID>, <4 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>      
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
expected answer:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
		<%ID> = xor <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = load <8 x float>, <8 x float>* <%ID>, align 16                                                                  

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
expected answer:
		<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
Nearest neighbors:
		<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
		<%ID> = load { float, float }*, { float, float }** <%ID>, align 8                                                       
		<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
		store { float, float }* <%ID>, { float, float }** <%ID>, align 8                                                        
		<%ID> = bitcast <2 x float>* <%ID> to i8*                                                                               

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
		<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = mul nsw i64 <%ID>, <INT>                                                                                        

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
expected answer:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = tail call <8 x float> <@ID>(<8 x float> <%ID>, <8 x float> <%ID>, <8 x float> <float <FLOAT>, float <FLOAT>, float <FLOAT>, float <FLOAT>, float <FLOAT>, float <FLOAT>, float <FLOAT>, float <FLOAT>>)
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
		<%ID> = bitcast { i8*, { { [1 x i64] } } }* <%ID> to i8*                                                                

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
expected answer:
		<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
Nearest neighbors:
		<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
		<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
		<%ID> = alloca { float, float }, align 4                                                                                

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
Nearest neighbors:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> undef, <4 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef>      
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = fadd <2 x double> <%ID>, zeroinitializer                                                                        

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
expected answer:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> <%ID>, <4 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>      
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = shufflevector <2 x double> <%ID>, <2 x double> undef, <2 x i32> zeroinitializer                                 

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
expected answer:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = and <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
expected answer:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = xor <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   
		<%ID> = tail call <8 x float> <@ID>(<8 x float> <%ID>, <8 x float> <%ID>, <8 x float> <float <FLOAT>, float <FLOAT>, float <FLOAT>, float <FLOAT>, float <FLOAT>, float <FLOAT>, float <FLOAT>, float <FLOAT>>)

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
expected answer:
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
		<%ID> = phi { float, float }* [ <%ID>, <%ID> ], [ null, <%ID> ]                                                         
		call void <%ID>({ i32 (...)** }* nonnull <%ID>)                                                                         

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
Nearest neighbors:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> undef, <4 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef>      

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = load <4 x i32>, <4 x i32>* <%ID>, align 1                                                                       
		<%ID> = getelementptr inbounds { { double*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { double*, { { [5 x i64] } } }* }, { { i8 }, { { [5 x i64] }, { { [5 x i64] } }, { [5 x i64] }, { [5 x i64] }, { double*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { double*, { { [5 x i64] } } }* } }, { double*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { double*, { { [5 x i64] } } }* } } }, { { double*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { double*, { { [5 x i64] } } }* }, { { i8 }, { { [5 x i64] }, { { [5 x i64] } }, { [5 x i64] }, { [5 x i64] }, { double*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { double*, { { [5 x i64] } } }* } }, { double*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { double*, { { [5 x i64] } } }* } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i64 <INT>

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
expected answer:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = bitcast <4 x i32> <%ID> to <2 x double>                                                                         
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = bitcast <16 x i8> <%ID> to <4 x float>                                                                          

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
expected answer:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = and <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         

<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
Nearest neighbors:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> undef, <4 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef>      
		<%ID> = phi <2 x double> [ zeroinitializer, <%ID> ], [ <%ID>, <%ID> ]                                                   
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = phi <2 x double> [ <%ID>, <%ID> ], [ zeroinitializer, <%ID> ]                                                   

<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = bitcast <2 x i64> <%ID> to <4 x float>                                                                          

<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
expected answer:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
		<%ID> = xor <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = and <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = getelementptr inbounds { double, double }, { double, double }* <%ID>, i64 <INT>                                 

<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
expected answer:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> <%ID>, <4 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>      
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = phi <2 x double> [ <%ID>, <%ID> ], [ zeroinitializer, <%ID> ]                                                   
		<%ID> = phi <4 x float> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]        

<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
expected answer:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = xor <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   
		<%ID> = tail call <8 x float> <@ID>(<8 x float> <%ID>, <8 x float> <%ID>, <8 x float> <float <FLOAT>, float <FLOAT>, float <FLOAT>, float <FLOAT>, float <FLOAT>, float <FLOAT>, float <FLOAT>, float <FLOAT>>)
		<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 

<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
expected answer:
		<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
Nearest neighbors:
		<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
		<%ID> = getelementptr inbounds { { i64*, i64 } }, { { i64*, i64 } }* <%ID>, i32 <INT>, i32 <INT>                        
		<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
		<%ID> = load { { i64*, i64 } }*, { { i64*, i64 } }** <%ID>, align 8                                                     
		invoke void <@ID>({ i8 }* <%ID>, { i64*, i64 }* dereferenceable(16) <%ID>, i64* <%ID>, i64* <%ID>, i64 <%ID>, i64 <%ID>, i64 <%ID>, i64 <%ID>, i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>)
 to label <%ID> unwind label <%ID>

<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
Nearest neighbors:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = bitcast float* <%ID> to <16 x i8>*                                                                              
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       

<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = load <4 x i32>, <4 x i32>* <%ID>, align 1                                                                       

<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
expected answer:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = phi <4 x float> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]        

<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
expected answer:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            
		<%ID> = and <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         

<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		<%ID> = load <4 x i32>, <4 x i32>* <%ID>, align 1                                                                       
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = phi <2 x i64> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                

<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
expected answer:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
		<%ID> = xor <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = getelementptr inbounds { double, double }, { double, double }* <%ID>, i64 <INT>                                 
		<%ID> = bitcast { double, double }* <%ID> to <4 x double>*                                                              
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         

<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
expected answer:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = phi <16 x i8> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> <%ID>, <4 x i32> <i32 <INT>, i32 undef, i32 undef, i32 <INT>>      
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = load <2 x double>, <2 x double>* <%ID>, align 1                                                                 

<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
expected answer:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = xor <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   
		<%ID> = tail call <8 x float> <@ID>(<8 x float> <%ID>, <8 x float> <%ID>, <8 x float> <float <FLOAT>, float <FLOAT>, float <FLOAT>, float <FLOAT>, float <FLOAT>, float <FLOAT>, float <FLOAT>, float <FLOAT>>)
		<%ID> = load <8 x float>, <8 x float>* <%ID>, align 16                                                                  

<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
expected answer:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = tail call <8 x float> <@ID>(<8 x float> <%ID>, <8 x float> <%ID>)                                               
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = and <8 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = getelementptr inbounds { { i8*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { i8*, { { [5 x i64] } } }* }, { { i8 }, { { [5 x i64] }, { { [5 x i64] } }, { [5 x i64] }, { [5 x i64] }, { i8*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { i8*, { { [5 x i64] } } }* } }, { { [5 x i64] }, { { [5 x i64] } }, { [5 x i64] }, { [5 x i64] }, { i8*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { i8*, { { [5 x i64] } } }* } } } }, { { i8*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { i8*, { { [5 x i64] } } }* }, { { i8 }, { { [5 x i64] }, { { [5 x i64] } }, { [5 x i64] }, { [5 x i64] }, { i8*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { i8*, { { [5 x i64] } } }* } }, { { [5 x i64] }, { { [5 x i64] } }, { [5 x i64] }, { [5 x i64] }, { i8*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { i8*, { { [5 x i64] } } }* } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i64 <INT>

<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		<%ID> = load i16, i16* <%ID>, align 2                                                                                   
		store i16 <%ID>, i16* <%ID>, align 2                                                                                    
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
		<%ID> = phi i16* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                     

<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
Nearest neighbors:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
		<%ID> = load { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }** <%ID>, align 8             
		store { { { { { { i64, i64, i8* } } } } } }* bitcast ({ { i64, [16 x i8] } }* <@ID> to { { { { { { i64, i64, i8* } } } } } }*), { { { { { { i64, i64, i8* } } } } } }** <%ID>, align 8
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     

<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
		<%ID> = phi <2 x i64> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                              
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            

<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
expected answer:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = phi <16 x i8> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> <%ID>, <4 x i32> <i32 <INT>, i32 undef, i32 undef, i32 <INT>>      

<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
		<%ID> = shufflevector <2 x i64> <%ID>, <2 x i64> <%ID>, <2 x i32> <i32 <INT>, i32 <INT>>                                
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            

<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = extractelement <4 x i32> <%ID>, <TYP> 0                                                                         

<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
expected answer:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = phi <16 x i8> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> <%ID>, <4 x i32> <i32 <INT>, i32 undef, i32 undef, i32 <INT>>      

<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
expected answer:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = and <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      

<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
expected answer:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
		<%ID> = xor <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   
		<%ID> = and <8 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          

<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
		<%ID> = phi i8* [ <%ID>, <%ID> ]                                                                                        
		<%ID> = getelementptr inbounds { i8, i8, i8, i8 }, { i8, i8, i8, i8 }* <%ID>, i64 <INT>, i32 <INT>                      

<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
Nearest neighbors:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> undef, <4 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef>      
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> <%ID>, <4 x i32> <i32 <INT>, i32 undef, i32 undef, i32 <INT>>      

<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
expected answer:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> <%ID>, <4 x i32> <i32 <INT>, i32 undef, i32 undef, i32 <INT>>      
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> <%ID>, <4 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>      
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       

<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = icmp slt <4 x i32> <%ID>, <%ID>                                                                                 
		<%ID> = phi i128 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                     

<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
expected answer:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
		<%ID> = xor <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = phi <4 x i64> [ <%ID>, <%ID> ], [ zeroinitializer, <%ID> ]                                                      

<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast i32* <%ID> to <4 x i32>*                                                                                
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		<%ID> = shufflevector <2 x i64> <%ID>, <2 x i64> <%ID>, <2 x i32> <i32 <INT>, i32 <INT>>                                

<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
expected answer:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = tail call fast <8 x float> <@ID>(<8 x float> <%ID>, <8 x float> <%ID>)                                          
		<%ID> = xor <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   

<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
Nearest neighbors:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = phi i64 [ 0, <%ID> ], [ 4, <%ID> ]                                                                              
		<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  

<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast <2 x i64> <%ID> to <4 x float>                                                                          
		<%ID> = load <4 x i32>, <4 x i32>* <%ID>, align 1                                                                       

<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
expected answer:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = bitcast { i8 }* <%ID> to { { { { double*, i64 } } }* }*                                                         
		<%ID> = phi i1 [ <%ID>, <%ID> ], [ true, <%ID> ]                                                                        
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
Nearest neighbors:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> undef, <4 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef>      
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = phi <2 x double> [ zeroinitializer, <%ID> ], [ <%ID>, <%ID> ]                                                   

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
Nearest neighbors:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> undef, <4 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef>      
		<%ID> = phi <2 x double> [ zeroinitializer, <%ID> ], [ <%ID>, <%ID> ]                                                   
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       
		<%ID> = load <4 x i32>, <4 x i32>* <%ID>, align 1                                                                       

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
expected answer:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
		<%ID> = xor <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = phi { double, double }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                      

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = shufflevector <2 x i64> <%ID>, <2 x i64> <%ID>, <2 x i32> <i32 <INT>, i32 <INT>>                                
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            

<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
Nearest neighbors:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> undef, <4 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef>      
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> <%ID>, <4 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>      

<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast <2 x i64> <%ID> to <4 x float>                                                                          
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     

<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
expected answer:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> <%ID>, <4 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>      
		<%ID> = bitcast <4 x i32> <%ID> to <2 x double>                                                                         
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     

<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
		<%ID> = shufflevector <2 x i64> <%ID>, <2 x i64> <%ID>, <2 x i32> <i32 <INT>, i32 <INT>>                                
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                

<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		<%ID> = extractelement <4 x i32> <%ID>, <TYP> 3                                                                         
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = insertelement <4 x i32> <<TYP> undef, <TYP> 0, <TYP> 0, <TYP> 0>, <TYP> <%ID>, <TYP> 0                          

<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
expected answer:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = bitcast float* <%ID> to <4 x float>*                                                                            

<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
		<%ID> = phi i16* [ <%ID>, <%ID> ], [ null, <%ID> ]                                                                      
		<%ID> = getelementptr i8, i8* <%ID>, i64 <INT>                                                                          

<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
Nearest neighbors:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = shufflevector <16 x i8> <%ID>, <16 x i8> <%ID>, <16 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> undef, <4 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef>      

<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
expected answer:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            
		<%ID> = bitcast i32* <%ID> to <16 x i8>*                                                                                

<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = shufflevector <2 x i64> <%ID>, <2 x i64> <%ID>, <2 x i32> <i32 <INT>, i32 <INT>>                                
		<%ID> = bitcast i32* <%ID> to <4 x i32>*                                                                                
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            

<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = shufflevector <16 x i8> <%ID>, <16 x i8> <%ID>, <16 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>
		<%ID> = bitcast i32* <%ID> to <16 x i8>*                                                                                

<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = bitcast <2 x i64> <%ID> to <4 x float>                                                                          
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = load <4 x i32>, <4 x i32>* <%ID>, align 1                                                                       

<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
expected answer:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
		<%ID> = xor <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = load { { double, double }*, { i8 }, { i64 } }*, { { double, double }*, { i8 }, { i64 } }** <%ID>, align 8       
		<%ID> = shufflevector <2 x double> <%ID>, <2 x double> undef, <4 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>    
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         

<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
expected answer:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = and <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = tail call fast <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                       
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         

<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast double <%ID> to i64                                                                                     
expected answer:
		<%ID> = bitcast i64 <%ID> to double                                                                                     
Nearest neighbors:
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = bitcast i64 <%ID> to double                                                                                     
		<%ID> = select i1 <%ID>, double <%ID>, double <%ID>                                                                     
		<%ID> = or i1 <%ID>, <%ID>                                                                                              

<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
expected answer:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = load <8 x i32>, <8 x i32>* <%ID>, align 4                                                                       
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		define linkonce_odr void <@ID>({ { i64, [120 x i8] }, i64 }* noalias sret, <{ { i32 (...)**, { opaque* }, i8*, i8*, i8*, i8*, i8*, i8* }, { { { { { { i64, i64, i8* } } } } } }, i8*, i32, [4 x i8] }>*, i64, i32, i32) unnamed_addr

<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
expected answer:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		<%ID> = xor <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = and <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         

<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
expected answer:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = load <8 x float>, <8 x float>* <%ID>, align 16                                                                  
		<%ID> = bitcast float* <%ID> to <8 x float>*                                                                            

<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
expected answer:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		define linkonce_odr { { { { { { i64, i64, i8* } } } } } }* <@ID>(i64* dereferenceable(8), i64* dereferenceable(8), i8*) local_unnamed_addr
		<%ID> = or <8 x i32> <%ID>, <%ID>                                                                                       

<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
expected answer:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = tail call fast <8 x float> <@ID>(<8 x float> <%ID>, <8 x float> <%ID>)                                          
		<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = xor <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   

<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
expected answer:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> <%ID>, <4 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>      
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     

<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
expected answer:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = xor <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   
		<%ID> = bitcast { i8*, { { [5 x i64] } } }* <%ID> to i8*                                                                

<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
		<%ID> = load i16, i16* <%ID>, align 2                                                                                   
		<%ID> = icmp ugt i16 <%ID>, <INT>                                                                                       

<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
expected answer:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = xor <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   
		<%ID> = tail call fast <8 x float> <@ID>(<8 x float> <%ID>, <8 x float> <%ID>)                                          
		<%ID> = phi <8 x float> [ zeroinitializer, <%ID> ], [ <%ID>, <%ID> ]                                                    
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          

<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
expected answer:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = xor <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = shufflevector <8 x float> <%ID>, <8 x float> undef, <4 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>      

<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
expected answer:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		<%ID> = xor <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   
		<%ID> = tail call fast <8 x float> <@ID>(<8 x float> <%ID>, <8 x float> <%ID>)                                          
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          

<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
<%ID> = bitcast double <%ID> to i64                                                                                     
expected answer:
		<%ID> = bitcast i64 <%ID> to double                                                                                     
Nearest neighbors:
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = fcmp ogt double <%ID>, <%ID>                                                                                    
		<%ID> = select i1 <%ID>, double <%ID>, double <%ID>                                                                     
		<%ID> = bitcast i64 <%ID> to double                                                                                     
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         

<%ID> = bitcast double* <%ID> to i8*                                                                                    
<%ID> = bitcast i8* <%ID> to double*                                                                                    
<%ID> = bitcast float* <%ID> to i8*                                                                                     
expected answer:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = load i8*, i8** <%ID>, align 8                                                                                   
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       

<%ID> = bitcast double* <%ID> to i8*                                                                                    
<%ID> = bitcast i8* <%ID> to double*                                                                                    
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
		<%ID> = getelementptr inbounds { i32, { { { { opaque* } } } }* }, { i32, { { { { opaque* } } } }* }* <%ID>, i64 <INT>, i32 <INT>

<%ID> = bitcast float <%ID> to i32                                                                                      
<%ID> = bitcast i32 <%ID> to float                                                                                      
<%ID> = bitcast double <%ID> to i64                                                                                     
expected answer:
		<%ID> = bitcast i64 <%ID> to double                                                                                     
Nearest neighbors:
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = bitcast { float }* <%ID> to i32*                                                                                
		<%ID> = bitcast i64 <%ID> to double                                                                                     
		<%ID> = inttoptr i64 <%ID> to double*                                                                                   

--- Incorrect predictions:

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
expected answer:
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		<%ID> = call { double, double } <@ID>({ double, double }* dereferenceable(16) <%ID>, { double, double }* nonnull dereferenceable(16) <%ID>)
		<%ID> = shufflevector <2 x double> <%ID>, <2 x double> undef, <2 x i32> <i32 <INT>, i32 <INT>>                          
		define linkonce_odr { double, double } <@ID>({ double, double }* dereferenceable(16), { double, double }* dereferenceable(16)) local_unnamed_addr

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
expected answer:
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = phi { double, double }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                      
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = icmp eq { double, double }* <%ID>, null                                                                         

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
expected answer:
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = phi i8* [ <%ID>, <%ID> ]                                                                                        
		<%ID> = icmp eq { opaque*, opaque* }* <%ID>, <%ID>                                                                      
		<%ID> = inttoptr i64 <%ID> to { opaque*, opaque* }*                                                                     

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
expected answer:
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
		<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i64*                                       
		<%ID> = phi <{ opaque, opaque*, opaque*, i8, [7 x i8] }>** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                           
		store { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }* <%ID>, { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID>, align 8

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
expected answer:
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = shufflevector <2 x double> <%ID>, <2 x double> undef, <2 x i32> <i32 <INT>, i32 <INT>>                          
		<%ID> = tail call double <@ID>(double <%ID>, double <%ID>)                                                              
		<%ID> = getelementptr inbounds { double, double }, { double, double }* <%ID>, i64 <INT>, i32 <INT>                      
		<%ID> = getelementptr inbounds { double, double }, { double, double }* <%ID>, i64 <%ID>, i32 <INT>                      

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = bitcast { double, double }* <%ID> to <4 x double>*                                                              
		<%ID> = getelementptr inbounds { double, double }, { double, double }* <%ID>, i64 <%ID>, i32 <INT>                      
		<%ID> = phi { double, double }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                      

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
expected answer:
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = bitcast { double, double }* <%ID> to i64*                                                                       
		<%ID> = getelementptr inbounds { double, double }, { double, double }* <%ID>, i64 <INT>, i32 <INT>                      
		<%ID> = alloca { double, double }, align 8                                                                              

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
expected answer:
		<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
Nearest neighbors:
		<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
		<%ID> = phi float [ <%ID>, <%ID> ], [ <FLOAT>, <%ID> ]                                                                  
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = insertelement <2 x float> <%ID>, float <%ID>, <TYP> 1                                                           
		store <2 x float> <%ID>, <2 x float>* <%ID>, align 4                                                                    

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
expected answer:
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
Nearest neighbors:
		<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
		define linkonce_odr <2 x float> <@ID>({ float, float }* dereferenceable(8), { float, float }* dereferenceable(8)) local_unnamed_addr
		<%ID> = alloca { float, float }, align 4                                                                                

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
expected answer:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = bitcast { i8 }* <%ID> to { { { { double*, i64 } } }* }*                                                         
		<%ID> = bitcast { { double*, i64 } }* <%ID> to { { { double*, i64 } } }*                                                
		<%ID> = call dereferenceable(24) { { { double*, i64, i64 } } }* <@ID>({ { double*, i64, i64 } }* nonnull <%ID>, { i8 }* nonnull dereferenceable(1) <%ID>)
		ret { { { double*, i64, i64 } } }* <%ID>                                                                                

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
expected answer:
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = call dereferenceable(24) { { { double*, i64, i64 } } }* <@ID>({ i8 }* <%ID>, i64 <%ID>, i64 <%ID>)              
		<%ID> = phi double* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                              
		ret { { { double*, i64, i64 } } }* <%ID>                                                                                

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
Nearest neighbors:
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = getelementptr inbounds { opaque*, opaque* }, { opaque*, opaque* }* <%ID>, i64 <INT>, i32 <INT>                  
		<%ID> = icmp eq { opaque*, opaque* }* <%ID>, <%ID>                                                                      
		<%ID> = alloca { opaque*, opaque* }, align 8                                                                            

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
expected answer:
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
Nearest neighbors:
		<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
		<%ID> = phi { { { i32*, i64, i64 } } }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                              
		<%ID> = load { { { i32*, i64 } } }*, { { { i32*, i64 } } }** <%ID>, align 8                                             
		<%ID> = load { { i32*, i64, i64 } }*, { { i32*, i64, i64 } }** <%ID>, align 8                                           
		<%ID> = bitcast { { i32*, i64 } }* <%ID> to { { { i32*, i64 } } }*                                                      

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
Nearest neighbors:
		<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = load <{ { i32 (...)**, i32, i32, i32, i8**, { { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, i32, i8* }*, i8, { { i8* }, i64, { i64, [8 x i8] } }, { i32, i32, i32, i32, i32 }, i8, i8, i8, { { i8* }, i64, { i64, [8 x i8] } } }, i8, i8, i8, i8, i8, [3 x i8], i32, i32, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, i8, [7 x i8] }>*, <{ { i32 (...)**, i32, i32, i32, i8**, { { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, i32, i8* }*, i8, { { i8* }, i64, { i64, [8 x i8] } }, { i32, i32, i32, i32, i32 }, i8, i8, i8, { { i8* }, i64, { i64, [8 x i8] } } }, i8, i8, i8, i8, i8, [3 x i8], i32, i32, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, i8, [7 x i8] }>** <%ID>, align 8
		<%ID> = bitcast i8** <%ID> to { i32, i32, i32, i32, i8*, i8*, i8*, i8*, { i32 (...)** }*, { { i32 (...)** }*, { i32 (...)** }*, i32, i32, i8*, i8*, i64, i32, i8*, i8*, i32, i32, opaque* }*, { i32* }, { i64*, [2 x i64] } }**
		invoke fastcc void <@ID>({ { i8* }, i64, { i64, [8 x i8] } }* noalias nonnull <%ID>)
 to label <%ID> unwind label <%ID> 

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
expected answer:
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
Nearest neighbors:
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = bitcast { { { double*, i64 } } }* <%ID> to i8*                                                                  
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8**                                                            
		call void <@ID>({ { double*, i64, i64 } }* nonnull <%ID>, { i8 }* nonnull dereferenceable(1) <%ID>)                     

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
expected answer:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
Nearest neighbors:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = bitcast { i8 }* <%ID> to i8**                                                                                   
		<%ID> = phi double* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                              

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = tail call i8* <@ID>(i64 <INT>)                                                                                  
		call void <@ID>({ { { { { { { i64, i64, i8* } } } } } }* }* nonnull <%ID>, { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* <%ID>, { { { { { { i64, i64, i8* } } } } } }* bitcast ({ { i64, [16 x i8] } }* <@ID> to { { { { { { i64, i64, i8* } } } } } }*))
		<%ID> = icmp eq { { { { { { i64, i64, i8* } } } } } }* <%ID>, bitcast ({ { i64, [16 x i8] } }* <@ID> to { { { { { { i64, i64, i8* } } } } } }*)

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = bitcast i8* <%ID> to i8**                                                                                       
		<%ID> = bitcast { <{ opaque, <{ opaque, opaque*, opaque*, i8, [7 x i8] }>*, opaque*, i8 }>, { { { { { { i64, i64, i8* } } } } } }* }* <%ID> to { <{ opaque, <{ opaque, opaque*, opaque*, i8, [7 x i8] }>*, opaque*, i8 }>, { { { { { { i64, i64, i8* } } } } } }* }**
		<%ID> = load { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }** <%ID>, align 8             

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
Nearest neighbors:
		<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = load { i32, [1 x i8*] }*, { i32, [1 x i8*] }** <%ID>, align 8                                                   
		<%ID> = icmp eq { i32, [1 x i8*] }* <%ID>, null                                                                         
		tail call void <@ID>(i32 <INT>, { { { { { { i64, i64, i8* } } } } } }* nonnull dereferenceable(24) <%ID>, <{ opaque*, i8*, i32, i32, i8, i8, i8, i8, [4 x i8] }>* <%ID>)

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
expected answer:
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
		<%ID> = shufflevector <2 x double> <%ID>, <2 x double> undef, <2 x i32> <i32 <INT>, i32 <INT>>                          
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
		define linkonce_odr { double, double } <@ID>({ double, double }* dereferenceable(16), { double, double }* dereferenceable(16)) local_unnamed_addr

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
Nearest neighbors:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = tail call <16 x i8> <@ID>(<16 x i8> <%ID>, <16 x i8> <%ID>)                                                     
		<%ID> = add <2 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = shufflevector <16 x i8> <%ID>, <16 x i8> <%ID>, <16 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>
		<%ID> = bitcast i32* <%ID> to <16 x i8>*                                                                                
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
expected answer:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = bitcast { double, double }* <%ID> to <4 x double>*                                                              
		<%ID> = phi { double, double }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                      
		<%ID> = xor <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
expected answer:
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
Nearest neighbors:
		<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = alloca <4 x float>, align 16                                                                                    
		<%ID> = fadd fast float <%ID>, <%ID>                                                                                    

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
expected answer:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     
		<%ID> = bitcast <2 x i64> <%ID> to <4 x float>                                                                          
		<%ID> = fmul fast <4 x float> <%ID>, <float <FLOAT>, float <FLOAT>, float <FLOAT>, float <FLOAT>>                       

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     
		<%ID> = bitcast <2 x i64> <%ID> to <4 x float>                                                                          
		<%ID> = shufflevector <4 x i32> <%ID>, <4 x i32> undef, <4 x i32> <i32 <INT>, i32 undef, i32 <INT>, i32 undef>          
		<%ID> = shufflevector <4 x i32> <%ID>, <4 x i32> undef, <4 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>          

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
		<%ID> = or <4 x i32> <%ID>, <%ID>                                                                                       
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = bitcast <8 x i16> <%ID> to <4 x i32>                                                                            
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = tail call fast <4 x float> <@ID>(<4 x float> <%ID>, <4 x float> <%ID>)                                          
		<%ID> = and <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                               
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
expected answer:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = load <8 x float>, <8 x float>* <%ID>, align 16                                                                  
		<%ID> = xor <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   
		<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
expected answer:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = xor <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   
		<%ID> = shufflevector <8 x float> <%ID>, <8 x float> undef, <8 x i32> zeroinitializer                                   
		<%ID> = load <8 x float>, <8 x float>* <%ID>, align 16                                                                  

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast double* <%ID> to i64*                                                                                   
expected answer:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i64*                                                                                   
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = phi double* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                              
		<%ID> = bitcast double* <%ID> to <2 x double>*                                                                          
		<%ID> = getelementptr inbounds { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x double] }, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x double] }* <%ID>, i64 <INT>, i32 <INT>, i64 <%ID>

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast double* <%ID> to i8*                                                                                    
expected answer:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i8*                                                                                    
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = getelementptr double, double* <%ID>, i64 <%ID>                                                                  
		<%ID> = getelementptr double, double* <%ID>, i64 <INT>                                                                  
		<%ID> = ptrtoint double* <%ID> to i64                                                                                   

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast float <%ID> to i32                                                                                      
expected answer:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
Nearest neighbors:
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = fptosi float <%ID> to i32                                                                                       
		<%ID> = select i1 <%ID>, float <%ID>, float <%ID>                                                                       
		<%ID> = phi i64 [ 2, <%ID> ], [ 1, <%ID> ]                                                                              
		<%ID> = tail call float <@ID>(float <%ID>)                                                                              

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast double <%ID> to i64                                                                                     
expected answer:
		<%ID> = bitcast i64 <%ID> to double                                                                                     
Nearest neighbors:
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = select i1 <%ID>, double <%ID>, double <%ID>                                                                     
		<%ID> = phi i64 [ 2, <%ID> ], [ 1, <%ID> ]                                                                              
		<%ID> = phi i64 [ <%ID>, <%ID> ], [ undef, <%ID> ]                                                                      

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast float* <%ID> to i8*                                                                                     
expected answer:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
Nearest neighbors:
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		store float <FLOAT>, float* <%ID>, align 4                                                                              
		<%ID> = getelementptr inbounds float, float* <%ID>, i64 <INT>                                                           
		<%ID> = icmp ult float* <%ID>, <%ID>                                                                                    

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = getelementptr inbounds i16, i16* <%ID>, i64 <INT>                                                               
		<%ID> = icmp slt i16 <%ID>, <%ID>                                                                                       
		<%ID> = load i16, i16* <%ID>, align 8                                                                                   

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = insertelement <8 x float> undef, float <%ID>, <TYP> 0                                                           
		<%ID> = fadd fast float <%ID>, <%ID>                                                                                    
		<%ID> = fsub fast float <%ID>, <%ID>                                                                                    

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       
		<%ID> = load <4 x i32>, <4 x i32>* <%ID>, align 1                                                                       

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		tail call void <@ID>(i8* nonnull <%ID>, i8* <%ID>, i64 <%ID>, i32 <INT>, i1 false)                                      
		<%ID> = icmp ugt i32* <%ID>, <%ID>                                                                                      
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                 

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = getelementptr inbounds { { { { { { { i64, i64, i8* } } } } } }, { { { i32 (...)** } }, { { i8* } }, { double }, i32, [1 x i32] } }, { { { { { { { i64, i64, i8* } } } } } }, { { { i32 (...)** } }, { { i8* } }, { double }, i32, [1 x i32] } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = getelementptr inbounds i32, i32* <%ID>, i64 <INT>                                                               
		<%ID> = load <{ { { { { { { i64, i64, i8* } } } } } }, i32, [4 x i8] }>*, <{ { { { { { { i64, i64, i8* } } } } } }, i32, [4 x i8] }>** <%ID>, align 8

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = load { { { i32*, i64 } } }*, { { { i32*, i64 } } }** <%ID>, align 8                                             
		<%ID> = load i32*, i32** <%ID>, align 8                                                                                 
		<%ID> = ptrtoint i32* <%ID> to i64                                                                                      

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		invoke void <@ID>({ opaque* }* <%ID>)
 to label <%ID> unwind label <%ID>                                                
		<%ID> = load i32*, i32** <%ID>, align 8                                                                                 
		<%ID> = getelementptr inbounds { i32, i32 }, { i32, i32 }* <%ID>, i64 <INT>, i32 <INT>                                  

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ null, <%ID> ], [ <%ID>, <%ID> ]                                                    
		<%ID> = load { { { i32*, i64 } } }*, { { { i32*, i64 } } }** <%ID>, align 8                                             
		<%ID> = getelementptr inbounds { { { i8 } }, i64, i64, i32*, i32*, { double*, i32*, i64, i64 } }, { { { i8 } }, i64, i64, i32*, i32*, { double*, i32*, i64, i64 } }* <%ID>, i64 <INT>, i32 <INT>

<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = phi i32* [ null, <%ID> ], [ <%ID>, <%ID> ], [ null, <%ID> ]                                                     
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = call dereferenceable(24) { { { double*, i64, i64 } } }* <@ID>({ i8 }* <%ID>, i64 <%ID>, i64 <%ID>)              

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
expected answer:
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = phi { double, double }* [ <%ID>, <%ID> ], [ null, <%ID> ]                                                       
		<%ID> = phi { double, double }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                      

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
expected answer:
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = phi i8* [ <%ID>, <%ID> ]                                                                                        
		<%ID> = icmp eq { opaque*, opaque* }* <%ID>, <%ID>                                                                      
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }**                                                                     

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
expected answer:
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
		<%ID> = icmp eq { <{ opaque, <{ opaque, opaque*, opaque*, i8, [7 x i8] }>*, opaque*, i8 }>, { { { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } } } } }* <%ID>, null
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to { { i8 }, [23 x i8] }*                                  
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
expected answer:
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = getelementptr inbounds { double, double }, { double, double }* <%ID>, i64 <%ID>, i32 <INT>                      
		<%ID> = bitcast { double, double }* <%ID> to <4 x double>*                                                              
		<%ID> = getelementptr inbounds { double, double }, { double, double }* <%ID>, i64 <INT>                                 

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = bitcast { double, double }* <%ID> to <4 x double>*                                                              
		store <4 x double> <%ID>, <4 x double>* <%ID>, align 16                                                                 
		<%ID> = sub nsw i32 <INT>, <%ID>                                                                                        
		<%ID> = select i1 <%ID>, i32 <INT>, i32 <%ID>                                                                           

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
expected answer:
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = icmp eq { double, double }* <%ID>, null                                                                         
		<%ID> = getelementptr inbounds { double, double }, { double, double }* <%ID>, i64 <%ID>                                 
		<%ID> = and i16 <%ID>, <%ID>                                                                                            

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
expected answer:
		<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
Nearest neighbors:
		<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = insertelement <2 x float> <%ID>, float <%ID>, <TYP> 1                                                           
		<%ID> = load { float, float }*, { float, float }** <%ID>, align 8                                                       
		<%ID> = getelementptr inbounds { float, float }, { float, float }* <%ID>, i64 <%ID>                                     

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
expected answer:
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
Nearest neighbors:
		<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = load { float, float }*, { float, float }** <%ID>, align 8                                                       
		<%ID> = getelementptr inbounds { float, float }, { float, float }* <%ID>, i64 <%ID>                                     
		<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
expected answer:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = phi { { { { i32*, i64 } } } }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                               
		<%ID> = bitcast { i8 }* <%ID> to { { { { double*, i64 } } }* }*                                                         
		<%ID> = bitcast { { double*, i64 } }* <%ID> to { { { double*, i64 } } }*                                                

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
expected answer:
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		store <4 x double> <%ID>, <4 x double>* <%ID>, align 16                                                                 
		<%ID> = call dereferenceable(24) { { { double*, i64, i64 } } }* <@ID>({ i8 }* <%ID>, i64 <%ID>, i64 <%ID>)              
		<%ID> = sub nsw i32 <INT>, <%ID>                                                                                        

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
Nearest neighbors:
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = getelementptr inbounds { opaque*, opaque* }, { opaque*, opaque* }* <%ID>, i64 <INT>, i32 <INT>                  
		<%ID> = icmp eq { opaque*, opaque* }* <%ID>, <%ID>                                                                      
		<%ID> = ptrtoint { opaque*, opaque* }* <%ID> to i64                                                                     

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
expected answer:
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
Nearest neighbors:
		<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = load { { { i32*, i64 } } }*, { { { i32*, i64 } } }** <%ID>, align 8                                             
		<%ID> = load { { i32*, i64, i64 } }*, { { i32*, i64, i64 } }** <%ID>, align 8                                           
		<%ID> = sub nsw i32 <INT>, <%ID>                                                                                        

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
Nearest neighbors:
		<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = getelementptr inbounds [4 x { { i8* }, i64, { i64, [8 x i8] } }], [4 x { { i8* }, i64, { i64, [8 x i8] } }]* <%ID>, i64 <INT>, i64 <INT>, i32 <INT>, i32 <INT>
		store { i64, [8 x i8] }* <%ID>, { i64, [8 x i8] }** <%ID>, align 8                                                      
		invoke void <@ID>({ { i32 (...)** }, { { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, { { i32, <{ i32 (...)**, i32, [4 x i8] }>**, i64, <{ i32 (...)**, i32, [4 x i8] }>**, i8** }* } }, i32, { { i8* }, i64, { i64, [8 x i8] } } }, opaque }* nonnull <%ID>, i32 <INT>)
 to label <%ID> unwind label <%ID>

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
expected answer:
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
Nearest neighbors:
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = getelementptr inbounds { { { { [16 x double] } } } }, { { { { [16 x double] } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i64 <INT>
		<%ID> = icmp eq i8* <%ID>, null                                                                                         
		<%ID> = getelementptr inbounds double, double* <%ID>, i64 <INT>                                                         

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
expected answer:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
Nearest neighbors:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = trunc i64 <%ID> to i32                                                                                          
		<%ID> = phi i64 [ 0, <%ID> ], [ 1, <%ID> ]                                                                              
		<%ID> = getelementptr i64, i64* <%ID>, i64 <%ID>                                                                        

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = getelementptr inbounds { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }* <%ID>, i64 <%ID>
		<%ID> = invoke dereferenceable(24) { { { { { { i64, i64, i8* } } } } } }* <@ID>({ { { { { { i64, i64, i8* } } } } } }* <%ID>, { { { { { { i64, i64, i8* } } } } } }* nonnull dereferenceable(24) <%ID>)
 to label <%ID> unwind label <%ID>
		<%ID> = icmp eq { { { { { { i64, i64, i8* } } } } } }* <%ID>, <%ID>                                                     

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = bitcast i8* <%ID> to i8**                                                                                       
		<%ID> = bitcast i8* <%ID> to { i32 (...)** }**                                                                          
		<%ID> = tail call zeroext i1 <%ID>({ i32 (...)** }* <%ID>, { i8*, i8*, opaque*, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, opaque*, { i32 (...)** }* }* nonnull <%ID>)

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
Nearest neighbors:
		<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = getelementptr inbounds { i32, [1 x i8*] }, { i32, [1 x i8*] }* <%ID>, i64 <INT>, i32 <INT>, i64 <%ID>           
		<%ID> = getelementptr inbounds { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }* <%ID>, i64 <%ID>
		<%ID> = bitcast i8** <%ID> to { { i32 (...)** } }**                                                                     

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
expected answer:
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
		<%ID> = load { { { { double*, i64 } } }, { { { double*, i64 } } }*, { { double*, { i64 } } }, { <{ double*, { i8 } }>, [7 x i8] }, i64 }*, { { { { double*, i64 } } }, { { { double*, i64 } } }*, { { double*, { i64 } } }, { <{ double*, { i8 } }>, [7 x i8] }, i64 }** <%ID>, align 8
		<%ID> = and i16 <%ID>, <%ID>                                                                                            
		<%ID> = getelementptr inbounds { i64, opaque*, opaque* }, { i64, opaque*, opaque* }* <%ID>, i64 <INT>, i32 <INT>        

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
Nearest neighbors:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = add <2 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = phi i64 [ <%ID>, <%ID> ]                                                                                        
		<%ID> = sext i8 <%ID> to i64                                                                                            

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
Nearest neighbors:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = bitcast float* <%ID> to <16 x i8>*                                                                              
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> undef, <4 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef>      
		<%ID> = phi <16 x i8> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast i32* <%ID> to <16 x i8>*                                                                                
		store <4 x double> <%ID>, <4 x double>* <%ID>, align 32                                                                 

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
expected answer:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = phi <4 x i64> [ <%ID>, <%ID> ], [ zeroinitializer, <%ID> ]                                                      
		<%ID> = bitcast { double, double }* <%ID> to <4 x double>*                                                              
		<%ID> = xor <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
expected answer:
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
Nearest neighbors:
		<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = getelementptr inbounds { float, float }, { float, float }* <%ID>, i64 <%ID>, i32 <INT>                          
		<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
expected answer:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = phi <16 x i8> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                
		<%ID> = sub nsw i32 <INT>, <%ID>                                                                                        
		<%ID> = bitcast double* <%ID> to <2 x double>*                                                                          

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     
		<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = or <4 x i32> <%ID>, <%ID>                                                                                       
		<%ID> = bitcast <8 x i16> <%ID> to <4 x i32>                                                                            
		<%ID> = phi <4 x i32> [ <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>, <%ID> ], [ <%ID>, <%ID> ]                         

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = call fast <4 x float> <@ID>(<4 x float> <%ID>, <4 x float> <%ID>)                                               
		<%ID> = tail call fast <4 x float> <@ID>(<4 x float> <%ID>, <4 x float> <%ID>)                                          
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
expected answer:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = tail call fast <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                       
		<%ID> = call fast <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
expected answer:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = load <8 x float>, <8 x float>* <%ID>, align 16                                                                  
		<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
		store <8 x float> <%ID>, <8 x float>* <%ID>, align 4                                                                    

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast double* <%ID> to i64*                                                                                   
expected answer:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i64*                                                                                   
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		store <4 x double> <%ID>, <4 x double>* <%ID>, align 16                                                                 
		<%ID> = trunc i64 <%ID> to i32                                                                                          
		<%ID> = lshr i64 <%ID>, <%ID>                                                                                           

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast double* <%ID> to i8*                                                                                    
expected answer:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i8*                                                                                    
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		store <4 x double> <%ID>, <4 x double>* <%ID>, align 16                                                                 
		<%ID> = getelementptr double, double* <%ID>, i64 <%ID>                                                                  
		<%ID> = getelementptr double, double* <%ID>, i64 <INT>                                                                  

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast float <%ID> to i32                                                                                      
expected answer:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
Nearest neighbors:
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = select i1 <%ID>, float <%ID>, float <%ID>                                                                       
		<%ID> = sub nsw i32 <INT>, <%ID>                                                                                        
		<%ID> = select i1 <%ID>, i32 <%ID>, i32 <%ID>                                                                           

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast double <%ID> to i64                                                                                     
expected answer:
		<%ID> = bitcast i64 <%ID> to double                                                                                     
Nearest neighbors:
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		store <4 x double> <%ID>, <4 x double>* <%ID>, align 16                                                                 
		<%ID> = phi i64 [ 2, <%ID> ], [ 1, <%ID> ]                                                                              
		<%ID> = select i1 <%ID>, double <%ID>, double <%ID>                                                                     

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast float* <%ID> to i8*                                                                                     
expected answer:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
Nearest neighbors:
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = shufflevector <8 x float> <%ID>, <8 x float> undef, <8 x i32> zeroinitializer                                   
		<%ID> = phi { i64, opaque*, opaque* }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                               
		<%ID> = fmul fast float <%ID>, <%ID>                                                                                    

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = getelementptr inbounds i16, i16* <%ID>, i64 <INT>                                                               
		<%ID> = getelementptr i16, i16* <%ID>, i64 <%ID>                                                                        
		store i16 <%ID>, i16* <%ID>, align 8                                                                                    

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = fmul fast float <%ID>, <%ID>                                                                                    
		<%ID> = shufflevector <8 x float> <%ID>, <8 x float> undef, <8 x i32> zeroinitializer                                   
		<%ID> = insertelement <8 x float> undef, float <%ID>, <TYP> 0                                                           

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = sub nsw i32 <INT>, <%ID>                                                                                        
		switch i32 <%ID>, label <%ID> [
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>]
		tail call void <@ID>(i8* nonnull <%ID>, i8* <%ID>, i64 <%ID>, i32 <INT>, i1 false)                                      

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = sext i8 <%ID> to i64                                                                                            
		<%ID> = sub nsw i32 <INT>, <%ID>                                                                                        
		<%ID> = shl i64 <%ID>, <%ID>                                                                                            

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = sub nsw i32 <INT>, <%ID>                                                                                        
		<%ID> = phi { i64, opaque*, opaque* }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                               
		<%ID> = icmp eq opaque* <%ID>, null                                                                                     

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = sext i8 <%ID> to i64                                                                                            
		<%ID> = sub nsw i32 <INT>, <%ID>                                                                                        
		<%ID> = phi { i64, opaque*, opaque* }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                               

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		store i32* <%ID>, i32** <%ID>, align 8                                                                                  
		<%ID> = sub nsw i32 <INT>, <%ID>                                                                                        
		<%ID> = phi i32** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    

<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = select i1 <%ID>, i32 <INT>, i32 <%ID>                                                                           
		<%ID> = load volatile i32, i32* <%ID>, align 4                                                                          
		<%ID> = sub nsw i32 <INT>, <%ID>                                                                                        

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
expected answer:
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = phi { double, double }* [ <%ID>, <%ID> ], [ null, <%ID> ]                                                       
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		store { double, double }* <%ID>, { double, double }** <%ID>, align 8                                                    
		<%ID> = icmp eq { <{ i32 (...)**, { { { i32 } } } }>, [4 x i8] }* <%ID>, null                                           

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
expected answer:
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
		<%ID> = icmp eq { opaque*, opaque* }* <%ID>, <%ID>                                                                      
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8**                                                                     
		<%ID> = inttoptr i64 <%ID> to { opaque*, opaque* }*                                                                     
		<%ID> = bitcast { opaque*, opaque* }** <%ID> to i8**                                                                    

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
expected answer:
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
Nearest neighbors:
		<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
		<%ID> = tail call dereferenceable(8) <{ opaque, opaque*, opaque*, i8, [7 x i8] }>** <@ID>({ opaque*, { { opaque } }, { { i64 } } }* <%ID>, { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** nonnull dereferenceable(8) <%ID>, { { { { { { i64, i64, i8* } } } } } }* nonnull dereferenceable(24) <%ID>)
		<%ID> = bitcast <{ opaque, opaque*, opaque*, i8, [7 x i8] }>** <%ID> to { <{ opaque, <{ opaque, opaque*, opaque*, i8, [7 x i8] }>*, opaque*, i8 }>, { { { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } } } } }**
		<%ID> = load { <{ opaque, <{ opaque, opaque*, opaque*, i8, [7 x i8] }>*, opaque*, i8 }>, { { { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } } } } }*, { <{ opaque, <{ opaque, opaque*, opaque*, i8, [7 x i8] }>*, opaque*, i8 }>, { { { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } } } } }** <%ID>, align 8
		<%ID> = phi <{ opaque, opaque*, opaque*, i8, [7 x i8] }>** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
expected answer:
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = shufflevector <2 x double> <%ID>, <2 x double> undef, <2 x i32> <i32 <INT>, i32 <INT>>                          
		<%ID> = getelementptr inbounds { double, double }, { double, double }* <%ID>, i64 <%ID>, i32 <INT>                      
		define linkonce_odr { double, double } <@ID>({ double, double }* dereferenceable(16), { double, double }* dereferenceable(16)) local_unnamed_addr
		<%ID> = call { double, double } <@ID>({ double, double }* nonnull dereferenceable(16) <%ID>, { double, double }* nonnull dereferenceable(16) <%ID>)

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
		<%ID> = bitcast { double, double }* <%ID> to <4 x double>*                                                              
		<%ID> = getelementptr inbounds { double, double }, { double, double }* <%ID>, i64 <%ID>                                 
		<%ID> = getelementptr inbounds { double, double }, { double, double }* <%ID>, i64 <%ID>, i32 <INT>                      

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
expected answer:
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = alloca { double, double }, align 8                                                                              
		<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
		<%ID> = load { double, double }*, { double, double }** <%ID>, align 8                                                   
		<%ID> = getelementptr inbounds { double, double }, { double, double }* <%ID>, i64 <%ID>                                 

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
expected answer:
		<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
Nearest neighbors:
		<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
		<%ID> = load { float, float }*, { float, float }** <%ID>, align 8                                                       
		<%ID> = phi float [ <%ID>, <%ID> ], [ <FLOAT>, <%ID> ]                                                                  
		store <2 x float> <%ID>, <2 x float>* <%ID>, align 4                                                                    
		<%ID> = alloca { float, float }*, align 8                                                                               

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
expected answer:
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
Nearest neighbors:
		<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
		<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
		<%ID> = load { float, float }*, { float, float }** <%ID>, align 8                                                       
		<%ID> = alloca { float, float }, align 4                                                                                
		store { float, float }* <%ID>, { float, float }** <%ID>, align 8                                                        

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
expected answer:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = phi { { { { i32*, i64 } } } }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                               
		<%ID> = bitcast { i8 }* <%ID> to { { { { double*, i64 } } }* }*                                                         
		<%ID> = bitcast { { double*, i64 } }* <%ID> to { { { double*, i64 } } }*                                                
		<%ID> = bitcast { i8 }* <%ID> to { { double*, i64 } }**                                                                 

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
expected answer:
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = fcmp une double <%ID>, <FLOAT>                                                                                  
		<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
		<%ID> = phi double* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                              
		<%ID> = call dereferenceable(24) { { { double*, i64, i64 } } }* <@ID>({ i8 }* <%ID>, i64 <%ID>, i64 <%ID>)              

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
Nearest neighbors:
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
		<%ID> = getelementptr inbounds { opaque*, opaque* }, { opaque*, opaque* }* <%ID>, i64 <INT>, i32 <INT>                  
		<%ID> = icmp eq { opaque*, opaque* }* <%ID>, <%ID>                                                                      
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i64*                                                                     
		<%ID> = alloca { opaque*, opaque* }, align 8                                                                            

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
expected answer:
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
Nearest neighbors:
		<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
		<%ID> = load { { { i32*, i64 } } }*, { { { i32*, i64 } } }** <%ID>, align 8                                             
		<%ID> = load { { i32*, i64, i64 } }*, { { i32*, i64, i64 } }** <%ID>, align 8                                           
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ null, <%ID> ], [ null, <%ID> ]                                                     
		<%ID> = phi { { { i32*, i64, i64 } } }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                              

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
Nearest neighbors:
		<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
		<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to { i64, [8 x i8] }**                                       
		<%ID> = getelementptr inbounds { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>
		<%ID> = getelementptr inbounds [4 x { { i8* }, i64, { i64, [8 x i8] } }], [4 x { { i8* }, i64, { i64, [8 x i8] } }]* <%ID>, i64 <INT>, i64 <INT>, i32 <INT>, i32 <INT>
		<%ID> = load <{ { i32 (...)**, i32, i32, i32, i8**, { { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, i32, i8* }*, i8, { { i8* }, i64, { i64, [8 x i8] } }, { i32, i32, i32, i32, i32 }, i8, i8, i8, { { i8* }, i64, { i64, [8 x i8] } } }, i8, i8, i8, i8, i8, [3 x i8], i32, i32, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, i8, [7 x i8] }>*, <{ { i32 (...)**, i32, i32, i32, i8**, { { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, i32, i8* }*, i8, { { i8* }, i64, { i64, [8 x i8] } }, { i32, i32, i32, i32, i32 }, i8, i8, i8, { { i8* }, i64, { i64, [8 x i8] } } }, i8, i8, i8, i8, i8, [3 x i8], i32, i32, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, i8, [7 x i8] }>** <%ID>, align 8

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
expected answer:
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
Nearest neighbors:
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
		store double* <%ID>, double** <%ID>, align 8                                                                            
		<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
		<%ID> = getelementptr inbounds { { { double*, i64, i64 } } }, { { { double*, i64, i64 } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8**                                                            

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
expected answer:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
Nearest neighbors:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
		<%ID> = bitcast { i8 }* <%ID> to i32**                                                                                  
		<%ID> = sdiv i32 <%ID>, <%ID>                                                                                           
		<%ID> = trunc i64 <%ID> to i32                                                                                          

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
		<%ID> = icmp eq <{ { { i32 (...)** } }, { { i8* } }, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, i32, [4 x i8] }>* <%ID>, null
		define linkonce_odr dereferenceable(8) <{ opaque, opaque*, opaque*, i8, [7 x i8] }>** <@ID>({ opaque*, { { opaque, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } } }, { { i64 } } }*, { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** dereferenceable(8), { { { { { { i64, i64, i8* } } } } } }** dereferenceable(8)) local_unnamed_addr
		<%ID> = getelementptr inbounds { { { i32 (...)** } }, { { i8* } }, { i32, i32, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }, i32, i32 }, { { { i32 (...)** } }, { { i8* } }, { i32, i32, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }, i32, i32 }* <%ID>, i64 <INT>, i32 <INT>
		<@ID> = private unnamed_addr constant [12 x i8]  <STRING>, align 1                                                      

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
		<%ID> = trunc i32 <%ID> to i29                                                                                          
		tail call void <@ID>(i32 <INT>, i32 <%ID>, <{ opaque*, i8*, i32, i32, i8, i8, i8, i8, [4 x i8] }>* <%ID>)               
		<%ID> = tail call <{ { { i32 (...)** } }, { { i8* } }, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, i32, [4 x i8] }>* <@ID>({ { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* <%ID>)
		<%ID> = tail call zeroext i1 <@ID>({ i8*, i8*, opaque*, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, opaque*, { i32 (...)** }* }* <%ID>, i32 <%ID>, { { { { i32, i32, { i64 } }*, { i32, i32, { i64 } }*, { { { i32, i32, { i64 } }* } } } }* }* <%ID>)

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
Nearest neighbors:
		<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]               
		<%ID> = getelementptr inbounds { i32, [1 x i8*] }, { i32, [1 x i8*] }* <%ID>, i64 <INT>, i32 <INT>, i64 <%ID>           
		<%ID> = getelementptr inbounds { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* }, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* }* <%ID>, i64 <INT>, i32 <INT>
		<%ID> = phi { i32, [1 x i8*] }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                      

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
expected answer:
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
Nearest neighbors:
		<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
		<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
		<%ID> = alloca <2 x double>, align 16                                                                                   
		<%ID> = load { { i32 (...)** }*, { i32 (...)** }*, i32, i32, i8*, i8*, i64, i32, i8*, i8*, i32, i32, opaque* }*, { { i32 (...)** }*, { i32 (...)** }*, i32, i32, i8*, i8*, i64, i32, i8*, i8*, i32, i32, opaque* }** <%ID>, align 8
		<%ID> = bitcast { { { double, double }*, i64 } }* <%ID> to i8*                                                          

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
Nearest neighbors:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		<%ID> = xor <2 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = getelementptr inbounds { { { i32 (...)** } }, { { i8* } }, { i32, i32, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }, i32, i32 }, { { { i32 (...)** } }, { { i8* } }, { i32, i32, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }, i32, i32 }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>
		<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
		<%ID> = add <2 x i64> <%ID>, <%ID>                                                                                      

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast i32* <%ID> to <16 x i8>*                                                                                
		<%ID> = shufflevector <16 x i8> <%ID>, <16 x i8> <%ID>, <16 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>
		<%ID> = load <16 x i8>, <16 x i8>* <%ID>, align 16                                                                      

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
expected answer:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
		<%ID> = xor <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = bitcast { double, double }* <%ID> to <4 x double>*                                                              
		<%ID> = getelementptr inbounds { double, double }, { double, double }* <%ID>, i64 <INT>                                 
		<%ID> = phi { double, double }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                      

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
expected answer:
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
Nearest neighbors:
		<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
		<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> undef, <4 x i32> zeroinitializer                                   
		<%ID> = alloca <4 x float>, align 16                                                                                    
		<%ID> = insertelement <4 x float> undef, float <%ID>, <TYP> 0                                                           

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
expected answer:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> <%ID>, <4 x i32> <i32 <INT>, i32 undef, i32 undef, i32 <INT>>      
		<%ID> = call fast <4 x float> <@ID>(<4 x float> <%ID>, <4 x float> <%ID>, <4 x float> <%ID>)                            

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = shufflevector <4 x i32> <%ID>, <4 x i32> undef, <4 x i32> <i32 <INT>, i32 undef, i32 <INT>, i32 undef>          
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     
		<%ID> = bitcast <2 x i64> <%ID> to <4 x float>                                                                          
		<%ID> = shufflevector <4 x i32> <%ID>, <4 x i32> undef, <4 x i32> zeroinitializer                                       

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
		<%ID> = or <4 x i32> <%ID>, <%ID>                                                                                       
		<%ID> = bitcast <8 x i16> <%ID> to <4 x i32>                                                                            
		<%ID> = shufflevector <4 x i32> <%ID>, <4 x i32> undef, <4 x i32> <i32 <INT>, i32 undef, i32 <INT>, i32 undef>          
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
		<%ID> = and <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                               
		<%ID> = tail call fast <4 x float> <@ID>(<4 x float> <%ID>, <4 x float> <%ID>)                                          
		<%ID> = phi <4 x float> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                              

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
expected answer:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
		<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast double* <%ID> to i64*                                                                                   
expected answer:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i64*                                                                                   
		<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
		store i32 <%ID>, i32* <%ID>, align 8                                                                                    
		<%ID> = getelementptr inbounds { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x i64] }, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x i64] }* <%ID>, i64 <INT>, i32 <INT>, i64 <%ID>
		<%ID> = phi i8* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast double* <%ID> to i8*                                                                                    
expected answer:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i8*                                                                                    
		<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
		store float <%ID>, float* <%ID>, align 4                                                                                
		<%ID> = ptrtoint double* <%ID> to i64                                                                                   
		<%ID> = lshr i64 <%ID>, <INT>                                                                                           

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast float <%ID> to i32                                                                                      
expected answer:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
Nearest neighbors:
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = select i1 <%ID>, float <%ID>, float <%ID>                                                                       
		<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
		<%ID> = select i1 <%ID>, i32 <%ID>, i32 <%ID>                                                                           
		<%ID> = phi i32 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast double <%ID> to i64                                                                                     
expected answer:
		<%ID> = bitcast i64 <%ID> to double                                                                                     
Nearest neighbors:
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
		<%ID> = phi i64 [ 2, <%ID> ], [ 1, <%ID> ]                                                                              
		<%ID> = phi i64 [ <%ID>, <%ID> ], [ undef, <%ID> ]                                                                      
		<%ID> = select i1 <%ID>, double <%ID>, double <%ID>                                                                     

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast float* <%ID> to i8*                                                                                     
expected answer:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
Nearest neighbors:
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
		store float <%ID>, float* <%ID>, align 4                                                                                
		<%ID> = bitcast i64* <%ID> to i8*                                                                                       
		<%ID> = getelementptr float, float* <%ID>, i64 <%ID>                                                                    

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		store i16 <%ID>, i16* <%ID>, align 2                                                                                    
		<%ID> = trunc i32 <%ID> to i16                                                                                          
		<%ID> = load i16, i16* <%ID>, align 2                                                                                   
		<%ID> = select i1 <%ID>, i16 <INT>, i16 <%ID>                                                                           

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
		<%ID> = fsub float <%ID>, <%ID>                                                                                         
		<%ID> = fadd fast float <%ID>, <%ID>                                                                                    
		<%ID> = fsub fast float <%ID>, <%ID>                                                                                    

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       
		store i32* <%ID>, i32** <%ID>, align 8                                                                                  
		<%ID> = load { { { i32*, i64 } } }*, { { { i32*, i64 } } }** <%ID>, align 8                                             

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
		<%ID> = bitcast { { i32*, i32*, { { i32* } } } }* <%ID> to i64*                                                         
		<%ID> = phi i32** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    
		store i32* <%ID>, i32** <%ID>, align 8                                                                                  

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = trunc i64 <%ID> to i32                                                                                          
		<%ID> = extractvalue { i64, i64 } <%ID>, 0                                                                              
		<%ID> = urem i32 <%ID>, <INT>                                                                                           
		<%ID> = load i64*, i64** <%ID>, align 8                                                                                 

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		store i32 <%ID>, i32* <%ID>, align 4                                                                                    
		<%ID> = load { { { i32*, i64 } } }*, { { { i32*, i64 } } }** <%ID>, align 8                                             
		<%ID> = load i32*, i32** <%ID>, align 8                                                                                 
		<%ID> = alloca i32, align 4                                                                                             

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
		<%ID> = getelementptr inbounds { { { i32 (...)** } }, { { i8* } }, { i32, i32, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }, i32, i32 }, { { { i32 (...)** } }, { { i8* } }, { i32, i32, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }, i32, i32 }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>
		define internal i32 <@ID>()                                                                                             
		<%ID> = load i32*, i32** <%ID>, align 8                                                                                 

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		store i32* <%ID>, i32** <%ID>, align 8                                                                                  
		<%ID> = load { { { i32*, i64 } } }*, { { { i32*, i64 } } }** <%ID>, align 8                                             
		<%ID> = phi i32** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    
		<%ID> = load i32*, i32** <%ID>, align 8                                                                                 

<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ null, <%ID> ], [ null, <%ID> ]                                                     
		store i32* <%ID>, i32** <%ID>, align 8                                                                                  
		<%ID> = icmp sgt i32 <%ID>, <%ID>                                                                                       

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
expected answer:
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }**                                                                     
		<%ID> = phi { opaque*, opaque* }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                    
		<%ID> = inttoptr i64 <%ID> to { opaque*, opaque* }*                                                                     

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
expected answer:
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
Nearest neighbors:
		<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i64*                                       
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to { { i8 }, [23 x i8] }*                                  
		<%ID> = getelementptr inbounds { { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } } }, { { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
expected answer:
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = bitcast { double, double }* <%ID> to i64*                                                                       
		<%ID> = getelementptr inbounds { double, double }, { double, double }* <%ID>, i64 <INT>, i32 <INT>                      
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = bitcast { double, double }* <%ID> to i64*                                                                       
		<%ID> = getelementptr inbounds { double, double }, { double, double }* <%ID>, i64 <INT>, i32 <INT>                      
		<%ID> = getelementptr inbounds { double, double }, { double, double }* <%ID>, i64 <%ID>                                 

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
expected answer:
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = bitcast { double, double }* <%ID> to i64*                                                                       
		<%ID> = alloca { double, double }, align 8                                                                              
		<%ID> = getelementptr inbounds { double, double }, { double, double }* <%ID>, i64 <INT>, i32 <INT>                      
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
expected answer:
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
Nearest neighbors:
		<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = bitcast <2 x float>* <%ID> to i8*                                                                               
		<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
		<%ID> = alloca { float, float }, align 4                                                                                

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
expected answer:
		<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
Nearest neighbors:
		<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
		<%ID> = getelementptr inbounds { { i64*, i64 } }, { { i64*, i64 } }* <%ID>, i32 <INT>, i32 <INT>                        
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = load { i64*, i64 }*, { i64*, i64 }** <%ID>, align 8                                                             
		<%ID> = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* <%ID>, i32 <INT>, i32 <INT>                                

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
expected answer:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = call dereferenceable(24) { { { double*, i64, i64 } } }* <@ID>({ { double*, i64, i64 } }* nonnull <%ID>, { i8 }* nonnull dereferenceable(1) <%ID>)
		<%ID> = bitcast { double, double }* <%ID> to i64*                                                                       
		<%ID> = bitcast { i8 }* <%ID> to { { double*, i64, i64 } }**                                                            

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
expected answer:
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = getelementptr inbounds { double, double }, { double, double }* <%ID>, i64 <INT>, i32 <INT>                      
		call void <@ID>({ i8 }* nonnull <%ID>, i64 <%ID>, i64 <%ID>, { double, double }* nonnull dereferenceable(16) <%ID>)     
		<%ID> = call dereferenceable(24) { { { double*, i64, i64 } } }* <@ID>({ i8 }* <%ID>, i64 <%ID>, i64 <%ID>)              

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
		<%ID> = getelementptr inbounds { opaque*, opaque* }, { opaque*, opaque* }* <%ID>, i64 <INT>, i32 <INT>                  
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i64*                                                                     
		<%ID> = alloca { opaque*, opaque* }, align 8                                                                            

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
expected answer:
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
		define linkonce_odr dereferenceable(24) { { { i32*, i64, i64 } } }* <@ID>({ { i32*, i64, i64 } }*, { i8 }* dereferenceable(1)) local_unnamed_addr
		<%ID> = load { { i32*, i64, i64 } }*, { { i32*, i64, i64 } }** <%ID>, align 8                                           
		define linkonce_odr void <@ID>({ { { i32*, i64, i64 } } }* dereferenceable(24), <{ [8 x i8], <{ { i64 }, { i64 }, { i32 }, [4 x i8] }>, { { { i32*, i64, i64 } } }*, { i8 }, [7 x i8] }>* dereferenceable(48), { i8 }* dereferenceable(1)) local_unnamed_addr

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
Nearest neighbors:
		<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = getelementptr inbounds { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }* <%ID>, i64 <INT>, i32 <INT>
		<%ID> = getelementptr inbounds [100 x i8], [100 x i8]* <%ID>, i64 <INT>, i64 <INT>                                      
		invoke fastcc void <@ID>({ { i8* }, i64, { i64, [8 x i8] } }* noalias nonnull <%ID>)
 to label <%ID> unwind label <%ID> 

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
expected answer:
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
Nearest neighbors:
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = bitcast <{ { i64 }, { i64 }, { i8 }, [7 x i8] }>* <%ID> to <2 x i64>*                                           
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8**                                                            
		<%ID> = bitcast { double, double }* <%ID> to i64*                                                                       

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
expected answer:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
Nearest neighbors:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = bitcast { { { { <{ double*, { i64 }, { i8 } }> }, { { { double*, i64, i64 } } }*, { i64 }, { i64 }, i64 } } }* <%ID> to i8*
		<%ID> = load i8, i8* <%ID>, align 4                                                                                     
		<%ID> = getelementptr inbounds { double, double }, { double, double }* <%ID>, i64 <INT>, i32 <INT>                      

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
		define linkonce_odr { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }* <@ID>({ opaque*, { { opaque, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } } }, { { i64 } } }*, { { { { { { i64, i64, i8* } } } } } }** dereferenceable(8)) local_unnamed_addr
		call void <@ID>({ { { { { { { i64, i64, i8* } } } } } }* }* nonnull <%ID>, { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* <%ID>, { { { { { { i64, i64, i8* } } } } } }* bitcast ({ { i64, [16 x i8] } }* <@ID> to { { { { { { i64, i64, i8* } } } } } }*))
		define linkonce_odr void <@ID>({ { { { { { { i64, i64, i8* } } } } } }* }*, { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, { { { { { { i64, i64, i8* } } } } } }*) local_unnamed_addr

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
		<%ID> = bitcast { double, double }* <%ID> to i64*                                                                       
		<%ID> = getelementptr inbounds i8, i8* <%ID>, i64 <INT>                                                                 
		<%ID> = getelementptr inbounds { double, double }, { double, double }* <%ID>, i64 <INT>, i32 <INT>                      

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
Nearest neighbors:
		<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = getelementptr inbounds { { { i32 (...)** } }, { { i8* } }, { [1 x i32] }, i32, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, { { { { { { { i64, i64, i8* } } } } } }* }, <{ { { i32 (...)** } }, { { { opaque*, { { opaque } }, { { i64 } } } }, { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* }, { { i8* } }, { [1 x i32] }, i32, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, i8, i8, i8, i8, [4 x i8] }>* }, { { { i32 (...)** } }, { { i8* } }, { [1 x i32] }, i32, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, { { { { { { { i64, i64, i8* } } } } } }* }, <{ { { i32 (...)** } }, { { { opaque*, { { opaque } }, { { i64 } } } }, { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* }, { { i8* } }, { [1 x i32] }, i32, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, i8, i8, i8, i8, [4 x i8] }>* }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = getelementptr inbounds { i32, [1 x i8*] }, { i32, [1 x i8*] }* <%ID>, i64 <INT>, i32 <INT>, i64 <%ID>           
		<%ID> = phi { i32, [1 x i8*] }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
expected answer:
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
		<%ID> = bitcast { double, double }* <%ID> to i64*                                                                       
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
Nearest neighbors:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		<%ID> = bitcast { double, double }* <%ID> to i64*                                                                       
		<%ID> = add <2 x i64> <%ID>, <%ID>                                                                                      

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
Nearest neighbors:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> undef, <4 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef>      
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> <%ID>, <4 x i32> <i32 <INT>, i32 undef, i32 undef, i32 <INT>>      
		<%ID> = phi <2 x double> [ zeroinitializer, <%ID> ], [ <%ID>, <%ID> ]                                                   

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = phi i32 [ 0, <%ID> ], [ 0, <%ID> ], [ <%ID>, <%ID> ]                                                            
		<%ID> = tail call i32 <@ID>({ { { { i32*, i64, i64 } } }, { { { i32*, i64, i64 } } }*, { { i32*, { i64 } } }, { { i32*, { i64 } } }, i64 }* <%ID>, i64 <%ID>, i64 <%ID>)
		<%ID> = add nsw <4 x i32> <%ID>, <%ID>                                                                                  

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = bitcast i32* <%ID> to <16 x i8>*                                                                                
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = extractvalue { i64, i8 } <%ID>, 0                                                                               

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
expected answer:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
		<%ID> = xor <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = getelementptr inbounds { double, double }, { double, double }* <%ID>, i64 <INT>, i32 <INT>                      
		<%ID> = bitcast { double, double }* <%ID> to i64*                                                                       

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
expected answer:
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
Nearest neighbors:
		<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = alloca <4 x float>, align 16                                                                                    
		<%ID> = bitcast <2 x float>* <%ID> to i8*                                                                               
		store { { float*, { i64 } } }* <%ID>, { { float*, { i64 } } }** <%ID>, align 8                                          

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
expected answer:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> <%ID>, <4 x i32> <i32 <INT>, i32 undef, i32 undef, i32 <INT>>      
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> <%ID>, <4 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>      
		<%ID> = phi <4 x float> [ <%ID>, <%ID> ], [ zeroinitializer, <%ID> ]                                                    

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = shufflevector <4 x i32> <%ID>, <4 x i32> undef, <4 x i32> <i32 <INT>, i32 undef, i32 <INT>, i32 undef>          
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     
		<%ID> = add nsw <4 x i32> <%ID>, <%ID>                                                                                  

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = shufflevector <2 x i64> <%ID>, <2 x i64> <%ID>, <2 x i32> <i32 <INT>, i32 <INT>>                                
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = bitcast <8 x i16> <%ID> to <4 x i32>                                                                            
		<%ID> = getelementptr inbounds { { { { { { double*, { i8 }, { i64 } } }, { { { { { double*, { i8 }, { i64 } } }, { { { double*, i64, i64 } } }*, { i64 }, { i64 }, i64 } } }, { i8 }, { i64 }, i64 } } } }, { { { { { { double*, { i8 }, { i64 } } }, { { { { { double*, { i8 }, { i64 } } }, { { { double*, i64, i64 } } }*, { i64 }, { i64 }, i64 } } }, { i8 }, { i64 }, i64 } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = or <4 x i32> <%ID>, <%ID>                                                                                       

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = and <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                               
		<%ID> = phi <4 x float> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                              
		<%ID> = bitcast { double, double }* <%ID> to i64*                                                                       

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
expected answer:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = and <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = bitcast { double, double }* <%ID> to i64*                                                                       
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
expected answer:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = udiv i32 <%ID>, <%ID>                                                                                           
		<%ID> = extractelement <8 x i32> <%ID>, <TYP> 0                                                                         
		<%ID> = load <8 x float>, <8 x float>* <%ID>, align 16                                                                  

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
expected answer:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = tail call <8 x float> <@ID>(<8 x float> <%ID>, <8 x float> <%ID>)                                               
		<%ID> = load i8, i8* <%ID>, align 4                                                                                     
		<%ID> = bitcast { double, double }* <%ID> to i64*                                                                       

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast double* <%ID> to i64*                                                                                   
expected answer:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i64*                                                                                   
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = getelementptr inbounds { double, double }, { double, double }* <%ID>, i64 <INT>, i32 <INT>                      
		<%ID> = bitcast { double, double }* <%ID> to i64*                                                                       
		<%ID> = getelementptr inbounds { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x double] }, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x double] }* <%ID>, i64 <INT>, i32 <INT>, i64 <%ID>

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast double* <%ID> to i8*                                                                                    
expected answer:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = bitcast double* <%ID> to i8*                                                                                    
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([152 x i8], [152 x i8]* <@ID>, i64 <INT>, i64 <INT>))
		<%ID> = getelementptr inbounds { double, double }, { double, double }* <%ID>, i64 <INT>, i32 <INT>                      
		<%ID> = bitcast double* <%ID> to i64*                                                                                   

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast float <%ID> to i32                                                                                      
expected answer:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
Nearest neighbors:
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = phi i32 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      
		<%ID> = phi i32 [ <%ID>, <%ID> ], [ undef, <%ID> ]                                                                      
		<%ID> = select i1 <%ID>, float <%ID>, float <%ID>                                                                       

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast double <%ID> to i64                                                                                     
expected answer:
		<%ID> = bitcast i64 <%ID> to double                                                                                     
Nearest neighbors:
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = fcmp fast ogt double <%ID>, <%ID>                                                                               
		<%ID> = fcmp ogt double <%ID>, <%ID>                                                                                    
		<%ID> = tail call fast double <@ID>(double <%ID>)                                                                       

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast float* <%ID> to i8*                                                                                     
expected answer:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = bitcast { double, double }* <%ID> to i64*                                                                       
		<%ID> = getelementptr inbounds { double, double }, { double, double }* <%ID>, i64 <INT>, i32 <INT>                      
		call void <@ID>({ i32, i8*, i32, { { { { { { i64, i64, i8* } } } } } } }* nonnull <%ID>)                                

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		<%ID> = icmp eq i16 <%ID>, <%ID>                                                                                        
		<%ID> = sext i16 <%ID> to i32                                                                                           
		store i16 <%ID>, i16* <%ID>, align 2                                                                                    

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = bitcast { float }* <%ID> to i32*                                                                                
		<%ID> = phi i32 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      
		<%ID> = phi i8 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                       

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = load <2 x i64>, <2 x i64>* <%ID>, align 16                                                                      
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       
		<%ID> = alloca <2 x i64>, align 16                                                                                      

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		call void <@ID>({ { i32*, i32*, { { i32* } } } }* nonnull <%ID>, i32* nonnull dereferenceable(4) <%ID>)                 
		<%ID> = bitcast { double, double }* <%ID> to i64*                                                                       
		<%ID> = bitcast { { i32*, i32*, { { i32* } } } }* <%ID> to i64*                                                         

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = load <{ { { { { { { i64, i64, i8* } } } } } }, i32, [4 x i8] }>*, <{ { { { { { { i64, i64, i8* } } } } } }, i32, [4 x i8] }>** <%ID>, align 8
		call void <@ID>({ i32, i8*, i32, { { { { { { i64, i64, i8* } } } } } } }* nonnull <%ID>)                                
		<%ID> = bitcast { double, double }* <%ID> to i64*                                                                       

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<@ID> = internal constant [3 x i32] [i32 <INT>, i32 <INT>, i32 <INT>], align 4                                          
		<%ID> = alloca i32, align 4                                                                                             
		<%ID> = alloca { double, double }, align 8                                                                              

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to { { i8 }, [23 x i8] }*                                  
		<%ID> = alloca { double, double }, align 8                                                                              
		<%ID> = load i8, i8* <%ID>, align 4                                                                                     

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		define linkonce_odr void <@ID>({ { { i32*, i64, i64 } } }* dereferenceable(24), <{ { i64 }, { i64 }, { i32 }, [4 x i8] }>* dereferenceable(24), { i8 }* dereferenceable(1)) local_unnamed_addr
		define linkonce_odr void <@ID>({ { { i32*, i64, i64 } } }* dereferenceable(24), <{ [8 x i8], <{ { i64 }, { i64 }, { i32 }, [4 x i8] }>, { { { i32*, i64, i64 } } }*, { i8 }, [7 x i8] }>* dereferenceable(48), { i8 }* dereferenceable(1)) local_unnamed_addr
		<%ID> = tail call i32 <@ID>(i32 <%ID>)                                                                                  

<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = phi i64 [ 4, <%ID> ], [ <%ID>, <%ID> ]                                                                          
		<%ID> = load i8, i8* <%ID>, align 4                                                                                     
		<%ID> = sub nsw i32 <%ID>, <%ID>                                                                                        

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
expected answer:
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
Nearest neighbors:
		<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
		<%ID> = alloca { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }*, align 8                                              
		<%ID> = invoke dereferenceable(8) <{ opaque, opaque*, opaque*, i8, [7 x i8] }>** <@ID>({ opaque*, { { opaque } }, { { i64 } } }* <%ID>, { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** nonnull dereferenceable(8) <%ID>, { { { { { { i64, i64, i8* } } } } } }* nonnull dereferenceable(24) <%ID>)
 to label <%ID> unwind label <%ID>
		call void <@ID>({ { { { { { i64, i64, i8* } } } } } }* nonnull <%ID>, { { { { { { i64, i64, i8* } } } } } }* nonnull dereferenceable(24) <%ID>)
		<%ID> = call dereferenceable(8) <{ opaque, opaque*, opaque*, i8, [7 x i8] }>** <@ID>({ opaque*, { { opaque } }, { { i64 } } }* <%ID>, { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** nonnull dereferenceable(8) <%ID>, { { { { { { i64, i64, i8* } } } } } }* nonnull dereferenceable(24) <%ID>)

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
expected answer:
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		define linkonce_odr { double, double } <@ID>({ double, double }* dereferenceable(16), { double, double }* dereferenceable(16)) local_unnamed_addr
		<%ID> = shufflevector <2 x double> <%ID>, <2 x double> undef, <2 x i32> <i32 <INT>, i32 <INT>>                          
		<%ID> = getelementptr inbounds { double, double }, { double, double }* <%ID>, i64 <%ID>, i32 <INT>                      
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = getelementptr inbounds { double, double }, { double, double }* <%ID>, i64 <%ID>, i32 <INT>                      
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
		<%ID> = load <2 x i64>*, <2 x i64>** <%ID>, align 8                                                                     

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
expected answer:
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = alloca { double, double }, align 8                                                                              
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
		<%ID> = bitcast { double, double }* <%ID> to i64*                                                                       
		store double <FLOAT>, double* <%ID>, align 8                                                                            

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
expected answer:
		<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
Nearest neighbors:
		<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
		<%ID> = phi float [ <%ID>, <%ID> ], [ <FLOAT>, <%ID> ]                                                                  
		store <2 x float> <%ID>, <2 x float>* <%ID>, align 4                                                                    
		<%ID> = alloca { float, float }, align 4                                                                                
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
expected answer:
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
Nearest neighbors:
		<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
		<%ID> = alloca { float, float }, align 4                                                                                
		<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
		<%ID> = alloca <2 x float>, align 8                                                                                     
		<@ID> = private unnamed_addr constant [35 x i8]  <STRING>, align 1                                                      

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
expected answer:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = bitcast { i8 }* <%ID> to { { { { double*, i64 } } }* }*                                                         
		<%ID> = bitcast { { double*, i64 } }* <%ID> to { { { double*, i64 } } }*                                                
		<%ID> = bitcast { i8 }* <%ID> to { { double*, i64 } }**                                                                 
		call void <@ID>({ { { double*, i64 } } }* nonnull dereferenceable(16) <%ID>, { { { { double*, i64 } } }* }* nonnull dereferenceable(8) <%ID>, { i8 }* nonnull dereferenceable(1) <%ID>)

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
expected answer:
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		ret { { { double*, i64, i64 } } }* <%ID>                                                                                
		<%ID> = call dereferenceable(24) { { { double*, i64, i64 } } }* <@ID>({ i8 }* <%ID>, i64 <%ID>, i64 <%ID>)              
		<%ID> = alloca { { { double*, { i8 }, { i64 } } } }, align 8                                                            
		<%ID> = bitcast { { { { <{ double*, { i8 }, { i8 } }> }, { { { double*, i64 } } }*, { i64 }, { i64 }, i64 } } }* <%ID> to { i8 }*

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
Nearest neighbors:
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
		<%ID> = getelementptr inbounds { opaque*, opaque* }, { opaque*, opaque* }* <%ID>, i64 <INT>, i32 <INT>                  
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i64*                                                                     
		<%ID> = alloca { opaque*, opaque* }, align 8                                                                            
		<%ID> = getelementptr inbounds { i8, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }, i8, i8, { { { { { { i64, i64, i8* } } } } } }, i8, i8, i8, { { { { { { i64, i64, i8* } } } } } }, i8, i8, i32, i32, i64 }, { i8, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }, i8, i8, { { { { { { i64, i64, i8* } } } } } }, i8, i8, i8, { { { { { { i64, i64, i8* } } } } } }, i8, i8, i32, i32, i64 }* <%ID>, i64 <INT>, i32 <INT>

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
expected answer:
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
Nearest neighbors:
		<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
		<%ID> = bitcast { { i32*, i64 } }* <%ID> to { { { i32*, i64 } } }*                                                      
		<%ID> = phi { { { i32*, i64, i64 } } }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                              
		<%ID> = load { { { i32*, i64 } } }*, { { { i32*, i64 } } }** <%ID>, align 8                                             

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
Nearest neighbors:
		<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
		<%ID> = invoke i8* <@ID>({ { i8* }, i64, { i64, [8 x i8] } }* nonnull <%ID>, i64* nonnull dereferenceable(8) <%ID>, i64 <INT>)
 to label <%ID> unwind label <%ID>
		<%ID> = getelementptr inbounds { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>
		<%ID> = alloca { { i8* }, i64, { i64, [8 x i8] } }, align 8                                                             
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
expected answer:
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
Nearest neighbors:
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
		<%ID> = bitcast { { { double*, i64 } } }* <%ID> to i8*                                                                  
		<%ID> = alloca { { { double*, i64 } } }, align 8                                                                        
		<%ID> = bitcast { { { double*, i64 } } }* <%ID> to { i8 }*                                                              
		<%ID> = alloca { <{ double*, { i8 } }>, [7 x i8] }, align 8                                                             

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
expected answer:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
Nearest neighbors:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
		<%ID> = bitcast { { { double*, i64 } } }** <%ID> to i8*                                                                 
		call void <@ID>({ i8 }* <%ID>, i64 <%ID>)                                                                               
		<%ID> = bitcast { { { { <{ double*, { i64 }, { i8 } }> }, { { { double*, i64 } } }*, { i64 }, { i64 }, i64 } } }* <%ID> to i8*

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
		invoke void <@ID>({ { { { { { { i64, i64, i8* } } } } } }* }* nonnull <%ID>, { { { { { { i64, i64, i8* } } } } } }* nonnull <%ID>)
 to label <%ID> unwind label <%ID>
		<%ID> = alloca { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } }, align 8
		<%ID> = icmp eq { { { { { { i64, i64, i8* } } } } } }* <%ID>, bitcast ({ { i64, [16 x i8] } }* <@ID> to { { { { { { i64, i64, i8* } } } } } }*)

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
Nearest neighbors:
		<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
		invoke void <@ID>({ { { { { { { i64, i64, i8* } } } } } }* }* nonnull <%ID>, { { { { { { i64, i64, i8* } } } } } }* nonnull <%ID>)
 to label <%ID> unwind label <%ID>
		<%ID> = icmp eq { i32, [1 x i8*] }* <%ID>, null                                                                         
		<%ID> = bitcast i8** <%ID> to { { i32 (...)** } }**                                                                     
		<%ID> = getelementptr inbounds { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
expected answer:
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
Nearest neighbors:
		<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
		<%ID> = alloca <2 x double>, align 16                                                                                   
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
		<%ID> = getelementptr inbounds { opaque*, opaque* }, { opaque*, opaque* }* <%ID>, i64 <INT>, i32 <INT>                  

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
Nearest neighbors:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
		store i16 <INT>, i16* <%ID>, align 8                                                                                    
		<@ID> = private unnamed_addr constant [35 x i8]  <STRING>, align 1                                                      
		define linkonce_odr void <@ID>({ { { double*, i64 } } }* dereferenceable(16), { { i8 }, { i64 }, { double } }* dereferenceable(24), { i8 }* dereferenceable(1)) local_unnamed_addr

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = shufflevector <16 x i8> <%ID>, <16 x i8> <%ID>, <16 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
		<%ID> = bitcast i32* <%ID> to <16 x i8>*                                                                                

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
expected answer:
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
Nearest neighbors:
		<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
		<%ID> = alloca <4 x float>, align 16                                                                                    
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> undef, <4 x i32> zeroinitializer                                   
		store <4 x float> <%ID>, <4 x float>* <%ID>, align 16                                                                   
		<%ID> = alloca <2 x i64>, align 16                                                                                      

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
expected answer:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> <%ID>, <4 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>      
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> undef, <4 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef>      
		<%ID> = shufflevector <2 x double> <%ID>, <2 x double> undef, <2 x i32> zeroinitializer                                 

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     
		<%ID> = shufflevector <4 x i32> <%ID>, <4 x i32> undef, <4 x i32> <i32 <INT>, i32 undef, i32 <INT>, i32 undef>          
		<%ID> = bitcast <2 x i64> <%ID> to <4 x float>                                                                          
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast <8 x i16> <%ID> to <4 x i32>                                                                            
		<%ID> = getelementptr inbounds { { { { [45 x i32] } } } }, { { { { [45 x i32] } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i64 <INT>
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     
		call void <@ID>({ { { i32*, i64 } } }* nonnull dereferenceable(16) <%ID>, { { i64 }, { i8 }, { i32 } }* nonnull dereferenceable(16) <%ID>, { i8 }* nonnull dereferenceable(1) <%ID>)

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = and <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                               
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
		<%ID> = phi <4 x float> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                              
		<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
expected answer:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = and <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = call fast <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            
		<%ID> = call fast <4 x double> <@ID>(<4 x double> <%ID>)                                                                

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
expected answer:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = and <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   
		<%ID> = phi <8 x float> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                              
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
		<@ID> = private unnamed_addr constant [41 x i8]  <STRING>, align 1                                                      

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast double* <%ID> to i64*                                                                                   
expected answer:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i64*                                                                                   
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
		<%ID> = bitcast { double }* <%ID> to i64*                                                                               
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
		<%ID> = bitcast { i64, i64 }* <%ID> to i8*                                                                              

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast double* <%ID> to i8*                                                                                    
expected answer:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i8*                                                                                    
		<%ID> = bitcast { double }* <%ID> to i64*                                                                               
		<%ID> = alloca double, align 8                                                                                          
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
		<@ID> = private unnamed_addr constant [35 x i8]  <STRING>, align 1                                                      

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast float <%ID> to i32                                                                                      
expected answer:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
Nearest neighbors:
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = select i1 <%ID>, float <%ID>, float <%ID>                                                                       
		<%ID> = fcmp olt float <%ID>, <%ID>                                                                                     
		<%ID> = fcmp fast olt float <%ID>, <%ID>                                                                                
		<%ID> = phi i32 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast double <%ID> to i64                                                                                     
expected answer:
		<%ID> = bitcast i64 <%ID> to double                                                                                     
Nearest neighbors:
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = select i1 <%ID>, double <%ID>, double <%ID>                                                                     
		<%ID> = fcmp ogt double <%ID>, <%ID>                                                                                    
		<%ID> = phi i64 [ <%ID>, <%ID> ], [ undef, <%ID> ]                                                                      
		<%ID> = fcmp fast ogt double <%ID>, <%ID>                                                                               

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast float* <%ID> to i8*                                                                                     
expected answer:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
Nearest neighbors:
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
		<@ID> = private unnamed_addr constant [25 x i8]  <STRING>, align 1                                                      
		<@ID> = private unnamed_addr constant [8 x i8]  <STRING>, align 1                                                       
		<%ID> = bitcast i64* <%ID> to i8*                                                                                       

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
		store i16 <%ID>, i16* <%ID>, align 4                                                                                    
		<%ID> = sext i16 <%ID> to i64                                                                                           

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
		<%ID> = bitcast { double }* <%ID> to i64*                                                                               
		<%ID> = fsub fast float <%ID>, <%ID>                                                                                    
		<@ID> = private unnamed_addr constant [24 x i8]  <STRING>, align 1                                                      

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       
		store <2 x i64> <%ID>, <2 x i64>* <%ID>, align 16                                                                       
		<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = load <2 x i64>, <2 x i64>* <%ID>, align 16                                                                      

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		call void <@ID>({ { i32*, i32*, { { i32* } } } }* nonnull <%ID>, i32* nonnull dereferenceable(4) <%ID>)                 
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
		<%ID> = bitcast { { i32*, i32*, { { i32* } } } }* <%ID> to i64*                                                         
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
		<%ID> = getelementptr inbounds { opaque*, opaque* }, { opaque*, opaque* }* <%ID>, i64 <INT>, i32 <INT>                  
		<%ID> = bitcast { double }* <%ID> to i64*                                                                               
		<%ID> = load i64, i64* <@ID>, align 8                                                                                   

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
		call void <@ID>({ { i32*, i32*, { { i32* } } } }* nonnull <%ID>, i32* nonnull dereferenceable(4) <%ID>)                 
		<@ID> = private unnamed_addr constant [8 x i8]  <STRING>, align 1                                                       
		<@ID> = private unnamed_addr constant [35 x i8]  <STRING>, align 1                                                      

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
		<@ID> = private unnamed_addr constant [24 x i8]  <STRING>, align 1                                                      
		<@ID> = private unnamed_addr constant [35 x i8]  <STRING>, align 1                                                      

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
		<@ID> = private unnamed_addr constant [26 x i8]  <STRING>, align 1                                                      
		call void <@ID>({ { i32*, i32*, { { i32* } } } }* nonnull <%ID>, i32* nonnull dereferenceable(4) <%ID>)                 
		<%ID> = load { { { i32*, i64 } } }*, { { { i32*, i64 } } }** <%ID>, align 8                                             

<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
		<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
		<%ID> = icmp eq i32* <%ID>, null                                                                                        
		<%ID> = load <2 x i64>, <2 x i64>* <%ID>, align 32                                                                      

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
expected answer:
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
		<%ID> = shufflevector <2 x double> <%ID>, <2 x double> undef, <2 x i32> <i32 <INT>, i32 <INT>>                          
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
		tail call void <@ID>(i8* nonnull <%ID>, i8 <INT>, i64 <INT>, i32 <INT>, i1 false)                                       
		<%ID> = tail call double <@ID>(double <%ID>, double <%ID>)                                                              

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
		<%ID> = lshr i64 <%ID>, <%ID>                                                                                           
		<%ID> = phi i64 [ <%ID>, <%ID> ]                                                                                        
		<%ID> = getelementptr { double, double }, { double, double }* <%ID>, i64 <%ID>                                          

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
expected answer:
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = bitcast { double, double }* <%ID> to i64*                                                                       
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
		<%ID> = alloca { double, double }, align 8                                                                              
		tail call void <@ID>(i8* nonnull <%ID>, i8 <INT>, i64 <INT>, i32 <INT>, i1 false)                                       

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
expected answer:
		<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
Nearest neighbors:
		<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
		<%ID> = load { float, float }*, { float, float }** <%ID>, align 8                                                       
		<%ID> = phi float [ <%ID>, <%ID> ], [ <FLOAT>, <%ID> ]                                                                  
		<%ID> = phi <2 x float> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                              
		ret <2 x float> <%ID>                                                                                                   

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
expected answer:
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
Nearest neighbors:
		<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
		<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
		<%ID> = load { float, float }*, { float, float }** <%ID>, align 8                                                       
		<%ID> = bitcast <2 x float>* <%ID> to i8*                                                                               

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
expected answer:
		<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
Nearest neighbors:
		<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
		<%ID> = getelementptr inbounds { { i64*, i64 } }, { { i64*, i64 } }* <%ID>, i32 <INT>, i32 <INT>                        
		store { { i64*, i64 } }* <%ID>, { { i64*, i64 } }** <%ID>, align 8                                                      
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
		<%ID> = alloca { { i64*, i64 } }*, align 8                                                                              

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
expected answer:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = bitcast { i8 }* <%ID> to { { { { double*, i64 } } }* }*                                                         
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
		<%ID> = bitcast { i8 }* <%ID> to { { double*, i64, i64 } }**                                                            
		<%ID> = phi { { { { i32*, i64 } } } }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                               

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
expected answer:
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = call dereferenceable(24) { { { double*, i64, i64 } } }* <@ID>({ i8 }* <%ID>, i64 <%ID>, i64 <%ID>)              
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
		ret { { { double*, i64, i64 } } }* <%ID>                                                                                
		<%ID> = bitcast { i8 }* <%ID> to i8**                                                                                   

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
Nearest neighbors:
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
		<%ID> = getelementptr inbounds { opaque*, opaque* }, { opaque*, opaque* }* <%ID>, i64 <INT>, i32 <INT>                  
		<%ID> = icmp eq { opaque*, opaque* }* <%ID>, <%ID>                                                                      
		<%ID> = load { opaque*, opaque* }*, { opaque*, opaque* }** <%ID>, align 8                                               

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
expected answer:
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
Nearest neighbors:
		<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
		<%ID> = phi { { { i32*, i64, i64 } } }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                              
		<%ID> = load { { i32*, i64, i64 } }*, { { i32*, i64, i64 } }** <%ID>, align 8                                           
		<%ID> = load { { { i32*, i64 } } }*, { { { i32*, i64 } } }** <%ID>, align 8                                             

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
Nearest neighbors:
		<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
		<%ID> = load <{ { i32 (...)**, i32, i32, i32, i8**, { { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, i32, i8* }*, i8, { { i8* }, i64, { i64, [8 x i8] } }, { i32, i32, i32, i32, i32 }, i8, i8, i8, { { i8* }, i64, { i64, [8 x i8] } } }, i8, i8, i8, i8, i8, [3 x i8], i32, i32, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, i8, [7 x i8] }>*, <{ { i32 (...)**, i32, i32, i32, i8**, { { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, i32, i8* }*, i8, { { i8* }, i64, { i64, [8 x i8] } }, { i32, i32, i32, i32, i32 }, i8, i8, i8, { { i8* }, i64, { i64, [8 x i8] } } }, i8, i8, i8, i8, i8, [3 x i8], i32, i32, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, i8, [7 x i8] }>** <%ID>, align 8
		call void <@ID>(i8* nonnull <%ID>)                                                                                      
		<%ID> = call i32 <@ID>(opaque* nonnull <%ID>)                                                                           

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
expected answer:
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
Nearest neighbors:
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8**                                                            
		<%ID> = bitcast { { { double*, i64 } } }* <%ID> to i8**                                                                 
		<%ID> = bitcast { { { double*, i64 } } }* <%ID> to { i8 }*                                                              

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
expected answer:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
Nearest neighbors:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
		<%ID> = bitcast { { { i64*, i64 } } }* <%ID> to i8**                                                                    
		<%ID> = bitcast { i8 }* <%ID> to i8**                                                                                   
		tail call void <@ID>(i8* nonnull <%ID>, i8 <INT>, i64 <INT>, i32 <INT>, i1 false)                                       

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
		tail call void <@ID>(i8* nonnull <%ID>)                                                                                 
		<%ID> = tail call i8* <@ID>(i64 <INT>)                                                                                  
		<%ID> = bitcast i8** <%ID> to { { opaque*, { { opaque, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } } }, { { i64 } } } }**

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
		call void <@ID>(i8* nonnull <%ID>)                                                                                      
		<%ID> = bitcast i8* <%ID> to { <{ opaque, <{ opaque, opaque*, opaque*, i8, [7 x i8] }>*, opaque*, i8 }>, { { { { { { i64, i64, i8* } } } } } }* }**
		<%ID> = bitcast i8* <%ID> to <2 x i64>*                                                                                 

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
Nearest neighbors:
		<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
		<%ID> = getelementptr inbounds { { opaque*, { { opaque, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } } }, { { i64 } } } }, { { opaque*, { { opaque, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } } }, { { i64 } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>
		<%ID> = getelementptr inbounds { { opaque*, { { opaque, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } } }, { { i64 } } } }, { { opaque*, { { opaque, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } } }, { { i64 } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = getelementptr inbounds { i32, [1 x i8*] }, { i32, [1 x i8*] }* <%ID>, i64 <INT>, i32 <INT>, i64 <%ID>           

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
expected answer:
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
Nearest neighbors:
		<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
		tail call void <@ID>(i8* nonnull <%ID>, i8 <INT>, i64 <INT>, i32 <INT>, i1 false)                                       
		<%ID> = getelementptr inbounds { { opaque*, { { opaque, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } } }, { { i64 } } } }, { { opaque*, { { opaque, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } } }, { { i64 } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = icmp ne i8 <%ID>, <INT>                                                                                         

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
Nearest neighbors:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
		<%ID> = tail call <16 x i8> <@ID>(<16 x i8> <%ID>, <16 x i8> <%ID>)                                                     
		<%ID> = bitcast { { opaque*, { { opaque, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } } }, { { i64 } } } }* <%ID> to i8*
		<%ID> = bitcast i8** <%ID> to { { opaque*, { { opaque, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } } }, { { i64 } } } }**

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
Nearest neighbors:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> undef, <4 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef>      
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
		<%ID> = fadd <2 x double> <%ID>, zeroinitializer                                                                        
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
		<%ID> = bitcast i32* <%ID> to <16 x i8>*                                                                                
		<%ID> = load <4 x double>, <4 x double>* <%ID>, align 1                                                                 

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
expected answer:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
		<%ID> = xor <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = phi { double, double }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                      
		<%ID> = phi <4 x i64> [ <%ID>, <%ID> ], [ zeroinitializer, <%ID> ]                                                      
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
expected answer:
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
Nearest neighbors:
		<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
		<%ID> = getelementptr inbounds { <{ float*, { i8 } }>, [7 x i8] }, { <{ float*, { i8 } }>, [7 x i8] }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>
		tail call void <@ID>(i8* nonnull <%ID>, i8 <INT>, i64 <INT>, i32 <INT>, i1 false)                                       
		<%ID> = bitcast <8 x float>* <%ID> to i8*                                                                               

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
		<%ID> = shufflevector <4 x i32> <%ID>, <4 x i32> undef, <4 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>          
		<%ID> = bitcast <2 x i64> <%ID> to <4 x float>                                                                          

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = shufflevector <2 x i64> <%ID>, <2 x i64> <%ID>, <2 x i32> <i32 <INT>, i32 <INT>>                                
		<%ID> = shl i64 <%ID>, <%ID>                                                                                            

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
		<%ID> = tail call <16 x i8> <@ID>(<16 x i8> <%ID>, <16 x i8> <%ID>)                                                     
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
		<%ID> = or <4 x i32> <%ID>, <%ID>                                                                                       
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = and <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                               
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
		<%ID> = tail call fast <4 x float> <@ID>(<4 x float> <%ID>, <4 x float> <%ID>)                                          
		<%ID> = call fast <4 x float> <@ID>(<4 x float> <%ID>, <4 x float> <%ID>)                                               

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
expected answer:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            
		<%ID> = and <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
		<%ID> = tail call fast <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                       

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
expected answer:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
		<%ID> = xor <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   
		<%ID> = and <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   
		<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast double* <%ID> to i64*                                                                                   
expected answer:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i64*                                                                                   
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
		<%ID> = getelementptr inbounds { { opaque*, { { opaque, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } } }, { { i64 } } } }, { { opaque*, { { opaque, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } } }, { { i64 } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = getelementptr inbounds { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x double] }, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x double] }* <%ID>, i64 <INT>, i32 <INT>, i64 <%ID>
		<%ID> = lshr i64 <%ID>, <%ID>                                                                                           

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast double* <%ID> to i8*                                                                                    
expected answer:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i8*                                                                                    
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
		<%ID> = shl i64 <%ID>, <%ID>                                                                                            
		<%ID> = ptrtoint { i64, i64, i64, i64, i8**, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }* <%ID> to i64
		tail call void <@ID>(i8* <%ID>, i8 <INT>, i64 <%ID>, i32 <INT>, i1 false)                                               

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast float <%ID> to i32                                                                                      
expected answer:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
Nearest neighbors:
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = select i1 <%ID>, float <%ID>, float <%ID>                                                                       
		<%ID> = tail call float <@ID>(float <%ID>)                                                                              
		<%ID> = fcmp ogt float <%ID>, <%ID>                                                                                     
		<%ID> = fmul float <%ID>, <%ID>                                                                                         

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast double <%ID> to i64                                                                                     
expected answer:
		<%ID> = bitcast i64 <%ID> to double                                                                                     
Nearest neighbors:
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
		<%ID> = phi i64 [ 2, <%ID> ], [ 1, <%ID> ]                                                                              
		<%ID> = select i1 <%ID>, double <%ID>, double <%ID>                                                                     
		<%ID> = phi i64 [ <%ID>, <%ID> ], [ undef, <%ID> ]                                                                      

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast float* <%ID> to i8*                                                                                     
expected answer:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
Nearest neighbors:
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
		<%ID> = getelementptr inbounds { { opaque*, { { opaque, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } } }, { { i64 } } } }, { { opaque*, { { opaque, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } } }, { { i64 } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		tail call void <@ID>(i8* nonnull <%ID>, i8 <INT>, i64 <INT>, i32 <INT>, i1 false)                                       
		<%ID> = getelementptr inbounds { { opaque*, { { opaque, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } } }, { { i64 } } } }, { { opaque*, { { opaque, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } } }, { { i64 } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
		<%ID> = getelementptr i16, i16* <%ID>, i64 <%ID>                                                                        
		<%ID> = shl i64 <%ID>, <%ID>                                                                                            
		<%ID> = getelementptr inbounds i16, i16* <%ID>, i64 <%ID>                                                               

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = fmul float <%ID>, <%ID>                                                                                         
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
		<%ID> = lshr i64 <%ID>, <INT>                                                                                           
		<%ID> = fcmp une float <%ID>, <FLOAT>                                                                                   

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = load <2 x i64>, <2 x i64>* <%ID>, align 16                                                                      
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
		tail call void <@ID>(i8* nonnull <%ID>, i8* <%ID>, i64 <%ID>, i32 <INT>, i1 false)                                      
		<%ID> = lshr i64 <%ID>, <%ID>                                                                                           
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
		<%ID> = shl i64 <%ID>, <%ID>                                                                                            
		<%ID> = getelementptr inbounds { { opaque*, { { opaque, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } } }, { { i64 } } } }, { { opaque*, { { opaque, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } } }, { { i64 } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = lshr i64 <%ID>, <%ID>                                                                                           

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
		store <2 x i64> <%ID>, <2 x i64>* <%ID>, align 8                                                                        
		<%ID> = getelementptr inbounds { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* }, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* }* <%ID>, i64 <INT>, i32 <INT>
		tail call void <@ID>(i8* getelementptr inbounds ([7 x i8], [7 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([78 x i8], [78 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([399 x i8], [399 x i8]* <@ID>, i64 <INT>, i64 <INT>))

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
		<%ID> = bitcast i8** <%ID> to { { opaque*, { { opaque, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } } }, { { i64 } } } }**
		<%ID> = getelementptr inbounds { { opaque*, { { opaque, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } } }, { { i64 } } } }, { { opaque*, { { opaque, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } } }, { { i64 } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = getelementptr inbounds { { opaque*, { { opaque, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } } }, { { i64 } } } }, { { opaque*, { { opaque, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } } }, { { i64 } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
		call void <@ID>(i8* nonnull <%ID>)                                                                                      
		<%ID> = getelementptr inbounds { { { { { { { i64, i64, i8* } } } } } }, { { { i32 (...)** } }, { { i8* } }, { double }, i32, [1 x i32] } }, { { { { { { { i64, i64, i8* } } } } } }, { { { i32 (...)** } }, { { i8* } }, { double }, i32, [1 x i32] } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = getelementptr inbounds { { opaque*, { { opaque, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } } }, { { i64 } } } }, { { opaque*, { { opaque, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } } }, { { i64 } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>

<%ID> = bitcast { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID> to i8*                                        
<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        
		<%ID> = phi i32* [ null, <%ID> ], [ <%ID>, <%ID> ], [ null, <%ID> ]                                                     
		<%ID> = icmp ne i8* <%ID>, <%ID>                                                                                        
		call void <@ID>(i8* nonnull <%ID>)                                                                                      

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
		<%ID> = bitcast { float*, { { [1 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { float*, { { [1 x i64] } } }* }* <%ID> to i64*
		switch i32 <%ID>, label <%ID> [
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>]
		<%ID> = getelementptr inbounds [256 x i8], [256 x i8]* <%ID>, i64 <INT>, i64 <%ID>                                      

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
expected answer:
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		<%ID> = alloca { double, double }, align 8                                                                              
		<%ID> = tail call i64 <@ID>(i8* <%ID>, i1 false)                                                                        

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
expected answer:
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
Nearest neighbors:
		<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
		<%ID> = bitcast <2 x float>* <%ID> to i8*                                                                               
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
		<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
		store { float, float }* <%ID>, { float, float }** <%ID>, align 8                                                        

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
expected answer:
		<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
Nearest neighbors:
		<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
		<%ID> = getelementptr inbounds { { i64*, i64 } }, { { i64*, i64 } }* <%ID>, i32 <INT>, i32 <INT>                        
		invoke void <@ID>({ i8 }* <%ID>, { i64*, i64 }* dereferenceable(16) <%ID>, i64* <%ID>, i64* <%ID>, i64 <%ID>, i64 <%ID>, i64 <%ID>, i64 <%ID>, i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>)
 to label <%ID> unwind label <%ID>
		store { { i64*, i64 } }* <%ID>, { { i64*, i64 } }** <%ID>, align 8                                                      
		store { i64*, i64 }* <%ID>, { i64*, i64 }** <%ID>, align 8                                                              

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
expected answer:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = phi { { { { i32*, i64 } } } }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                               
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
		<%ID> = bitcast { i8 }* <%ID> to { { double*, i64, i64 } }**                                                            
		<%ID> = bitcast { { { double*, i64, i64 } } }** <%ID> to { { double*, i64, i64 } }**                                    

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
expected answer:
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([152 x i8], [152 x i8]* <@ID>, i64 <INT>, i64 <INT>))
		define linkonce_odr void <@ID>(<{ { { { double*, i64, i64 } } }, { { { { i32*, i64 } } } }, { { { { i32*, i64 } } } }, { { { i64*, i64 } } }, { { { i64*, i64 } } }, i64, double, double, double, i8, i8, i8, [5 x i8] }>*, { i8 }* dereferenceable(1)) unnamed_addr
		define linkonce_odr double <@ID>({ { <{ { { { double*, i64, i64 } } }*, { i8 }, [7 x i8] }>, { i8 }, [7 x i8] }, { [8 x i8], <{ { { { double*, i64, i64 } } }*, { i8 }, [7 x i8] }>, { i8 }, [7 x i8] }* }* dereferenceable(32), { i8 }* dereferenceable(1)) local_unnamed_addr

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
Nearest neighbors:
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i64*                                                                     
		<%ID> = getelementptr inbounds { opaque*, opaque* }, { opaque*, opaque* }* <%ID>, i64 <INT>, i32 <INT>                  
		<%ID> = alloca { opaque*, opaque* }, align 8                                                                            
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
expected answer:
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
Nearest neighbors:
		<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
		<%ID> = getelementptr inbounds { <{ { { { i32*, i64 } } }*, { { { i32*, i64 } } }*, { i8 }, [7 x i8] }>, { { { i32*, i64, i64 } } }* }, { <{ { { { i32*, i64 } } }*, { { { i32*, i64 } } }*, { i8 }, [7 x i8] }>, { { { i32*, i64, i64 } } }* }* <%ID>, i64 <INT>, i32 <INT>
		call void <@ID>({ { { i32*, i64 } } }* nonnull dereferenceable(16) <%ID>, { { { { { i32*, i64 } } }* }, { { { { i32*, i64, i64 } } }* } }* nonnull dereferenceable(16) <%ID>, { i8 }* nonnull dereferenceable(1) <%ID>)
		call void <@ID>({ { { i32*, i64, i64 } } }* nonnull dereferenceable(24) <%ID>, { { { i32*, i64, i64 } } }* nonnull dereferenceable(24) <%ID>, { i8 }* nonnull dereferenceable(1) <%ID>)
		call void <@ID>({ { { i32*, i64 } } }* nonnull dereferenceable(16) <%ID>, { { { { { i32*, i64 } } }* }, { { { { i32*, i64, i64 } } }* } }* nonnull dereferenceable(16) <%ID>, { i8 }* nonnull dereferenceable(1) <%ID>, i8* null)

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
Nearest neighbors:
		<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
		<%ID> = getelementptr inbounds [1024 x i8], [1024 x i8]* <%ID>, i64 <INT>, i64 <INT>                                    
		<%ID> = getelementptr inbounds { <{ { i8*, i64 }, i32 }>, [4 x i8] }, { <{ { i8*, i64 }, i32 }>, [4 x i8] }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = call i32 <@ID>(opaque* nonnull <%ID>)                                                                           

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
expected answer:
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
Nearest neighbors:
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
		<%ID> = getelementptr inbounds { { { { [16 x double] } } } }, { { { { [16 x double] } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i64 <INT>
		<%ID> = getelementptr inbounds { { { { [32 x double] } } } }, { { { { [32 x double] } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i64 <INT>
		<%ID> = getelementptr inbounds { { { double*, i64 } } }, { { { double*, i64 } } }* <%ID>, i64 <INT>, i32 <INT>          

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
expected answer:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
Nearest neighbors:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = getelementptr inbounds { { { { { <{ double*, { i64 }, { i8 } }> }, { { { { <{ double*, { i64 }, { i8 } }> }, { { { double*, i64, i64 } } }*, { i64 }, { i64 }, i64 } } }, { i64 }, { i8 }, i64 } } }, { { { { { double*, { i8 }, { i64 } } }, { { { { { double*, { i8 }, { i64 } } }, { { { double*, i64, i64 } } }*, { i64 }, { i64 }, i64 } } }, { i8 }, { i64 }, i64 } } } }, { { { { { <{ double*, { i64 }, { i8 } }> }, { { { { <{ double*, { i64 }, { i8 } }> }, { { { double*, i64, i64 } } }*, { i64 }, { i64 }, i64 } } }, { i64 }, { i8 }, i64 } } }, { { { { { double*, { i8 }, { i64 } } }, { { { { { double*, { i8 }, { i64 } } }, { { { double*, i64, i64 } } }*, { i64 }, { i64 }, i64 } } }, { i8 }, { i64 }, i64 } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
		<%ID> = getelementptr inbounds { { { { { <{ double*, { i64 }, { i8 } }> }, { { { { <{ double*, { i64 }, { i8 } }> }, { { { double*, i64, i64 } } }*, { i64 }, { i64 }, i64 } } }, { i64 }, { i8 }, i64 } } }, { { { { { double*, { i8 }, { i64 } } }, { { { { { double*, { i8 }, { i64 } } }, { { { double*, i64, i64 } } }*, { i64 }, { i64 }, i64 } } }, { i8 }, { i64 }, i64 } } } }, { { { { { <{ double*, { i64 }, { i8 } }> }, { { { { <{ double*, { i64 }, { i8 } }> }, { { { double*, i64, i64 } } }*, { i64 }, { i64 }, i64 } } }, { i64 }, { i8 }, i64 } } }, { { { { { double*, { i8 }, { i64 } } }, { { { { { double*, { i8 }, { i64 } } }, { { { double*, i64, i64 } } }*, { i64 }, { i64 }, i64 } } }, { i8 }, { i64 }, i64 } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = getelementptr inbounds [256 x i8], [256 x i8]* <%ID>, i64 <INT>, i64 <%ID>                                      

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
		<@ID> = private unnamed_addr constant [41 x i8]  <STRING>, align 1                                                      
		<@ID> = private unnamed_addr constant [2 x i8]  <STRING>, align 1                                                       
		invoke void <@ID>({ { { { { { i64, i64, i8* } } } } } }* nonnull sret <%ID>, { { { { { { i64, i64, i8* } } } } } }* nonnull dereferenceable(24) <%ID>, i8* getelementptr inbounds ([2 x i8], [2 x i8]* <@ID>, i64 <INT>, i64 <INT>))
 to label <%ID> unwind label <%ID>
		<@ID> = private unnamed_addr constant [22 x i8]  <STRING>, align 1                                                      

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
		invoke void <@ID>({ { { { { { i64, i64, i8* } } } } } }* nonnull <%ID>, i64 <INT>)
 to label <%ID> unwind label <%ID>   
		call void <@ID>({ { { i32 (...)** } }, { { i8* } }, { { { { { { { { i64, i64, i8* } } } } } }* } }, i32, [1 x i32] }* nonnull <%ID>)
		invoke void <@ID>({ { { { { { i64, i64, i8* } } } } } }* nonnull <%ID>, { { { { { { i64, i64, i8* } } } } } }* nonnull dereferenceable(24) <%ID>)
 to label <%ID> unwind label <%ID>

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
Nearest neighbors:
		<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
		<%ID> = bitcast i8** <%ID> to { { i32 (...)** } }**                                                                     
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
		<%ID> = getelementptr inbounds { i32, [1 x i8*] }, { i32, [1 x i8*] }* <%ID>, i64 <INT>, i32 <INT>, i64 <%ID>           
		<%ID> = phi { { { { { { { i64, i64, i8* } } } } } }, { { { i32 (...)** } }, { { i8* } }, { { { { { { { { i64, i64, i8* } } } } } }* } }, i32, [1 x i32] } }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
expected answer:
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
Nearest neighbors:
		<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
		<%ID> = alloca <2 x double>, align 16                                                                                   
		<%ID> = getelementptr inbounds [15 x i8], [15 x i8]* <%ID>, i64 <INT>, i64 <INT>                                        
		invoke void <@ID>({ { { { { { i64, i64, i8* } } } } } }* nonnull <%ID>, { { { { { { i64, i64, i8* } } } } } }* nonnull dereferenceable(24) <%ID>)
 to label <%ID> unwind label <%ID>

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
Nearest neighbors:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
		<%ID> = phi i32 [ 0, <%ID> ], [ 1, <%ID> ]                                                                              
		store i16 <INT>, i16* <%ID>, align 8                                                                                    
		<%ID> = getelementptr inbounds { { { { [49 x i32] } } } }, { { { { [49 x i32] } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i64 <INT>

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
Nearest neighbors:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> undef, <4 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef>      
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		store <2 x double> <%ID>, <2 x double>* <%ID>, align 16                                                                 

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
		<%ID> = bitcast i32* <%ID> to <16 x i8>*                                                                                
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = shufflevector <16 x i8> <%ID>, <16 x i8> <%ID>, <16 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
expected answer:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
		<%ID> = xor <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = phi <4 x i64> [ <%ID>, <%ID> ], [ zeroinitializer, <%ID> ]                                                      
		<%ID> = shufflevector <2 x double> <%ID>, <2 x double> undef, <4 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>    

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
expected answer:
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
Nearest neighbors:
		<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
		<%ID> = bitcast <8 x float>* <%ID> to i8*                                                                               
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
		<%ID> = alloca <4 x float>, align 16                                                                                    
		<%ID> = getelementptr inbounds <{ { { { { <{ float*, { i8 }, { i8 } }>, { { { float*, i64 } } }*, { i64 }, { i64 }, i64 } } } }, { { { <{ float*, { i8 }, { i8 } }>, { { { float*, i64 } } }*, { i64 }, { i64 }, i64 } } }, { i8 }, [7 x i8] }>, <{ { { { { <{ float*, { i8 }, { i8 } }>, { { { float*, i64 } } }*, { i64 }, { i64 }, i64 } } } }, { { { <{ float*, { i8 }, { i8 } }>, { { { float*, i64 } } }*, { i64 }, { i64 }, i64 } } }, { i8 }, [7 x i8] }>* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
expected answer:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> <%ID>, <4 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>      
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> undef, <4 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef>      
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> <%ID>, <4 x i32> <i32 <INT>, i32 undef, i32 undef, i32 <INT>>      

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = getelementptr inbounds { { { { [4 x i32] } } } }, { { { { [4 x i32] } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i64 <INT>
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
		<%ID> = phi <4 x i32> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = shufflevector <2 x i64> <%ID>, <2 x i64> <%ID>, <2 x i32> <i32 <INT>, i32 <INT>>                                
		<%ID> = mul nsw i64 <%ID>, <INT>                                                                                        

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast <8 x i16> <%ID> to <4 x i32>                                                                            
		<%ID> = getelementptr inbounds { { { { [49 x i32] } } } }, { { { { [49 x i32] } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i64 <INT>
		<%ID> = getelementptr inbounds { <{ { i8*, i64 }, i32 }>, [4 x i8] }, { <{ { i8*, i64 }, i32 }>, [4 x i8] }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		invoke void <@ID>({ { { { { { i64, i64, i8* } } } } } }* nonnull sret <%ID>, { i8*, i64 }* nonnull <%ID>, i64 <INT>)
 to label <%ID> unwind label <%ID>

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = and <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                               
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
		<%ID> = getelementptr inbounds { <{ { { { float*, i64, i64 } } }, { { { float*, i64, i64 } } }, { { { float*, i64 } } }, i8, i8, i8, i8, i8, i8, i8, i8, i32, [4 x i8], i64, i64, i64, i64, float }>, { { { float*, i64, i64 } } }, { { { { { float*, i64, i64 } } }, { { { float*, i64 } } }, { { { { i32*, i64 } } } }, { { { i64*, i64 } } }, { { { float*, i64 } } }, { { { float*, i64 } } }, { { { float*, i64 } } }, i8, i8, float, float, i64, i64 }, { { { float*, i64, i64 } } }, { { { float*, i64 } } } }, { { { { { float*, i64, i64 } } }, { { { float*, i64 } } }, { { { { i32*, i64 } } } }, { { { i64*, i64 } } }, { { { float*, i64 } } }, { { { float*, i64 } } }, { { { float*, i64 } } }, i8, i8, float, float, i64, i64 }, { { { float*, i64 } } } }, { { { float*, i64, i64 } } } }, { <{ { { { float*, i64, i64 } } }, { { { float*, i64, i64 } } }, { { { float*, i64 } } }, i8, i8, i8, i8, i8, i8, i8, i8, i32, [4 x i8], i64, i64, i64, i64, float }>, { { { float*, i64, i64 } } }, { { { { { float*, i64, i64 } } }, { { { float*, i64 } } }, { { { { i32*, i64 } } } }, { { { i64*, i64 } } }, { { { float*, i64 } } }, { { { float*, i64 } } }, { { { float*, i64 } } }, i8, i8, float, float, i64, i64 }, { { { float*, i64, i64 } } }, { { { float*, i64 } } } }, { { { { { float*, i64, i64 } } }, { { { float*, i64 } } }, { { { { i32*, i64 } } } }, { { { i64*, i64 } } }, { { { float*, i64 } } }, { { { float*, i64 } } }, { { { float*, i64 } } }, i8, i8, float, float, i64, i64 }, { { { float*, i64 } } } }, { { { float*, i64, i64 } } } }* <%ID>, i64 <INT>, i32 <INT>
		<%ID> = phi <4 x float> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                              

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
expected answer:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = and <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            
		<%ID> = tail call fast <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                       

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
expected answer:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = phi <8 x float> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                              
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
		<%ID> = tail call <8 x float> <@ID>(<8 x float> <%ID>, <8 x float> <%ID>, <8 x float> <float <FLOAT>, float <FLOAT>, float <FLOAT>, float <FLOAT>, float <FLOAT>, float <FLOAT>, float <FLOAT>, float <FLOAT>>)
		<%ID> = getelementptr inbounds { { { { i16 } } }*, { { [4 x i64] } } }, { { { { i16 } } }*, { { [4 x i64] } } }* <%ID>, i64 <INT>, i32 <INT>

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast double* <%ID> to i64*                                                                                   
expected answer:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i64*                                                                                   
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
		switch i32 <%ID>, label <%ID> [
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>]
		<%ID> = getelementptr inbounds [256 x i8], [256 x i8]* <%ID>, i64 <INT>, i64 <%ID>                                      
		<%ID> = trunc i64 <%ID> to i8                                                                                           

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast double* <%ID> to i8*                                                                                    
expected answer:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i8*                                                                                    
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
		switch i32 <%ID>, label <%ID> [
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>]
		<%ID> = getelementptr inbounds { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([152 x i8], [152 x i8]* <@ID>, i64 <INT>, i64 <INT>))

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast float <%ID> to i32                                                                                      
expected answer:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
Nearest neighbors:
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = select i1 <%ID>, float <%ID>, float <%ID>                                                                       
		<%ID> = phi i32 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      
		<%ID> = fcmp olt float <%ID>, <%ID>                                                                                     
		<%ID> = fcmp fast ogt float <%ID>, <%ID>                                                                                

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast double <%ID> to i64                                                                                     
expected answer:
		<%ID> = bitcast i64 <%ID> to double                                                                                     
Nearest neighbors:
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = fcmp ogt double <%ID>, <%ID>                                                                                    
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
		<%ID> = getelementptr inbounds [256 x i8], [256 x i8]* <%ID>, i64 <INT>, i64 <%ID>                                      
		switch i32 <%ID>, label <%ID> [
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>]

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast float* <%ID> to i8*                                                                                     
expected answer:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
Nearest neighbors:
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
		<%ID> = bitcast i64* <%ID> to i8*                                                                                       
		switch i32 <%ID>, label <%ID> [
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>]
		call void <@ID>({ { { { { { i64, i64, i8* } } } } } }* nonnull sret <%ID>, i32 <%ID>)                                   

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		<%ID> = phi i16* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                     
		<%ID> = bitcast i16* <%ID> to <16 x i16>*                                                                               
		<%ID> = load i16, i16* <%ID>, align 2                                                                                   
		<%ID> = phi i16* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                   

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = bitcast { float*, { { [4 x i64] } } }* <%ID> to i64*                                                            
		switch i32 <%ID>, label <%ID> [
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>]
		<%ID> = alloca { [5 x i64] }, align 8                                                                                   
		<%ID> = getelementptr inbounds <{ { { { { float*, i64, i64 } } }*, { { { float*, i64 } } }* }, { { i64 }, { i8 }, { float } }, { i8 }, [7 x i8] }>, <{ { { { { float*, i64, i64 } } }*, { { { float*, i64 } } }* }, { { i64 }, { i8 }, { float } }, { i8 }, [7 x i8] }>* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
		store <2 x i64> <%ID>, <2 x i64>* <%ID>, align 16                                                                       
		<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = getelementptr inbounds { <{ { i8*, i64 }, i32 }>, [4 x i8] }, { <{ { i8*, i64 }, i32 }>, [4 x i8] }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		call void <@ID>({ { i32*, i32*, { { i32* } } } }* nonnull <%ID>, i32* nonnull dereferenceable(4) <%ID>)                 
		store i16 <INT>, i16* <%ID>, align 8                                                                                    
		<%ID> = inttoptr i64 <%ID> to { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }**
		<@ID> = private unnamed_addr constant [20 x i8]  <STRING>, align 1                                                      

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
		<%ID> = getelementptr inbounds { <{ { i8*, i64 }, i32 }>, [4 x i8] }, { <{ { i8*, i64 }, i32 }>, [4 x i8] }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = getelementptr inbounds [256 x i8], [256 x i8]* <%ID>, i64 <INT>, i64 <%ID>                                      
		switch i32 <%ID>, label <%ID> [
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>]

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<%ID> = getelementptr inbounds { <{ { i8*, i64 }, i32 }>, [4 x i8] }, { <{ { i8*, i64 }, i32 }>, [4 x i8] }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		call void <@ID>({ { { { { { i64, i64, i8* } } } } } }* nonnull sret <%ID>, i32 <%ID>)                                   
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
		<%ID> = tail call i64 <@ID>(i8* nonnull <%ID>)                                                                          

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<%ID> = getelementptr inbounds { <{ { i8*, i64 }, i32 }>, [4 x i8] }, { <{ { i8*, i64 }, i32 }>, [4 x i8] }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
		invoke void <@ID>({ { { { { { i64, i64, i8* } } } } } }* nonnull sret <%ID>, { { { { { { i64, i64, i8* } } } } } }* nonnull dereferenceable(24) <%ID>, i8* getelementptr inbounds ([2 x i8], [2 x i8]* <@ID>, i64 <INT>, i64 <INT>))
 to label <%ID> unwind label <%ID>
		<%ID> = bitcast { <{ i32 (...)**, { { { i32 } } } }>, [4 x i8] }** <%ID> to i8*                                         

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		store i32* <%ID>, i32** <%ID>, align 8                                                                                  
		<%ID> = getelementptr inbounds { <{ { i8*, i64 }, i32 }>, [4 x i8] }, { <{ { i8*, i64 }, i32 }>, [4 x i8] }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = phi { i64 }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                 
		<%ID> = icmp ne i32* <%ID>, null                                                                                        

<%ID> = bitcast { double, double }* <%ID> to <2 x double>*                                                              
<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = load <2 x i64>, <2 x i64>* <%ID>, align 32                                                                      
		switch i32 <%ID>, label <%ID> [
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>]
		invoke void <@ID>({ { { { { { i64, i64, i8* } } } } } }* nonnull sret <%ID>, { { { { { { i64, i64, i8* } } } } } }* nonnull dereferenceable(24) <%ID>, { { { { { { i64, i64, i8* } } } } } }* nonnull dereferenceable(24) <%ID>)
 to label <%ID> unwind label <%ID>
		<%ID> = extractvalue { i32, i32, i32, i32 } <%ID>, 2                                                                    

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
expected answer:
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
Nearest neighbors:
		<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		<%ID> = bitcast { double, double }* <%ID> to i64*                                                                       
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
		<%ID> = alloca { double, double }, align 8                                                                              

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
expected answer:
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
Nearest neighbors:
		<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
		<%ID> = bitcast <2 x float>* <%ID> to i8*                                                                               
		<%ID> = alloca { float, float }, align 4                                                                                

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
expected answer:
		<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
Nearest neighbors:
		<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
		<%ID> = getelementptr inbounds { { i64*, i64 } }, { { i64*, i64 } }* <%ID>, i32 <INT>, i32 <INT>                        
		invoke void <@ID>({ i8 }* <%ID>, { i64*, i64 }* dereferenceable(16) <%ID>, i64* <%ID>, i64* <%ID>, i64 <%ID>, i64 <%ID>, i64 <%ID>, i64 <%ID>, i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>)
 to label <%ID> unwind label <%ID>
		store { i64*, i64 }* <%ID>, { i64*, i64 }** <%ID>, align 8                                                              
		store { { i64*, i64 } }* <%ID>, { { i64*, i64 } }** <%ID>, align 8                                                      

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
expected answer:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		<%ID> = bitcast { i8 }* <%ID> to { { { { double*, i64 } } }* }*                                                         
		<%ID> = bitcast { i8 }* <%ID> to { { double*, i64, i64 } }**                                                            
		<%ID> = call dereferenceable(24) { { { double*, i64, i64 } } }* <@ID>({ { double*, i64, i64 } }* nonnull <%ID>, { i8 }* nonnull dereferenceable(1) <%ID>)

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
expected answer:
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		<%ID> = call dereferenceable(24) { { { double*, i64, i64 } } }* <@ID>({ i8 }* <%ID>, i64 <%ID>, i64 <%ID>)              
		define linkonce_odr void <@ID>(<{ { { { double*, i64, i64 } } }, { { { { i32*, i64 } } } }, { { { { i32*, i64 } } } }, { { { i64*, i64 } } }, { { { i64*, i64 } } }, i64, double, double, double, i8, i8, i8, [5 x i8] }>*, { i8 }* dereferenceable(1)) unnamed_addr
		ret { { { double*, i64, i64 } } }* <%ID>                                                                                

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
Nearest neighbors:
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
		<%ID> = alloca { opaque*, opaque* }, align 8                                                                            
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i64*                                                                     
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		<%ID> = getelementptr inbounds { opaque*, opaque* }, { opaque*, opaque* }* <%ID>, i64 <INT>, i32 <INT>                  

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
expected answer:
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
Nearest neighbors:
		<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
		<%ID> = getelementptr inbounds { { { { { { i32*, i64 } } }* }, { { { i32*, i64 } } }* }, { { { i32*, i64, i64 } } }* }, { { { { { { i32*, i64 } } }* }, { { { i32*, i64 } } }* }, { { { i32*, i64, i64 } } }* }* <%ID>, i64 <INT>, i32 <INT>
		call void <@ID>({ { { i32*, i64 } } }* nonnull dereferenceable(16) <%ID>, { { { { { i32*, i64 } } }* }, { { { { i32*, i64, i64 } } }* } }* nonnull dereferenceable(16) <%ID>, { i8 }* nonnull dereferenceable(1) <%ID>)
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		call void <@ID>({ { { i32*, i64, i64 } } }* nonnull dereferenceable(24) <%ID>, { { { i32*, i64, i64 } } }* nonnull dereferenceable(24) <%ID>, { i8 }* nonnull dereferenceable(1) <%ID>)

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
Nearest neighbors:
		<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
		call void <@ID>({ { { i32*, i64, i64 } } }* nonnull dereferenceable(24) <%ID>, { { { i32*, i64, i64 } } }* nonnull dereferenceable(24) <%ID>, { i8 }* nonnull dereferenceable(1) <%ID>)
		<%ID> = getelementptr inbounds { { { { { { i32*, i64 } } }* }, { { { i32*, i64 } } }* }, { { { i32*, i64, i64 } } }* }, { { { { { { i32*, i64 } } }* }, { { { i32*, i64 } } }* }, { { { i32*, i64, i64 } } }* }* <%ID>, i64 <INT>, i32 <INT>

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
expected answer:
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
Nearest neighbors:
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		<%ID> = getelementptr inbounds { { { double*, i64, i64 } } }, { { { double*, i64, i64 } } }* <%ID>, i64 <INT>, i32 <INT>
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8**                                                            
		<%ID> = getelementptr inbounds { { { double*, i64 } } }, { { { double*, i64 } } }* <%ID>, i64 <INT>, i32 <INT>          

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
expected answer:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
Nearest neighbors:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		define linkonce_odr void <@ID>(<{ { { { double*, i64, i64 } } }, { { { { i32*, i64 } } } }, { { { { i32*, i64 } } } }, { { { i64*, i64 } } }, { { { i64*, i64 } } }, i64, double, double, double, i8, i8, i8, [5 x i8] }>*, { i8 }* dereferenceable(1)) unnamed_addr
		<%ID> = bitcast { i8 }* <%ID> to i8**                                                                                   

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		<%ID> = alloca { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } }, align 8
		<%ID> = tail call i8* <@ID>(i64 <INT>)                                                                                  
		store { { { { { { i64, i64, i8* } } } } } }* <%ID>, { { { { { { i64, i64, i8* } } } } } }** <%ID>, align 8              

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		<%ID> = load { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }** <%ID>, align 8             
		<%ID> = bitcast i8* <%ID> to { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }**
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
Nearest neighbors:
		<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		store { { { { { { i64, i64, i8* } } } } } }* <%ID>, { { { { { { i64, i64, i8* } } } } } }** <%ID>, align 8              
		<%ID> = icmp eq { i32, [1 x i8*] }* <%ID>, null                                                                         
		<%ID> = bitcast i8** <%ID> to { { i32 (...)** } }**                                                                     

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
expected answer:
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
Nearest neighbors:
		<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
		<%ID> = alloca <2 x double>, align 16                                                                                   
		<%ID> = call { double, double } <@ID>({ double, double }* dereferenceable(16) <%ID>, { double, double }* nonnull dereferenceable(16) <%ID>)

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
Nearest neighbors:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
		<%ID> = tail call <16 x i8> <@ID>(<8 x i16> <%ID>, <8 x i16> <%ID>)                                                     
		<%ID> = lshr <8 x i16> <%ID>, <i16 <INT>, i16 <INT>, i16 <INT>, i16 <INT>, i16 <INT>, i16 <INT>, i16 <INT>, i16 <INT>>  

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		<%ID> = bitcast <2 x i64> <%ID> to <4 x float>                                                                          
		<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = bitcast <2 x i64>* <%ID> to <4 x i32>*                                                                          

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast i32* <%ID> to <16 x i8>*                                                                                
		<%ID> = shufflevector <16 x i8> <%ID>, <16 x i8> <%ID>, <16 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
expected answer:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		<%ID> = xor <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = call { double, double } <@ID>({ double, double }* nonnull dereferenceable(16) <%ID>, { double, double }* nonnull dereferenceable(16) <%ID>)
		<%ID> = call { double, double } <@ID>({ double, double }* dereferenceable(16) <%ID>, { double, double }* nonnull dereferenceable(16) <%ID>)

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
expected answer:
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
Nearest neighbors:
		<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		<%ID> = alloca <4 x float>, align 16                                                                                    
		<%ID> = getelementptr inbounds { <{ float*, { i8 } }>, [7 x i8] }, { <{ float*, { i8 } }>, [7 x i8] }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>
		call void <@ID>({ { { float*, i64 } } }* nonnull dereferenceable(16) <%ID>, { { { float*, i64 } } }* nonnull dereferenceable(16) <%ID>, { i8 }* nonnull dereferenceable(1) <%ID>)

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		<%ID> = bitcast <2 x i64> <%ID> to <4 x float>                                                                          
		<%ID> = shufflevector <4 x i32> <%ID>, <4 x i32> undef, <4 x i32> <i32 <INT>, i32 undef, i32 <INT>, i32 undef>          
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		<%ID> = shufflevector <4 x i32> <%ID>, <4 x i32> <%ID>, <4 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>          
		<%ID> = load <4 x i32>, <4 x i32>* <%ID>, align 4                                                                       
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		<%ID> = getelementptr inbounds { { { { { { i32*, i64 } } }* }, { { { i32*, i64 } } }* }, { { { i32*, i64, i64 } } }* }, { { { { { { i32*, i64 } } }* }, { { { i32*, i64 } } }* }, { { { i32*, i64, i64 } } }* }* <%ID>, i64 <INT>, i32 <INT>
		<%ID> = sub <8 x i16> <%ID>, <%ID>                                                                                      
		call void <@ID>({ { { i32*, i64 } } }* nonnull dereferenceable(16) <%ID>, { { { { { i32*, i64 } } }* }, { { { { i32*, i64, i64 } } }* } }* nonnull dereferenceable(16) <%ID>, { i8 }* nonnull dereferenceable(1) <%ID>)

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		<%ID> = and <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                               
		call void <@ID>({ { { i32*, i64, i64 } } }* nonnull dereferenceable(24) <%ID>, { { { i32*, i64, i64 } } }* nonnull dereferenceable(24) <%ID>, { i8 }* nonnull dereferenceable(1) <%ID>)
		call void <@ID>({ { { float*, i64 } } }* nonnull dereferenceable(16) <%ID>, { { { float*, i64 } } }* nonnull dereferenceable(16) <%ID>, { i8 }* nonnull dereferenceable(1) <%ID>)

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
expected answer:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		<%ID> = and <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   
		<%ID> = call <8 x float> <@ID>(<8 x float> <%ID>)                                                                       
		<%ID> = or <8 x i32> <%ID>, <%ID>                                                                                       

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast double* <%ID> to i64*                                                                                   
expected answer:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
Nearest neighbors:
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		<%ID> = bitcast double* <%ID> to i64*                                                                                   
		<%ID> = alloca { i32, i8*, { i32, i32 } }, align 8                                                                      
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([152 x i8], [152 x i8]* <@ID>, i64 <INT>, i64 <INT>))
		store { i32, i32, i32, i32, i8*, i8*, i8*, i8*, { i32 (...)** }*, { { i32 (...)** }*, { i32 (...)** }*, i32, i32, i8*, i8*, i64, i32, i8*, i8*, i32, i32, opaque* }*, { i32* }, { i64*, [2 x i64] } }* <%ID>, { i32, i32, i32, i32, i8*, i8*, i8*, i8*, { i32 (...)** }*, { { i32 (...)** }*, { i32 (...)** }*, i32, i32, i8*, i8*, i64, i32, i8*, i8*, i32, i32, opaque* }*, { i32* }, { i64*, [2 x i64] } }** <%ID>, align 8

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast double* <%ID> to i8*                                                                                    
expected answer:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i8*                                                                                    
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([152 x i8], [152 x i8]* <@ID>, i64 <INT>, i64 <INT>))
		<%ID> = alloca { i32, i8*, { i32, i32 } }, align 8                                                                      
		define linkonce_odr double <@ID>({ { <{ { { { double*, i64, i64 } } }*, { i8 }, [7 x i8] }>, { i8 }, [7 x i8] }, { [8 x i8], <{ { { { double*, i64, i64 } } }*, { i8 }, [7 x i8] }>, { i8 }, [7 x i8] }* }* dereferenceable(32), { i8 }* dereferenceable(1)) local_unnamed_addr

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast float <%ID> to i32                                                                                      
expected answer:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
Nearest neighbors:
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		<%ID> = fcmp olt float <%ID>, <%ID>                                                                                     
		<%ID> = select i1 <%ID>, float <%ID>, float <%ID>                                                                       
		<%ID> = fcmp fast olt float <%ID>, <%ID>                                                                                

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast double <%ID> to i64                                                                                     
expected answer:
		<%ID> = bitcast i64 <%ID> to double                                                                                     
Nearest neighbors:
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		<%ID> = fcmp ogt double <%ID>, <%ID>                                                                                    
		<%ID> = fcmp olt double <%ID>, <%ID>                                                                                    
		<%ID> = phi i64 [ 4, <%ID> ], [ <%ID>, <%ID> ]                                                                          

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast float* <%ID> to i8*                                                                                     
expected answer:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
Nearest neighbors:
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		<%ID> = getelementptr inbounds { { float*, i64 } }, { { float*, i64 } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>         
		define linkonce_odr void <@ID>(<{ { { { double*, i64, i64 } } }, { { { { i32*, i64 } } } }, { { { { i32*, i64 } } } }, { { { i64*, i64 } } }, { { { i64*, i64 } } }, i64, double, double, double, i8, i8, i8, [5 x i8] }>*, { i8 }* dereferenceable(1)) unnamed_addr
		define linkonce_odr void <@ID>({ i8 }*, i64) local_unnamed_addr                                                         

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		<%ID> = phi i16* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                     
		<%ID> = load i16, i16* <%ID>, align 2                                                                                   
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([152 x i8], [152 x i8]* <@ID>, i64 <INT>, i64 <INT>))

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		call void <@ID>({ { { float*, i64 } } }* nonnull dereferenceable(16) <%ID>, { { { float*, i64 } } }* nonnull dereferenceable(16) <%ID>, { i8 }* nonnull dereferenceable(1) <%ID>)
		define linkonce_odr void <@ID>({ { { float*, i64, i64 } } }* dereferenceable(24), <{ { i64 }, { i64 }, { float }, [4 x i8] }>* dereferenceable(24), { i8 }* dereferenceable(1)) local_unnamed_addr
		<%ID> = bitcast { float }* <%ID> to i32*                                                                                

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		<%ID> = getelementptr inbounds { { { { { { i32*, i64 } } }* }, { { { i32*, i64 } } }* }, { { { i32*, i64, i64 } } }* }, { { { { { { i32*, i64 } } }* }, { { { i32*, i64 } } }* }, { { { i32*, i64, i64 } } }* }* <%ID>, i64 <INT>, i32 <INT>
		call void <@ID>({ { { i32*, i64 } } }* nonnull dereferenceable(16) <%ID>, { { { { { i32*, i64 } } }* }, { { { { i32*, i64, i64 } } }* } }* nonnull dereferenceable(16) <%ID>, { i8 }* nonnull dereferenceable(1) <%ID>)
		call void <@ID>({ { { i32*, i64, i64 } } }* nonnull dereferenceable(24) <%ID>, { { { i32*, i64, i64 } } }* nonnull dereferenceable(24) <%ID>, { i8 }* nonnull dereferenceable(1) <%ID>)

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		call void <@ID>({ { i32*, i32*, { { i32* } } } }* nonnull <%ID>, i32* nonnull dereferenceable(4) <%ID>)                 
		<%ID> = getelementptr inbounds { { i32*, i32*, { { i32* } } } }, { { i32*, i32*, { { i32* } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = bitcast { { i32*, i32*, { { i32* } } } }* <%ID> to i64*                                                         

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([152 x i8], [152 x i8]* <@ID>, i64 <INT>, i64 <INT>))
		<%ID> = alloca { i32, i8*, { i32, i32 } }, align 8                                                                      
		<%ID> = bitcast { double }* <%ID> to i64*                                                                               

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		call void <@ID>({ { i32*, i32*, { { i32* } } } }* nonnull <%ID>, i32* nonnull dereferenceable(4) <%ID>)                 
		define linkonce_odr double <@ID>({ { <{ { { { double*, i64, i64 } } }*, { i8 }, [7 x i8] }>, { i8 }, [7 x i8] }, { [8 x i8], <{ { { { double*, i64, i64 } } }*, { i8 }, [7 x i8] }>, { i8 }, [7 x i8] }* }* dereferenceable(32), { i8 }* dereferenceable(1)) local_unnamed_addr
		<@ID> = private unnamed_addr constant [399 x i8]  <STRING>, align 1                                                     

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		call void <@ID>({ { i32*, i32*, { { i32* } } } }* nonnull <%ID>, i32* nonnull dereferenceable(4) <%ID>)                 
		<%ID> = getelementptr inbounds { { { { { { i32*, i64 } } }* }, { { { i32*, i64 } } }* }, { { { i32*, i64, i64 } } }* }, { { { { { { i32*, i64 } } }* }, { { { i32*, i64 } } }* }, { { { i32*, i64, i64 } } }* }* <%ID>, i64 <INT>, i32 <INT>
		invoke void <@ID>({ { { { { { i64, i64, i8* } } } } } }* nonnull sret <%ID>, { { { { { { i64, i64, i8* } } } } } }* nonnull dereferenceable(24) <%ID>, i8* getelementptr inbounds ([2 x i8], [2 x i8]* <@ID>, i64 <INT>, i64 <INT>))
 to label <%ID> unwind label <%ID>

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		<%ID> = bitcast { { { { i32*, i64 } } }* }* <%ID> to { { i32*, i64 } }**                                                
		<%ID> = bitcast { { i32*, i32*, { { i32* } } } }* <%ID> to i8**                                                         
		invoke void <@ID>({ { i32*, i32*, { { i32* } } } }* nonnull <%ID>, i32* nonnull dereferenceable(4) <%ID>)
 to label <%ID> unwind label <%ID>

<%ID> = bitcast { double, double }* <%ID> to <2 x i64>*                                                                 
<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 
		<%ID> = getelementptr inbounds { { { { { { i32*, i64 } } }* }, { { { i32*, i64 } } }* }, { { { i32*, i64, i64 } } }* }, { { { { { { i32*, i64 } } }* }, { { { i32*, i64 } } }* }, { { { i32*, i64, i64 } } }* }* <%ID>, i64 <INT>, i32 <INT>
		<%ID> = getelementptr inbounds { <{ { { { i32*, i64 } } }*, { { { i32*, i64 } } }*, { i8 }, [7 x i8] }>, { { { i32*, i64, i64 } } }* }, { <{ { { { i32*, i64 } } }*, { { { i32*, i64 } } }*, { i8 }, [7 x i8] }>, { { { i32*, i64, i64 } } }* }* <%ID>, i64 <INT>, i32 <INT>
		call void <@ID>({ { { i32*, i64, i64 } } }* nonnull dereferenceable(24) <%ID>, { { { i32*, i64, i64 } } }* nonnull dereferenceable(24) <%ID>, { i8 }* nonnull dereferenceable(1) <%ID>)

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
expected answer:
		<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		store <2 x float> <%ID>, <2 x float>* <%ID>, align 4                                                                    
		<%ID> = phi float [ <%ID>, <%ID> ], [ <FLOAT>, <%ID> ]                                                                  

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
expected answer:
		<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
Nearest neighbors:
		<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
		<%ID> = getelementptr inbounds { { i64*, i64 } }, { { i64*, i64 } }* <%ID>, i32 <INT>, i32 <INT>                        
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		store { { i64*, i64 } }* <%ID>, { { i64*, i64 } }** <%ID>, align 8                                                      
		store { i64*, i64 }* <%ID>, { i64*, i64 }** <%ID>, align 8                                                              

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
expected answer:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = bitcast { i8 }* <%ID> to { { { { double*, i64 } } }* }*                                                         
		<%ID> = phi { { { { i32*, i64 } } } }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                               
		<%ID> = phi { { { double*, i64 } } }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
expected answer:
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = inttoptr i64 <%ID> to double*                                                                                   
		ret { { { double*, i64, i64 } } }* <%ID>                                                                                
		<%ID> = phi { double, double }* [ <%ID>, <%ID> ], [ null, <%ID> ]                                                       

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
		<%ID> = getelementptr inbounds { opaque*, opaque* }, { opaque*, opaque* }* <%ID>, i64 <INT>, i32 <INT>                  
		<%ID> = phi { double, double }* [ <%ID>, <%ID> ], [ null, <%ID> ]                                                       
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i64*                                                                     

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
expected answer:
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
		<%ID> = load { { { i32*, i64 } } }*, { { { i32*, i64 } } }** <%ID>, align 8                                             
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ null, <%ID> ], [ null, <%ID> ]                                                     
		<%ID> = bitcast { { i32*, i64 } }* <%ID> to { { { i32*, i64 } } }*                                                      

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
Nearest neighbors:
		<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = phi { double, double }* [ <%ID>, <%ID> ], [ null, <%ID> ]                                                       
		<%ID> = getelementptr inbounds { { double*, { { [3 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { double*, { { [3 x i64] } } }* }, { { i8 }, { { [3 x i64] }, { { [3 x i64] } }, { [3 x i64] }, { [3 x i64] }, { double*, { { [3 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { double*, { { [3 x i64] } } }* } }, { { [3 x i64] }, { { [3 x i64] } }, { [3 x i64] }, { [3 x i64] }, { double*, { { [3 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { double*, { { [3 x i64] } } }* } } } }, { { double*, { { [3 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { double*, { { [3 x i64] } } }* }, { { i8 }, { { [3 x i64] }, { { [3 x i64] } }, { [3 x i64] }, { [3 x i64] }, { double*, { { [3 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { double*, { { [3 x i64] } } }* } }, { { [3 x i64] }, { { [3 x i64] } }, { [3 x i64] }, { [3 x i64] }, { double*, { { [3 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { double*, { { [3 x i64] } } }* } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i64 <INT>
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
expected answer:
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
		<%ID> = getelementptr inbounds { { { double*, i64 } } }, { { { double*, i64 } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = inttoptr i64 <%ID> to double*                                                                                   
		<%ID> = phi double* [ <%ID>, <%ID> ], [ null, <%ID> ]                                                                   

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
expected answer:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
Nearest neighbors:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = phi { double, double }* [ <%ID>, <%ID> ], [ null, <%ID> ]                                                       
		<%ID> = mul i64 <%ID>, <INT>                                                                                            

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = phi { double, double }* [ <%ID>, <%ID> ], [ null, <%ID> ]                                                       
		<%ID> = call i8* <@ID>(i64 <INT>)                                                                                       

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
		<%ID> = phi { double, double }* [ <%ID>, <%ID> ], [ null, <%ID> ]                                                       
		<%ID> = getelementptr inbounds { { double*, { { [3 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { double*, { { [3 x i64] } } }* }, { { i8 }, { { [3 x i64] }, { { [3 x i64] } }, { [3 x i64] }, { [3 x i64] }, { double*, { { [3 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { double*, { { [3 x i64] } } }* } }, { { [3 x i64] }, { { [3 x i64] } }, { [3 x i64] }, { [3 x i64] }, { double*, { { [3 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { double*, { { [3 x i64] } } }* } } } }, { { double*, { { [3 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { double*, { { [3 x i64] } } }* }, { { i8 }, { { [3 x i64] }, { { [3 x i64] } }, { [3 x i64] }, { [3 x i64] }, { double*, { { [3 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { double*, { { [3 x i64] } } }* } }, { { [3 x i64] }, { { [3 x i64] } }, { [3 x i64] }, { [3 x i64] }, { double*, { { [3 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { double*, { { [3 x i64] } } }* } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i64 <INT>
		<%ID> = getelementptr inbounds { { double*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { double*, { { [5 x i64] } } }* }, { { i8 }, { { [5 x i64] }, { { [5 x i64] } }, { [5 x i64] }, { [5 x i64] }, { double*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { double*, { { [5 x i64] } } }* } }, { double*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { double*, { { [5 x i64] } } }* } } }, { { double*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { double*, { { [5 x i64] } } }* }, { { i8 }, { { [5 x i64] }, { { [5 x i64] } }, { [5 x i64] }, { [5 x i64] }, { double*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { double*, { { [5 x i64] } } }* } }, { double*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { double*, { { [5 x i64] } } }* } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i64 <INT>

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
		<%ID> = icmp eq { i32, [1 x i8*] }* <%ID>, null                                                                         
		<%ID> = icmp eq i8** <%ID>, <%ID>                                                                                       
		<%ID> = phi { { { { { { i64, i64, i8* } } } } } }* [ <%ID>, <%ID> ], [ null, <%ID> ]                                    

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
expected answer:
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
		<%ID> = inttoptr i64 <%ID> to double*                                                                                   
		<%ID> = phi { double, double }* [ <%ID>, <%ID> ], [ null, <%ID> ]                                                       
		<%ID> = getelementptr inbounds { float*, { { [4 x i64] } } }, { float*, { { [4 x i64] } } }* <%ID>, i64 <INT>, i32 <INT>

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
Nearest neighbors:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = phi { double, double }* [ <%ID>, <%ID> ], [ null, <%ID> ]                                                       
		<%ID> = sub <16 x i8> <%ID>, <%ID>                                                                                      
		<%ID> = tail call <16 x i8> <@ID>(<16 x i8> <%ID>, <16 x i8> <%ID>)                                                     

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = shufflevector <16 x i8> <%ID>, <16 x i8> <%ID>, <16 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>
		<%ID> = load <4 x double>, <4 x double>* <%ID>, align 1                                                                 

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
expected answer:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = xor <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = phi { double, double }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                      
		<%ID> = phi { double, double }* [ <%ID>, <%ID> ], [ null, <%ID> ]                                                       

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
expected answer:
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
Nearest neighbors:
		<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = fsub <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = inttoptr i64 <%ID> to double*                                                                                   
		<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = bitcast <2 x i64> <%ID> to <4 x float>                                                                          
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     
		<%ID> = load <4 x i32>, <4 x i32>* <%ID>, align 1                                                                       

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = load <4 x i32>, <4 x i32>* <%ID>, align 1                                                                       
		<%ID> = bitcast i32* <%ID> to <4 x i32>*                                                                                
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = bitcast <8 x i16> <%ID> to <4 x i32>                                                                            
		<%ID> = tail call <16 x i8> <@ID>(<16 x i8> <%ID>, <16 x i8> <%ID>)                                                     
		<%ID> = or <4 x i32> <%ID>, <%ID>                                                                                       

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = tail call fast <4 x float> <@ID>(<4 x float> <%ID>, <4 x float> <%ID>)                                          
		<%ID> = and <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                               
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
expected answer:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = bitcast { i8*, { { [5 x i64] } } }* <%ID> to i8*                                                                
		<%ID> = bitcast { i8*, { { [1 x i64] } } }* <%ID> to i8*                                                                

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
expected answer:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = bitcast { i8*, { { [5 x i64] } } }* <%ID> to i8*                                                                
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		store { i8*, { { [1 x i64] } } }* <%ID>, { i8*, { { [1 x i64] } } }** <%ID>, align 8                                    

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast double* <%ID> to i64*                                                                                   
expected answer:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = bitcast double* <%ID> to i64*                                                                                   
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = phi { double, double }* [ <%ID>, <%ID> ], [ null, <%ID> ]                                                       
		<%ID> = load { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x double] }*, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x double] }** <%ID>, align 8

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast double* <%ID> to i8*                                                                                    
expected answer:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i8*                                                                                    
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = getelementptr double, double* <%ID>, i64 <INT>                                                                  
		<%ID> = inttoptr i64 <%ID> to double*                                                                                   

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast float <%ID> to i32                                                                                      
expected answer:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
Nearest neighbors:
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = select i1 <%ID>, float <%ID>, float <%ID>                                                                       
		<%ID> = fcmp olt float <%ID>, <%ID>                                                                                     
		<%ID> = fdiv float <FLOAT>, <%ID>                                                                                       

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast double <%ID> to i64                                                                                     
expected answer:
		<%ID> = bitcast i64 <%ID> to double                                                                                     
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = inttoptr i64 <%ID> to double*                                                                                   
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = phi i64 [ <%ID>, <%ID> ], [ 1152921504606846975, <%ID> ]                                                        

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast float* <%ID> to i8*                                                                                     
expected answer:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = icmp sgt i64 <%ID>, <INT>                                                                                       
		<%ID> = getelementptr float, float* <%ID>, i64 <%ID>                                                                    
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = phi i16* [ <%ID>, <%ID> ], [ null, <%ID> ]                                                                      
		<%ID> = getelementptr i16, i16* <%ID>, i64 <INT>                                                                        

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = getelementptr inbounds { { double*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { double*, { { [5 x i64] } } }* }, { { i8 }, { { [5 x i64] }, { { [5 x i64] } }, { [5 x i64] }, { [5 x i64] }, { double*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { double*, { { [5 x i64] } } }* } }, { double*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { double*, { { [5 x i64] } } }* } } }, { { double*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { double*, { { [5 x i64] } } }* }, { { i8 }, { { [5 x i64] }, { { [5 x i64] } }, { [5 x i64] }, { [5 x i64] }, { double*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { double*, { { [5 x i64] } } }* } }, { double*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { double*, { { [5 x i64] } } }* } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i64 <INT>
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = bitcast { float*, { { [4 x i64] } } }* <%ID> to i64*                                                            

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast i32* <%ID> to <4 x i32>*                                                                                
		<%ID> = phi { double, double }* [ <%ID>, <%ID> ], [ null, <%ID> ]                                                       

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = phi i64 [ <%ID>, <%ID> ], [ 1152921504606846975, <%ID> ]                                                        
		<%ID> = phi i32** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = phi { double, double }* [ <%ID>, <%ID> ], [ null, <%ID> ]                                                       
		<%ID> = icmp sgt i64 <%ID>, <INT>                                                                                       

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = phi { double, double }* [ <%ID>, <%ID> ], [ null, <%ID> ]                                                       
		<%ID> = phi i64 [ 0, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ 0, <%ID> ]                                          

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = phi { double, double }* [ <%ID>, <%ID> ], [ null, <%ID> ]                                                       
		<%ID> = getelementptr inbounds { i8, i8, i8, i8 }, { i8, i8, i8, i8 }* <%ID>, i64 <INT>, i32 <INT>                      

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = phi i32** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = phi { double, double }* [ <%ID>, <%ID> ], [ null, <%ID> ]                                                       

<%ID> = bitcast { double, double }* <%ID> to i8*                                                                        
<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = phi i32** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ null, <%ID> ], [ null, <%ID> ]                                                     

<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
expected answer:
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
Nearest neighbors:
		<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
		<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
		<%ID> = bitcast <2 x float>* <%ID> to i8*                                                                               
		store <2 x float> <%ID>, <2 x float>* <%ID>, align 8                                                                    
		<%ID> = alloca <2 x float>, align 8                                                                                     

<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
expected answer:
		<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
Nearest neighbors:
		<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
		<%ID> = getelementptr inbounds { { i64*, i64 } }, { { i64*, i64 } }* <%ID>, i32 <INT>, i32 <INT>                        
		store { { i64*, i64 } }* <%ID>, { { i64*, i64 } }** <%ID>, align 8                                                      
		invoke void <@ID>({ i8 }* <%ID>, { i64*, i64 }* dereferenceable(16) <%ID>, i64* <%ID>, i64* <%ID>, i64 <%ID>, i64 <%ID>, i64 <%ID>, i64 <%ID>, i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>)
 to label <%ID> unwind label <%ID>
		invoke void <@ID>({ i8 }* <%ID>, i64* <%ID>, { { i64*, i64 } }* dereferenceable(16) <%ID>, i64 <%ID>, i64 <%ID>, i64 <INT>, i64 <INT>)
 to label <%ID> unwind label <%ID>

<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
expected answer:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = bitcast { i8 }* <%ID> to { { { { double*, i64 } } }* }*                                                         
		<%ID> = bitcast { i8 }* <%ID> to { { double*, i64, i64 } }**                                                            
		<%ID> = call dereferenceable(24) { { { double*, i64, i64 } } }* <@ID>({ { double*, i64, i64 } }* nonnull <%ID>, { i8 }* nonnull dereferenceable(1) <%ID>)
		call void <@ID>({ { { double*, i64 } } }* nonnull dereferenceable(16) <%ID>, { { { { double*, i64 } } }* }* nonnull dereferenceable(8) <%ID>, { i8 }* nonnull dereferenceable(1) <%ID>)

<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
expected answer:
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = call dereferenceable(24) { { { double*, i64, i64 } } }* <@ID>({ i8 }* <%ID>, i64 <%ID>, i64 <%ID>)              
		ret { { { double*, i64, i64 } } }* <%ID>                                                                                
		<%ID> = bitcast { i8 }* <%ID> to i8**                                                                                   
		call void <@ID>({ i8 }* nonnull <%ID>, i64 <%ID>, i64 <%ID>, { double, double }* nonnull dereferenceable(16) <%ID>)     

<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
Nearest neighbors:
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
		<%ID> = getelementptr inbounds { opaque*, opaque* }, { opaque*, opaque* }* <%ID>, i64 <INT>, i32 <INT>                  
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i64*                                                                     
		<%ID> = alloca { opaque*, opaque* }, align 8                                                                            
		store i32 <INT>, i32* <%ID>, align 1                                                                                    

<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
expected answer:
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
Nearest neighbors:
		<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
		<%ID> = load { { { i32*, i64, i64 } } }*, { { { i32*, i64, i64 } } }** <%ID>, align 8                                   
		<%ID> = bitcast { { { i32*, i64, i64 } } }** <%ID> to { { i32*, i64, i64 } }**                                          
		<%ID> = load { { i32*, i64, i64 } }*, { { i32*, i64, i64 } }** <%ID>, align 8                                           
		<%ID> = phi { { { i32*, i64, i64 } } }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                              

<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
Nearest neighbors:
		<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
		<%ID> = getelementptr inbounds [1024 x i8], [1024 x i8]* <%ID>, i64 <INT>, i64 <INT>                                    
		<%ID> = call i32 <@ID>(opaque* nonnull <%ID>)                                                                           
		<%ID> = invoke i8* <@ID>({ { i8* }, i64, { i64, [8 x i8] } }* nonnull <%ID>, i64* nonnull dereferenceable(8) <%ID>, i64 <INT>)
 to label <%ID> unwind label <%ID>
		<%ID> = phi { i64, opaque*, opaque* }** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                              

<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
expected answer:
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
Nearest neighbors:
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
		<%ID> = bitcast { { { double*, i64 } } }* <%ID> to i8*                                                                  
		<%ID> = bitcast { { { double*, i64 } } }* <%ID> to i8**                                                                 
		<%ID> = getelementptr inbounds { { { double*, i64, i64 } } }, { { { double*, i64, i64 } } }* <%ID>, i64 <INT>, i32 <INT>
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8**                                                            

<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
expected answer:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
Nearest neighbors:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = bitcast { { { i64*, i64 } } }* <%ID> to i8**                                                                    
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to i8*                                                                 
		<%ID> = bitcast { i8 }* <%ID> to i8**                                                                                   
		<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 

<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
		<%ID> = tail call i8* <@ID>(i64 <INT>)                                                                                  
		<%ID> = alloca { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } }, align 8
		tail call void <@ID>({ { { { { { i64, i64, i8* } } } } } }* <%ID>, { { { { { { i64, i64, i8* } } } } } }* nonnull dereferenceable(24) <%ID>)
		<%ID> = tail call dereferenceable(24) { { { { { { i64, i64, i8* } } } } } }* <@ID>({ { { { { { i64, i64, i8* } } } } } }* <%ID>, { { { { { { i64, i64, i8* } } } } } }* dereferenceable(24) <%ID>)

<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
		<%ID> = load { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }** <%ID>, align 8             
		<%ID> = bitcast i8* <%ID> to i8**                                                                                       
		<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
		<%ID> = load i8, i8* <%ID>, align 8                                                                                     

<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
Nearest neighbors:
		<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
		<%ID> = icmp eq { i32, [1 x i8*] }* <%ID>, null                                                                         
		<%ID> = bitcast i8** <%ID> to { { i32 (...)** } }**                                                                     
		<%ID> = icmp eq i8** <%ID>, <%ID>                                                                                       
		<%ID> = phi { i32, [1 x i8*] }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]

<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
expected answer:
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
Nearest neighbors:
		<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
		<%ID> = alloca <2 x double>, align 16                                                                                   
		<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
		<%ID> = bitcast <2 x i64>* <%ID> to { double, double }*                                                                 

<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
Nearest neighbors:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		<%ID> = lshr <8 x i16> <%ID>, <i16 <INT>, i16 <INT>, i16 <INT>, i16 <INT>, i16 <INT>, i16 <INT>, i16 <INT>, i16 <INT>>  
		<%ID> = tail call <16 x i8> <@ID>(<16 x i8> <%ID>, <16 x i8> <%ID>)                                                     
		<%ID> = tail call <16 x i8> <@ID>(<8 x i16> <%ID>, <8 x i16> <%ID>)                                                     
		<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 

<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast i32* <%ID> to <16 x i8>*                                                                                
		<%ID> = shufflevector <16 x i8> <%ID>, <16 x i8> <%ID>, <16 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>
		<%ID> = and <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               

<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
expected answer:
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
Nearest neighbors:
		<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
		<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
		<%ID> = getelementptr inbounds <2 x float>, <2 x float>* <%ID>, i64 <INT>, i64 <INT>                                    
		<%ID> = bitcast <2 x float>* <%ID> to i8*                                                                               
		<%ID> = alloca <4 x float>, align 16                                                                                    

<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = bitcast <2 x i64> <%ID> to <4 x float>                                                                          
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> <%ID>, <4 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>      
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      

<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = shufflevector <2 x i64> <%ID>, <2 x i64> <%ID>, <2 x i32> <i32 <INT>, i32 <INT>>                                
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = shufflevector <4 x i32> <%ID>, <4 x i32> <%ID>, <4 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>          
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       

<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast <8 x i16> <%ID> to <4 x i32>                                                                            
		<%ID> = ashr <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                              
		<%ID> = tail call <16 x i8> <@ID>(<16 x i8> <%ID>, <16 x i8> <%ID>)                                                     
		<%ID> = phi <4 x i32> [ <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>, <%ID> ], [ <%ID>, <%ID> ]                         

<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = and <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                               
		<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
		call void <@ID>({ <{ { { { float*, i64, i64 } } }, { { { float*, i64, i64 } } }, { { { float*, i64 } } }, i8, i8, i8, i8, i8, i8, i8, i8, i32, [4 x i8], i64, i64, i64, i64, float }>, { { { float*, i64, i64 } } }, { { { { { float*, i64, i64 } } }, { { { float*, i64 } } }, { { { { i32*, i64 } } } }, { { { i64*, i64 } } }, { { { float*, i64 } } }, { { { float*, i64 } } }, { { { float*, i64 } } }, i8, i8, float, float, i64, i64 }, { { { float*, i64, i64 } } }, { { { float*, i64 } } } }, { { { { { float*, i64, i64 } } }, { { { float*, i64 } } }, { { { { i32*, i64 } } } }, { { { i64*, i64 } } }, { { { float*, i64 } } }, { { { float*, i64 } } }, { { { float*, i64 } } }, i8, i8, float, float, i64, i64 }, { { { float*, i64 } } } }, { { { float*, i64, i64 } } } }* nonnull <%ID>)
		<%ID> = call fast <4 x float> <@ID>(<4 x float> <%ID>, <4 x float> <%ID>)                                               

<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
expected answer:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = and <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = call fast <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            
		<%ID> = call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                                 
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            

<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
expected answer:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
		<%ID> = and <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   
		<%ID> = phi <8 x float> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                              
		<%ID> = xor <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   

<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast double* <%ID> to i64*                                                                                   
expected answer:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i64*                                                                                   
		<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
		<%ID> = xor i64 <%ID>, <%ID>                                                                                            
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([146 x i8], [146 x i8]* <@ID>, i64 <INT>, i64 <INT>))
		<%ID> = getelementptr inbounds { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x double] }, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x double] }* <%ID>, i64 <INT>, i32 <INT>, i64 <%ID>

<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast double* <%ID> to i8*                                                                                    
expected answer:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i8*                                                                                    
		<%ID> = getelementptr double, double* <%ID>, i64 <%ID>                                                                  
		<%ID> = icmp ult double* <%ID>, <%ID>                                                                                   
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([146 x i8], [146 x i8]* <@ID>, i64 <INT>, i64 <INT>))
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([152 x i8], [152 x i8]* <@ID>, i64 <INT>, i64 <INT>))

<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast float <%ID> to i32                                                                                      
expected answer:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
Nearest neighbors:
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
		<%ID> = select i1 <%ID>, float <%ID>, float <%ID>                                                                       
		<%ID> = fcmp olt float <%ID>, <%ID>                                                                                     
		<%ID> = phi float [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]              

<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast double <%ID> to i64                                                                                     
expected answer:
		<%ID> = bitcast i64 <%ID> to double                                                                                     
Nearest neighbors:
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = fcmp ogt double <%ID>, <%ID>                                                                                    
		<%ID> = select i1 <%ID>, double <%ID>, double <%ID>                                                                     
		<%ID> = fcmp fast ogt double <%ID>, <%ID>                                                                               
		<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 

<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast float* <%ID> to i8*                                                                                     
expected answer:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
Nearest neighbors:
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
		<%ID> = load i8*, i8** <%ID>, align 8                                                                                   
		<%ID> = load { { { float*, i64 } } }*, { { { float*, i64 } } }** <%ID>, align 8                                         
		<%ID> = getelementptr inbounds { <{ { { { float*, i64 } } }*, { { { float*, i64 } } }*, { i8 }, [7 x i8] }>, { { { float*, i64 } } }* }, { <{ { { { float*, i64 } } }*, { { { float*, i64 } } }*, { i8 }, [7 x i8] }>, { { { float*, i64 } } }* }* <%ID>, i64 <INT>, i32 <INT>

<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		<%ID> = phi i16* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                     
		<%ID> = getelementptr inbounds i16, i16* <%ID>, i64 <INT>                                                               
		<%ID> = bitcast i16* <%ID> to <16 x i16>*                                                                               
		<%ID> = getelementptr inbounds i16, i16* <%ID>, i64 <%ID>                                                               

<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
		<%ID> = inttoptr i64 <%ID> to i8*                                                                                       
		<%ID> = getelementptr inbounds { <{ { { { float*, i64 } } }*, { { { float*, i64 } } }*, { i8 }, [7 x i8] }>, { { { float*, i64 } } }* }, { <{ { { { float*, i64 } } }*, { { { float*, i64 } } }*, { i8 }, [7 x i8] }>, { { { float*, i64 } } }* }* <%ID>, i64 <INT>, i32 <INT>
		<%ID> = bitcast { float }* <%ID> to i32*                                                                                

<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       
		<%ID> = getelementptr inbounds { { i32*, i64 } }, { { i32*, i64 } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>             
		<%ID> = load <2 x i64>, <2 x i64>* <%ID>, align 16                                                                      
		<%ID> = bitcast { { { i32*, i64, i64 } } }** <%ID> to { { i32*, i64, i64 } }**                                          

<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		call void <@ID>({ { i32*, i32*, { { i32* } } } }* nonnull <%ID>, i32* nonnull dereferenceable(4) <%ID>)                 
		<%ID> = phi i64 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]
		<%ID> = bitcast { { i32*, i32*, { { i32* } } } }* <%ID> to i64*                                                         
		<%ID> = bitcast { { i32*, i32*, { { i32* } } } }* <%ID> to i8*                                                          

<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		ret i64 <%ID>                                                                                                           
		<%ID> = tail call i64 <@ID>(i8* <%ID>, i1 false)                                                                        
		<%ID> = load <{ { { { { { { i64, i64, i8* } } } } } }, i32, [4 x i8] }>*, <{ { { { { { { i64, i64, i8* } } } } } }, i32, [4 x i8] }>** <%ID>, align 8
		<%ID> = getelementptr inbounds [256 x i8], [256 x i8]* <%ID>, i64 <INT>, i64 <%ID>                                      

<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<%ID> = tail call i64 <@ID>(i8* nonnull <%ID>)                                                                          
		<%ID> = tail call i64 <@ID>(i8* <%ID>, i1 false)                                                                        
		<%ID> = bitcast { { { i32*, i64, i64 } } }** <%ID> to { { i32*, i64, i64 } }**                                          
		<%ID> = bitcast { i8*, i64 }* <%ID> to i8*                                                                              

<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
		<%ID> = load i8, i8* <%ID>, align 8                                                                                     
		<%ID> = getelementptr inbounds { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>

<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = bitcast { { { { i32*, i64 } } }* }* <%ID> to { { i32*, i64 } }**                                                
		<%ID> = bitcast { { i32*, i32*, { { i32* } } } }* <%ID> to i8**                                                         
		<%ID> = phi i32** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    
		<%ID> = phi { i64, opaque*, opaque* }** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                              

<%ID> = bitcast { float, float }* <%ID> to <2 x float>*                                                                 
<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = bitcast <2 x float>* <%ID> to { float, float }*                                                                 
		<%ID> = phi i32* [ null, <%ID> ], [ <%ID>, <%ID> ], [ null, <%ID> ]                                                     
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to i8**                                                               
		<%ID> = phi i64 [ 4, <%ID> ], [ <%ID>, <%ID> ]                                                                          

<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
expected answer:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = bitcast { i8 }* <%ID> to { { { { double*, i64 } } }* }*                                                         
		<%ID> = bitcast { { double*, i64 } }* <%ID> to { { { double*, i64 } } }*                                                
		<%ID> = phi { { { double*, i64 } } }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                

<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
expected answer:
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = call dereferenceable(24) { { { double*, i64, i64 } } }* <@ID>({ i8 }* <%ID>, i64 <%ID>, i64 <%ID>)              
		<%ID> = phi double* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                              

<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
		<%ID> = getelementptr inbounds { opaque*, opaque* }, { opaque*, opaque* }* <%ID>, i64 <INT>, i32 <INT>                  
		<%ID> = icmp eq { opaque*, opaque* }* <%ID>, <%ID>                                                                      
		<%ID> = load { opaque*, opaque* }*, { opaque*, opaque* }** <%ID>, align 8                                               

<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
expected answer:
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ null, <%ID> ], [ null, <%ID> ]                                                     
		<%ID> = load { { { i32*, i64 } } }*, { { { i32*, i64 } } }** <%ID>, align 8                                             
		<%ID> = load <2 x i64>, <2 x i64>* <%ID>, align 32                                                                      

<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
Nearest neighbors:
		<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = call i32 <@ID>(opaque* nonnull <%ID>)                                                                           
		<%ID> = load <{ { i32 (...)**, i32, i32, i32, i8**, { { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, i32, i8* }*, i8, { { i8* }, i64, { i64, [8 x i8] } }, { i32, i32, i32, i32, i32 }, i8, i8, i8, { { i8* }, i64, { i64, [8 x i8] } } }, i8, i8, i8, i8, i8, [3 x i8], i32, i32, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, i8, [7 x i8] }>*, <{ { i32 (...)**, i32, i32, i32, i8**, { { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, i32, i8* }*, i8, { { i8* }, i64, { i64, [8 x i8] } }, { i32, i32, i32, i32, i32 }, i8, i8, i8, { { i8* }, i64, { i64, [8 x i8] } } }, i8, i8, i8, i8, i8, [3 x i8], i32, i32, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, i8, [7 x i8] }>** <%ID>, align 8

<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
expected answer:
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
Nearest neighbors:
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
		<%ID> = getelementptr inbounds { { { double*, i64 } } }, { { { double*, i64 } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>

<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
expected answer:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
Nearest neighbors:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to i8*                                                                 
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = getelementptr inbounds { { { i64*, i64 } } }, { { { i64*, i64 } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>

<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = phi { { { { { { i64, i64, i8* } } } } } }* [ <%ID>, <%ID> ], [ null, <%ID> ]                                    
		<%ID> = tail call i8* <@ID>(i64 <INT>)                                                                                  

<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = bitcast i8* <%ID> to { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }**
		store { <{ i32 (...)**, { { { i32 } } } }>, [4 x i8] }* <%ID>, { <{ i32 (...)**, { { { i32 } } } }>, [4 x i8] }** <%ID>, align 8

<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
Nearest neighbors:
		<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = atomicrmw add i32* <%ID>, i32 <INT> monotonic                                                                   
		<%ID> = phi { { { { { { i64, i64, i8* } } } } } }* [ <%ID>, <%ID> ], [ null, <%ID> ]                                    
		<%ID> = phi { i32, [1 x i8*] }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                      

<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
expected answer:
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = phi { double, double }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                      
		<%ID> = bitcast { float*, { { [1 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { float*, { { [1 x i64] } } }* }* <%ID> to i64*

<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
Nearest neighbors:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = getelementptr inbounds { <{ i32 (...)**, { { { i32 } } } }>, [4 x i8] }, { <{ i32 (...)**, { { { i32 } } } }>, [4 x i8] }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = phi { double, double }* [ <%ID>, <%ID> ], [ null, <%ID> ]                                                       

<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast i32* <%ID> to <16 x i8>*                                                                                
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        

<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
expected answer:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = phi { double, double }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                      
		<%ID> = xor <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = getelementptr inbounds { double, double }, { double, double }* <%ID>, i64 <INT>                                 

<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
expected answer:
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
		<%ID> = tail call fast <4 x float> <@ID>(<4 x float> <%ID>, <4 x float> <%ID>, <4 x float> <%ID>)                       
		store { float*, { { [3 x i64] } } }* <%ID>, { float*, { { [3 x i64] } } }** <%ID>, align 8                              
		<%ID> = icmp eq float* <%ID>, null                                                                                      

<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     
		<%ID> = select <4 x i1> <%ID>, <4 x float> <%ID>, <4 x float> <%ID>                                                     
		<%ID> = bitcast <2 x i64> <%ID> to <4 x float>                                                                          

<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = shufflevector <2 x i64> <%ID>, <2 x i64> <%ID>, <2 x i32> <i32 <INT>, i32 <INT>>                                
		<%ID> = icmp ult i32* <%ID>, <%ID>                                                                                      
		<%ID> = load <4 x i32>, <4 x i32>* <%ID>, align 1                                                                       

<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = bitcast <2 x i64> <%ID> to <8 x i16>                                                                            
		<%ID> = bitcast <8 x i16> <%ID> to <4 x i32>                                                                            

<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = tail call fast <4 x float> <@ID>(<4 x float> <%ID>, <4 x float> <%ID>)                                          
		<%ID> = tail call <4 x float> <@ID>(<4 x float> <%ID>, <4 x float> <%ID>)                                               
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> undef, <4 x i32> <i32 <INT>, i32 undef, i32 undef, i32 undef>      

<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
expected answer:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = bitcast { i8*, { { [5 x i64] } } }* <%ID> to i8*                                                                
		<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        

<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
expected answer:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = bitcast { i8*, { { [5 x i64] } } }* <%ID> to i8*                                                                
		store { i8*, { { [1 x i64] } } }* <%ID>, { i8*, { { [1 x i64] } } }** <%ID>, align 8                                    
		<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              

<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
<%ID> = bitcast double* <%ID> to i64*                                                                                   
expected answer:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = bitcast double* <%ID> to i64*                                                                                   
		<%ID> = xor i64 <%ID>, <%ID>                                                                                            
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
		<%ID> = load { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x i32] }*, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x i32] }** <%ID>, align 8

<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
<%ID> = bitcast double* <%ID> to i8*                                                                                    
expected answer:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = bitcast double* <%ID> to i8*                                                                                    
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		tail call void <@ID>(i8* <%ID>, i8* <%ID>, i64 <%ID>, i32 <INT>, i1 false)                                              
		<%ID> = icmp ult double* <%ID>, <%ID>                                                                                   

<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
<%ID> = bitcast float <%ID> to i32                                                                                      
expected answer:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
Nearest neighbors:
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = select i1 <%ID>, float <%ID>, float <%ID>                                                                       
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = icmp eq float* <%ID>, null                                                                                      

<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
<%ID> = bitcast double <%ID> to i64                                                                                     
expected answer:
		<%ID> = bitcast i64 <%ID> to double                                                                                     
Nearest neighbors:
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = select i1 <%ID>, double <%ID>, double <%ID>                                                                     
		<%ID> = fcmp ogt double <%ID>, <%ID>                                                                                    
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        

<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
<%ID> = bitcast float* <%ID> to i8*                                                                                     
expected answer:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = icmp eq float* <%ID>, null                                                                                      
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		tail call void <@ID>(i8* <%ID>, i8* <%ID>, i64 <%ID>, i32 <INT>, i1 false)                                              

<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		<%ID> = phi i16* [ <%ID>, <%ID> ], [ null, <%ID> ]                                                                      
		<%ID> = icmp ult i16* <%ID>, <%ID>                                                                                      
		<%ID> = getelementptr i16, i16* <%ID>, i64 <INT>                                                                        

<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = bitcast { float*, { { [4 x i64] } } }* <%ID> to i64*                                                            
		call void <@ID>(i64 <%ID>, i64 <INT>, { { float*, i64 } }* nonnull dereferenceable(16) <%ID>, { { float*, i64 } }* nonnull dereferenceable(16) <%ID>, float* <%ID>, i64 <INT>, float <FLOAT>)

<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = icmp ult i32* <%ID>, <%ID>                                                                                      
		store i32* <%ID>, i32** <%ID>, align 8                                                                                  
		<%ID> = ptrtoint i32* <%ID> to i64                                                                                      

<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                 
		tail call void <@ID>(i8* nonnull <%ID>, i8* <%ID>, i64 <%ID>, i32 <INT>, i1 false)                                      
		<%ID> = phi i32** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    

<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = atomicrmw add i32* <%ID>, i32 <INT> monotonic                                                                   
		<%ID> = add i16 <%ID>, <INT>                                                                                            
		tail call void <@ID>(i8* <%ID>, i8* <%ID>, i64 <%ID>, i32 <INT>, i1 false)                                              

<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		<%ID> = icmp ult i32* <%ID>, <%ID>                                                                                      
		tail call void <@ID>(i8* <%ID>, i8* <%ID>, i64 <%ID>, i32 <INT>, i1 false)                                              

<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<%ID> = bitcast i8* <%ID> to { double, double }*                                                                        
		store { i8*, { { [1 x i64] } } }* <%ID>, { i8*, { { [1 x i64] } } }** <%ID>, align 8                                    
		<%ID> = phi { double, double }* [ <%ID>, <%ID> ], [ null, <%ID> ]                                                       

<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = phi i32** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    
		store i32* <%ID>, i32** <%ID>, align 8                                                                                  
		<%ID> = icmp ugt i8* <%ID>, inttoptr (i64 <INT> to i8*)                                                                 

<%ID> = bitcast { float, float }* <%ID> to i8*                                                                          
<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { float, float }*                                                                          
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = phi i32** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    
		<%ID> = icmp eq float* <%ID>, null                                                                                      
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ null, <%ID> ], [ null, <%ID> ]                                                     

<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
expected answer:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = bitcast { i8 }* <%ID> to { { { { double*, i64 } } }* }*                                                         
		<%ID> = phi { { { double*, i64 } } }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                
		<%ID> = bitcast { { double*, i64 } }* <%ID> to { { { double*, i64 } } }*                                                
		<%ID> = bitcast { i8 }* <%ID> to { { double*, i64, i64 } }**                                                            

<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
expected answer:
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = call dereferenceable(24) { { { double*, i64, i64 } } }* <@ID>({ i8 }* <%ID>, i64 <%ID>, i64 <%ID>)              
		<%ID> = phi double* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                              
		<%ID> = fcmp une double <%ID>, <FLOAT>                                                                                  
		<%ID> = bitcast { i8 }* <%ID> to i8**                                                                                   

<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
Nearest neighbors:
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
		<%ID> = getelementptr inbounds { opaque*, opaque* }, { opaque*, opaque* }* <%ID>, i64 <INT>, i32 <INT>                  
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i64*                                                                     
		<%ID> = load { opaque*, opaque* }*, { opaque*, opaque* }** <%ID>, align 8                                               
		<%ID> = alloca { opaque*, opaque* }, align 8                                                                            

<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
expected answer:
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
Nearest neighbors:
		<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
		<%ID> = bitcast { { i32*, i64 } }* <%ID> to { { { i32*, i64 } } }*                                                      
		<%ID> = load { { { i32*, i64 } } }*, { { { i32*, i64 } } }** <%ID>, align 8                                             
		<%ID> = phi { { { i32*, i64, i64 } } }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                              
		<%ID> = getelementptr inbounds { { i32*, i64, i64 } }, { { i32*, i64, i64 } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>   

<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
Nearest neighbors:
		<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
		<%ID> = call i32 <@ID>(opaque* nonnull <%ID>)                                                                           
		<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to { i64, [8 x i8] }**                                       
		<%ID> = load <{ { i32 (...)**, i32, i32, i32, i8**, { { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, i32, i8* }*, i8, { { i8* }, i64, { i64, [8 x i8] } }, { i32, i32, i32, i32, i32 }, i8, i8, i8, { { i8* }, i64, { i64, [8 x i8] } } }, i8, i8, i8, i8, i8, [3 x i8], i32, i32, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, i8, [7 x i8] }>*, <{ { i32 (...)**, i32, i32, i32, i8**, { { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, i32, i8* }*, i8, { { i8* }, i64, { i64, [8 x i8] } }, { i32, i32, i32, i32, i32 }, i8, i8, i8, { { i8* }, i64, { i64, [8 x i8] } } }, i8, i8, i8, i8, i8, [3 x i8], i32, i32, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, i8, [7 x i8] }>** <%ID>, align 8
		<%ID> = load { { i32 (...)** }*, { i32 (...)** }*, i32, i32, i8*, i8*, i64, i32, i8*, i8*, i32, i32, opaque* }*, { { i32 (...)** }*, { i32 (...)** }*, i32, i32, i8*, i8*, i64, i32, i8*, i8*, i32, i32, opaque* }** <%ID>, align 8

<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
expected answer:
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
Nearest neighbors:
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
		<%ID> = bitcast { { { double*, i64 } } }* <%ID> to i8*                                                                  
		<%ID> = icmp eq double* <%ID>, null                                                                                     
		<%ID> = inttoptr i64 <%ID> to double*                                                                                   
		<%ID> = getelementptr inbounds double, double* <%ID>, i64 <INT>                                                         

<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
expected answer:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
Nearest neighbors:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = bitcast { i8 }* <%ID> to i8**                                                                                   
		<%ID> = phi i64 [ <%ID>, <%ID> ], [ 4, <%ID> ]                                                                          
		<%ID> = insertelement <4 x double> <double undef, double <FLOAT>, double <FLOAT>, double <FLOAT>>, double <%ID>, <TYP> 0
		<%ID> = ptrtoint { i8*, { { [5 x i64] } } }* <%ID> to i64                                                               

<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
		<@ID> = linkonce_odr constant [34 x i8]  <STRING>                                                                       
		call void <@ID>({ { { { { { { i64, i64, i8* } } } } } }* }* nonnull <%ID>, { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* <%ID>, { { { { { { i64, i64, i8* } } } } } }* bitcast ({ { i64, [16 x i8] } }* <@ID> to { { { { { { i64, i64, i8* } } } } } }*))
		<@ID> = external local_unnamed_addr constant i8*, align 8                                                               
		store { { { { { { i64, i64, i8* } } } } } }* <%ID>, { { { { { { i64, i64, i8* } } } } } }** <%ID>, align 8              

<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
		<%ID> = load { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }** <%ID>, align 8             
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
		<%ID> = bitcast i8* <%ID> to i64*                                                                                       

<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
Nearest neighbors:
		<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
		<%ID> = phi { i32, [1 x i8*] }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]
		<%ID> = icmp eq { i32, [1 x i8*] }* <%ID>, null                                                                         
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]               
		<%ID> = getelementptr inbounds { i32, [1 x i8*] }, { i32, [1 x i8*] }* <%ID>, i64 <INT>, i32 <INT>, i64 <%ID>           

<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
expected answer:
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
Nearest neighbors:
		<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
		<%ID> = phi i64 [ 0, <%ID> ], [ 2, <%ID> ]                                                                              
		<%ID> = alloca <2 x double>, align 16                                                                                   
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
		<%ID> = load <2 x i64>*, <2 x i64>** <%ID>, align 8                                                                     

<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
Nearest neighbors:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast <2 x i64> <%ID> to <8 x i16>                                                                            
		<%ID> = xor <2 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = add <2 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = getelementptr inbounds { { { { [8 x i64] }, { [8 x { i64, i32, i32 }] }, { [8 x i64] }, { { i8 }*, { { [8 x i64] } }, { i8 }*, { { i8 }*, { { [8 x i64] } } }* }, { i8 }*, { { [8 x i64] } }, { { [8 x i64] } } } }, { { { [8 x i64] }, { [8 x { i64, i32, i32 }] }, { [8 x i64] }, { { i8 }*, { { [8 x i64] } }, { i8 }*, { { i8 }*, { { [8 x i64] } } }* }, { i8 }*, { { [8 x i64] } }, { { [8 x i64] } } } } }, { { { { [8 x i64] }, { [8 x { i64, i32, i32 }] }, { [8 x i64] }, { { i8 }*, { { [8 x i64] } }, { i8 }*, { { i8 }*, { { [8 x i64] } } }* }, { i8 }*, { { [8 x i64] } }, { { [8 x i64] } } } }, { { { [8 x i64] }, { [8 x { i64, i32, i32 }] }, { [8 x i64] }, { { i8 }*, { { [8 x i64] } }, { i8 }*, { { i8 }*, { { [8 x i64] } } }* }, { i8 }*, { { [8 x i64] } }, { { [8 x i64] } } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i64 <INT>, i32 <INT>

<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
Nearest neighbors:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> undef, <4 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef>      
		<%ID> = bitcast float* <%ID> to <16 x i8>*                                                                              
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = phi <16 x i8> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                

<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = shufflevector <16 x i8> <%ID>, <16 x i8> <%ID>, <16 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>
		<%ID> = load <4 x double>, <4 x double>* <%ID>, align 1                                                                 
		<%ID> = bitcast i32* <%ID> to <16 x i8>*                                                                                

<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
expected answer:
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
Nearest neighbors:
		<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
		<%ID> = bitcast <8 x float>* <%ID> to i8*                                                                               
		<%ID> = alloca <4 x float>, align 16                                                                                    
		store <4 x float> <%ID>, <4 x float>* <%ID>, align 16                                                                   
		<%ID> = getelementptr inbounds <2 x float>, <2 x float>* <%ID>, i64 <INT>, i64 <INT>                                    

<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = load <4 x i32>, <4 x i32>* <%ID>, align 1                                                                       
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     
		<%ID> = shufflevector <4 x i32> <%ID>, <4 x i32> undef, <4 x i32> <i32 <INT>, i32 undef, i32 <INT>, i32 undef>          
		<%ID> = bitcast <2 x i64> <%ID> to <4 x float>                                                                          

<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = shufflevector <2 x i64> <%ID>, <2 x i64> <%ID>, <2 x i32> <i32 <INT>, i32 <INT>>                                
		<%ID> = load <4 x i32>, <4 x i32>* <%ID>, align 1                                                                       
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = bitcast i32* <%ID> to <4 x i32>*                                                                                

<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast <2 x i64> <%ID> to <8 x i16>                                                                            
		<%ID> = shufflevector <8 x i16> <%ID>, <8 x i16> <%ID>, <8 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>
		<%ID> = sub <8 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = bitcast <8 x i16> <%ID> to <4 x i32>                                                                            

<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = and <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                               
		<%ID> = phi <4 x float> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                              
		<%ID> = tail call fast <4 x float> <@ID>(<4 x float> <%ID>, <4 x float> <%ID>)                                          
		<%ID> = load <4 x i32>, <4 x i32>* <%ID>, align 1                                                                       

<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
expected answer:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = and <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            
		<%ID> = call fast <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            
		<%ID> = tail call fast <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                       

<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
<%ID> = bitcast double* <%ID> to i64*                                                                                   
expected answer:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i64*                                                                                   
		<%ID> = xor i64 <%ID>, <%ID>                                                                                            
		<%ID> = getelementptr inbounds { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x double] }, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x double] }* <%ID>, i64 <INT>, i32 <INT>, i64 <%ID>
		<%ID> = icmp ugt i32 <%ID>, <INT>                                                                                       
		<%ID> = getelementptr inbounds { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x i64] }, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x i64] }* <%ID>, i64 <INT>, i32 <INT>, i64 <%ID>

<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
<%ID> = bitcast double* <%ID> to i8*                                                                                    
expected answer:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i8*                                                                                    
		<%ID> = getelementptr inbounds double, double* <%ID>, i64 <%ID>                                                         
		<%ID> = bitcast { double }* <%ID> to i64*                                                                               
		<%ID> = ptrtoint double* <%ID> to i64                                                                                   
		<%ID> = bitcast { { { { i32 (...)** }, <{ { i32 (...)**, { opaque* }, i8*, i8*, i8*, i8*, i8*, i8* }, { { { { { { i64, i64, i8* } } } } } }, i8*, i32, [4 x i8] }> }, i8*, i32, i32 }, opaque }* <%ID> to { i32 (...)**, opaque }*

<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
<%ID> = bitcast float <%ID> to i32                                                                                      
expected answer:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
Nearest neighbors:
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = select i1 <%ID>, float <%ID>, float <%ID>                                                                       
		<%ID> = fcmp olt float <%ID>, <%ID>                                                                                     
		<%ID> = phi i64 [ <%ID>, <%ID> ], [ undef, <%ID> ]                                                                      
		<%ID> = phi i32 [ <%ID>, <%ID> ], [ undef, <%ID> ]                                                                      

<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
<%ID> = bitcast double <%ID> to i64                                                                                     
expected answer:
		<%ID> = bitcast i64 <%ID> to double                                                                                     
Nearest neighbors:
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = phi i64 [ <%ID>, <%ID> ], [ undef, <%ID> ]                                                                      
		<%ID> = select i1 <%ID>, double <%ID>, double <%ID>                                                                     
		<%ID> = fcmp ogt double <%ID>, <%ID>                                                                                    
		<%ID> = fcmp fast ogt double <%ID>, <%ID>                                                                               

<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
<%ID> = bitcast float* <%ID> to i8*                                                                                     
expected answer:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
Nearest neighbors:
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = getelementptr inbounds float, float* <%ID>, i64 <INT>                                                           
		<%ID> = bitcast i64* <%ID> to i8*                                                                                       
		<@ID> = external local_unnamed_addr constant i8*, align 8                                                               
		<%ID> = getelementptr float, float* <%ID>, i64 <%ID>                                                                    

<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = fsub fast float <%ID>, <%ID>                                                                                    
		<%ID> = bitcast i64 <%ID> to double                                                                                     
		<%ID> = getelementptr inbounds { { i8*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { i8*, { { [5 x i64] } } }* }, { { i8 }, { i8*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { i8*, { { [5 x i64] } } }* }, { { [5 x i64] }, { { [5 x i64] } }, { [5 x i64] }, { [5 x i64] }, { i8*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { i8*, { { [5 x i64] } } }* } } } }, { { i8*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { i8*, { { [5 x i64] } } }* }, { { i8 }, { i8*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { i8*, { { [5 x i64] } } }* }, { { [5 x i64] }, { { [5 x i64] } }, { [5 x i64] }, { [5 x i64] }, { i8*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { i8*, { { [5 x i64] } } }* } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i64 <INT>
		<%ID> = lshr i64 <%ID>, <INT>                                                                                           

<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = load <2 x i64>, <2 x i64>* <%ID>, align 16                                                                      
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       
		<%ID> = load <4 x i32>, <4 x i32>* <%ID>, align 1                                                                       
		<%ID> = bitcast i32* <%ID> to <4 x i32>*                                                                                

<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = bitcast { { i32*, i32*, { { i32* } } } }* <%ID> to i64*                                                         
		<%ID> = getelementptr inbounds { { i32*, i32*, { { i32* } } } }, { { i32*, i32*, { { i32* } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
		<%ID> = getelementptr inbounds { i32 }, { i32 }* <%ID>, i64 <%ID>, i32 <INT>                                            

<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = xor i64 <%ID>, <%ID>                                                                                            
		ret i64 <%ID>                                                                                                           
		<%ID> = load { opaque*, opaque* }*, { opaque*, opaque* }** <%ID>, align 8                                               
		<%ID> = shl i64 <%ID>, <%ID>                                                                                            

<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<@ID> = linkonce_odr constant [34 x i8]  <STRING>                                                                       
		call void <@ID>({ i8 }* nonnull <@ID>, opaque* nonnull <%ID>, i8* getelementptr inbounds ([43 x i8], [43 x i8]* <@ID>, i64 <INT>, i64 <INT>), i64 <INT>, <{ i32 (...)**, { { { opaque* } } }, { { i32*, [24 x i8] } }, { { i32*, [24 x i8] } }, { { i32*, [24 x i8] } }, { { i32*, [24 x i8] } }, i32, i8, [3 x i8], { { { i8 }, { i8 }, i8, opaque*, opaque*, i64, i64, i64, i64, i64 } }, { { { i8 }, { i8 }, i8, opaque*, opaque*, i64, i64, i64, i64, i64 } }, i8, [7 x i8] }>* ({ { { { { { { { i64, i64, i8* } } } } } } }, { i32 (...)**, { i32 (...)**, { { { { i32 (...)** }* } } }, { i32 (...)** }* }*, { i32, opaque* }*, <{ opaque*, { <{ i32 (...)**, { { { i32 } } } }>, [4 x i8] }*, opaque*, i32, [4 x i8] }>*, opaque*, <{ { i32 (...)** }*, i32, [4 x i8] }>* }*, { i32 (...)** }*, opaque*, { { { i32 (...)** } }, { { i8* } }, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, { { { { { { { i64, i64, i8* } } } } } }* }, { { { { { { { i64, i64, i8* } } } } } }* }, { { { { { { { i64, i64, i8* } } } } } }* }, { { { i32 (...)** } }, { { i8* } }, { { { { { { { i64, i64, i8* } } } } } }* }, i32, i32 }*, i8, i8, i8, i8, i32 }*, opaque*, { { { i32*, i64 } } }, { { { i32*, i64 } } }, { { { i32*, i64 } } }, { { { i32*, i64 } } }, i32, { { { { { i32, { { { { { { i64, i64, i8* } } } } } } }* } } } }* }*)* nonnull <@ID>)
		<@ID> = external local_unnamed_addr constant i8*, align 8                                                               
		define linkonce_odr void <@ID>({ { { { { { { { i64*, [40 x i8] } }* }*, [8 x i8] }, i64 } } }, { <{ i32 (...)**, { { { i32 } } } }>, [4 x i8] }* }*, i64*, i64, { [2 x i64] }*) local_unnamed_addr

<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<@ID> = linkonce_odr constant [34 x i8]  <STRING>                                                                       
		define linkonce_odr void <@ID>({ { { { { { { { i64*, [40 x i8] } }* }*, [8 x i8] }, i64 } } }, { <{ i32 (...)**, { { { i32 } } } }>, [4 x i8] }* }*, i64*, i64, { [3 x i64] }*) local_unnamed_addr
		<@ID> = external local_unnamed_addr constant i8*, align 8                                                               
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       

<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		store i32* <%ID>, i32** <%ID>, align 8                                                                                  
		<%ID> = load { { { i32*, i64 } } }*, { { { i32*, i64 } } }** <%ID>, align 8                                             
		<%ID> = load <2 x i64>*, <2 x i64>** <%ID>, align 8                                                                     
		<@ID> = linkonce_odr constant [34 x i8]  <STRING>                                                                       

<%ID> = bitcast { i64*, i64 }* <%ID> to { i64*, i64 }*                                                                  
<%ID> = bitcast { { i64*, i64 } }* <%ID> to { i64*, i64 }*                                                              
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = load volatile i32, i32* <%ID>, align 4                                                                          
		<%ID> = zext i32 <%ID> to i64                                                                                           
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = phi i32* [ null, <%ID> ], [ <%ID>, <%ID> ], [ null, <%ID> ]                                                     

<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
expected answer:
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
Nearest neighbors:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = fadd double <%ID>, <%ID>                                                                                        
		<%ID> = bitcast { i8 }* <%ID> to i8**                                                                                   
		define linkonce_odr void <@ID>({ i8 }*, i64, i64, { double, double }* dereferenceable(16)) local_unnamed_addr           

<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
Nearest neighbors:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
		<%ID> = getelementptr inbounds { opaque*, opaque* }, { opaque*, opaque* }* <%ID>, i64 <INT>, i32 <INT>                  
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i64*                                                                     
		<%ID> = alloca { opaque*, opaque* }, align 8                                                                            

<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
expected answer:
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
Nearest neighbors:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
		<%ID> = phi i64 [ <%ID>, <%ID> ], [ 4, <%ID> ]                                                                          
		<%ID> = phi i64 [ 0, <%ID> ], [ 32, <%ID> ]                                                                             
		store i8 <INT>, i8* <%ID>, align 2                                                                                      

<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
Nearest neighbors:
		<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = getelementptr inbounds { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }* <%ID>, i64 <INT>, i32 <INT>
		<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to { i64, [8 x i8] }**                                       
		<%ID> = getelementptr inbounds { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>

<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
expected answer:
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
Nearest neighbors:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
		<%ID> = getelementptr inbounds <{ { { { double*, i64, i64 } } }, { { { { i32*, i64 } } } }, { { { { i32*, i64 } } } }, { { { i64*, i64 } } }, { { { i64*, i64 } } }, i64, double, double, double, i8, i8, i8, [5 x i8] }>, <{ { { { double*, i64, i64 } } }, { { { { i32*, i64 } } } }, { { { { i32*, i64 } } } }, { { { i64*, i64 } } }, { { { i64*, i64 } } }, i64, double, double, double, i8, i8, i8, [5 x i8] }>* <%ID>, i64 <INT>, i32 <INT>
		store i8 <INT>, i8* <%ID>, align 1                                                                                      
		<%ID> = getelementptr inbounds <{ { { { double*, i64, i64 } } }, { { { { i32*, i64 } } } }, { { { { i32*, i64 } } } }, { { { i64*, i64 } } }, { { { i64*, i64 } } }, i64, double, double, double, i8, i8, i8, [5 x i8] }>, <{ { { { double*, i64, i64 } } }, { { { { i32*, i64 } } } }, { { { { i32*, i64 } } } }, { { { i64*, i64 } } }, { { { i64*, i64 } } }, i64, double, double, double, i8, i8, i8, [5 x i8] }>* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>

<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
expected answer:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
Nearest neighbors:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = phi i64 [ <%ID>, <%ID> ], [ 4, <%ID> ]                                                                          
		call void <@ID>({ i8 }* <%ID>, i64 <%ID>)                                                                               
		<%ID> = phi i64 [ 8, <%ID> ], [ 0, <%ID> ]                                                                              
		<%ID> = phi i64 [ <%ID>, <%ID> ], [ undef, <%ID> ]                                                                      

<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = load { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }** <%ID>, align 8             
		<%ID> = tail call zeroext i1 <@ID>({ i8*, i8*, opaque*, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, opaque*, { i32 (...)** }* }* <%ID>, { { { { { { i64, i64, i8* } } } } } }* <%ID>)
		<%ID> = load i8, i8* <%ID>, align 8                                                                                     

<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
Nearest neighbors:
		<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = bitcast i8** <%ID> to { { i32 (...)** } }**                                                                     
		<%ID> = tail call zeroext i1 <@ID>({ i8*, i8*, opaque*, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, opaque*, { i32 (...)** }* }* <%ID>, { { { { { { i64, i64, i8* } } } } } }* <%ID>)
		<%ID> = load { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }** <%ID>, align 8             

<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
expected answer:
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
Nearest neighbors:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = phi i64 [ <%ID>, <%ID> ], [ 4, <%ID> ]                                                                          
		store <2 x double> <%ID>, <2 x double>* <%ID>, align 8                                                                  

<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
Nearest neighbors:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = tail call <16 x i8> <@ID>(<8 x i16> <%ID>, <8 x i16> <%ID>)                                                     
		<%ID> = tail call <16 x i8> <@ID>(<16 x i8> <%ID>, <16 x i8> <%ID>)                                                     
		!UNK                                                                                                                    

<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
Nearest neighbors:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> undef, <4 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef>      
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = bitcast float* <%ID> to <16 x i8>*                                                                              

<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = phi i64 [ 0, <%ID> ], [ 8, <%ID> ]                                                                              
		<%ID> = load <4 x i32>, <4 x i32>* <%ID>, align 1                                                                       
		<%ID> = phi <2 x i64> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                

<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = bitcast i32* <%ID> to <16 x i8>*                                                                                
		<%ID> = phi i64 [ 8, <%ID> ], [ <%ID>, <%ID> ]                                                                          
		<%ID> = shufflevector <16 x i8> <%ID>, <16 x i8> <%ID>, <16 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>

<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
expected answer:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = xor <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		store <4 x i64> <%ID>, <4 x i64>* <%ID>, align 1                                                                        
		<%ID> = tail call fast <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                       

<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
expected answer:
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
Nearest neighbors:
		<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = load <4 x float>, <4 x float>* <%ID>, align 1                                                                   
		<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = getelementptr inbounds { { { { [289 x float] } } } }, { { { { [289 x float] } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i64 <%ID>

<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
expected answer:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> undef, <4 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef>      
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> <%ID>, <4 x i32> <i32 <INT>, i32 undef, i32 undef, i32 <INT>>      
		<%ID> = phi <4 x float> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                            

<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = fcmp fast olt <4 x float> <%ID>, <%ID>                                                                          
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> undef, <4 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef>      
		<%ID> = phi i64 [ 0, <%ID> ], [ 8, <%ID> ]                                                                              

<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = shufflevector <2 x i64> <%ID>, <2 x i64> <%ID>, <2 x i32> <i32 <INT>, i32 <INT>>                                
		<%ID> = load <4 x i32>, <4 x i32>* <%ID>, align 1                                                                       
		<%ID> = load <4 x i32>, <4 x i32>* <%ID>, align 4                                                                       

<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = bitcast <8 x i16> <%ID> to <4 x i32>                                                                            
		<%ID> = or <4 x i32> <%ID>, <%ID>                                                                                       
		<%ID> = tail call <16 x i8> <@ID>(<16 x i8> <%ID>, <16 x i8> <%ID>)                                                     

<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = and <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                               
		<%ID> = phi <4 x float> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                            
		<%ID> = tail call fast <4 x float> <@ID>(<4 x float> <%ID>, <4 x float> <%ID>)                                          

<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
expected answer:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = tail call fast <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                       
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            
		<%ID> = call fast <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            

<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
expected answer:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = and <8 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = phi i64 [ 0, <%ID> ], [ 32, <%ID> ]                                                                             

<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
expected answer:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = and <8 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = phi i64 [ 0, <%ID> ], [ 32, <%ID> ]                                                                             
		<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              

<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast double* <%ID> to i64*                                                                                   
expected answer:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i64*                                                                                   
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = fadd double <%ID>, <%ID>                                                                                        
		<%ID> = shl i64 <%ID>, <INT>                                                                                            
		<%ID> = trunc i64 <%ID> to i32                                                                                          

<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast double* <%ID> to i8*                                                                                    
expected answer:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
Nearest neighbors:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = bitcast double* <%ID> to i8*                                                                                    
		<%ID> = getelementptr double, double* <%ID>, i64 <%ID>                                                                  
		<%ID> = load double, double* <%ID>, align 8                                                                             
		<%ID> = phi i64 [ 0, <%ID> ], [ 0, <%ID> ], [ 0, <%ID> ], [ <%ID>, <%ID> ]                                              

<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast float <%ID> to i32                                                                                      
expected answer:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
Nearest neighbors:
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = select i1 <%ID>, float <%ID>, float <%ID>                                                                       
		<%ID> = phi i32 [ <%ID>, <%ID> ], [ undef, <%ID> ]                                                                      
		<%ID> = fcmp ogt float <%ID>, <%ID>                                                                                     

<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast double <%ID> to i64                                                                                     
expected answer:
		<%ID> = bitcast i64 <%ID> to double                                                                                     
Nearest neighbors:
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = phi i64 [ <%ID>, <%ID> ], [ undef, <%ID> ]                                                                      
		<%ID> = select i1 <%ID>, double <%ID>, double <%ID>                                                                     
		<%ID> = phi i64 [ 2, <%ID> ], [ 1, <%ID> ]                                                                              

<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast float* <%ID> to i8*                                                                                     
expected answer:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
Nearest neighbors:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = shl i64 <%ID>, <INT>                                                                                            
		store float <%ID>, float* <%ID>, align 4                                                                                
		store i8 <INT>, i8* <%ID>, align 1                                                                                      

<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = load i16, i16* <%ID>, align 2                                                                                   
		store <8 x i16> <%ID>, <8 x i16>* <%ID>, align 2                                                                        
		<%ID> = icmp ult i64 <%ID>, <INT>                                                                                       

<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = insertelement <8 x float> undef, float <%ID>, <TYP> 0                                                           
		<%ID> = inttoptr i64 <%ID> to <8 x float>*                                                                              
		<%ID> = phi float [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    

<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = load <4 x i32>, <4 x i32>* <%ID>, align 1                                                                       
		<%ID> = load <4 x i32>, <4 x i32>* <%ID>, align 4                                                                       
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 4                                                                        

<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = shl i64 <%ID>, <INT>                                                                                            
		<%ID> = getelementptr inbounds { i32 }, { i32 }* <%ID>, i64 <%ID>, i32 <INT>                                            
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      

<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = trunc i64 <%ID> to i32                                                                                          
		<%ID> = getelementptr inbounds i64, i64* <%ID>, i64 <%ID>                                                               
		<%ID> = phi i64 [ <%ID>, <%ID> ], [ 4, <%ID> ]                                                                          

<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<%ID> = load i32, i32* <%ID>, align 4                                                                                   
		store i32 <%ID>, i32* <%ID>, align 4                                                                                    
		<%ID> = add i64 <%ID>, <%ID>                                                                                            

<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<%ID> = alloca { i8*, { { [1 x i64] } } }, align 8                                                                      
		<%ID> = alloca { i32*, { { [1 x i64] } } }, align 8                                                                     
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to { { i8 }, [23 x i8] }*                                  

<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = icmp ult i64 <%ID>, <INT>                                                                                       
		<%ID> = shl i64 <%ID>, <INT>                                                                                            
		<%ID> = load i32*, i32** <%ID>, align 8                                                                                 

<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = phi i64 [ <%ID>, <%ID> ], [ 4, <%ID> ]                                                                          
		<%ID> = phi i64 [ 4, <%ID> ], [ <%ID>, <%ID> ]                                                                          
		<%ID> = phi i64 [ 0, <%ID> ], [ 32, <%ID> ]                                                                             

<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
Nearest neighbors:
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
		<%ID> = getelementptr inbounds { opaque*, opaque* }, { opaque*, opaque* }* <%ID>, i64 <INT>, i32 <INT>                  
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i64*                                                                     
		<%ID> = phi { opaque*, opaque* }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                    

<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
expected answer:
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
Nearest neighbors:
		<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to i8*                                                                
		<%ID> = load { { { i32*, i64, i64 } } }*, { { { i32*, i64, i64 } } }** <%ID>, align 8                                   
		<%ID> = load { { i32*, i64, i64 } }*, { { i32*, i64, i64 } }** <%ID>, align 8                                           

<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
Nearest neighbors:
		<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
		<%ID> = call i32 <@ID>(opaque* nonnull <%ID>)                                                                           
		<%ID> = getelementptr inbounds { { i32 (...)** }, { { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, { { i32, <{ i32 (...)**, i32, [4 x i8] }>**, i64, <{ i32 (...)**, i32, [4 x i8] }>**, i8** }* } }, i32, { { i8* }, i64, { i64, [8 x i8] } } }, opaque }, { { i32 (...)** }, { { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, { { i32, <{ i32 (...)**, i32, [4 x i8] }>**, i64, <{ i32 (...)**, i32, [4 x i8] }>**, i8** }* } }, i32, { { i8* }, i64, { i64, [8 x i8] } } }, opaque }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>
		invoke fastcc void <@ID>({ { i8* }, i64, { i64, [8 x i8] } }* noalias nonnull <%ID>)
 to label <%ID> unwind label <%ID> 

<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
expected answer:
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
Nearest neighbors:
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
		<%ID> = bitcast { { { double*, i64 } } }* <%ID> to i8*                                                                  
		<%ID> = bitcast <{ { { { float*, i64 } } }*, { i8 }, [7 x i8] }>* <%ID> to i8*                                          
		<%ID> = bitcast { { { double*, i64 } } }* <%ID> to { i8 }*                                                              

<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
expected answer:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
Nearest neighbors:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
		<%ID> = getelementptr inbounds { { { { { double*, { i64 }, { i64 } } }, { { { double*, i64, i64 } } }*, { i64 }, { i64 }, i64 } } }, { { { { { double*, { i64 }, { i64 } } }, { { { double*, i64, i64 } } }*, { i64 }, { i64 }, i64 } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = getelementptr inbounds { { { { { double*, { i64 }, { i64 } } }, { { { double*, i64, i64 } } }*, { i64 }, { i64 }, i64 } } }, { { { { { double*, { i64 }, { i64 } } }, { { { double*, i64, i64 } } }*, { i64 }, { i64 }, i64 } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = getelementptr inbounds { { { { { double*, { i64 }, { i64 } } }, { { { double*, i64, i64 } } }*, { i64 }, { i64 }, i64 } } }, { { { { { double*, { i64 }, { i64 } } }, { { { double*, i64, i64 } } }*, { i64 }, { i64 }, i64 } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>

<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
		<%ID> = tail call i8* <@ID>(i64 <INT>)                                                                                  
		<%ID> = invoke dereferenceable(24) { { { { { { i64, i64, i8* } } } } } }* <@ID>({ { { { { { i64, i64, i8* } } } } } }* <%ID>, { { { { { { i64, i64, i8* } } } } } }* nonnull dereferenceable(24) <%ID>)
 to label <%ID> unwind label <%ID>
		<%ID> = getelementptr inbounds { { { { { { { { { i64, i64, i8* } } } } } }* } } }, { { { { { { { { { i64, i64, i8* } } } } } }* } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>

<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
		<%ID> = getelementptr inbounds { <{ opaque, <{ opaque, opaque*, opaque*, i8, [7 x i8] }>*, opaque*, i8 }>, { { { { { { i64, i64, i8* } } } } } }* }, { <{ opaque, <{ opaque, opaque*, opaque*, i8, [7 x i8] }>*, opaque*, i8 }>, { { { { { { i64, i64, i8* } } } } } }* }* <%ID>, i64 <INT>, i32 <INT>
		<%ID> = getelementptr inbounds { { { { { { { i64, i64, i8* } } } } } }, { { { i32 (...)** } }, { { i8* } }, { double }, i32, [1 x i32] } }, { { { { { { { i64, i64, i8* } } } } } }, { { { i32 (...)** } }, { { i8* } }, { double }, i32, [1 x i32] } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		call void <@ID>({ opaque*, { { opaque, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } } }, { { i64 } } }* nonnull <%ID>, { <{ opaque, <{ opaque, opaque*, opaque*, i8, [7 x i8] }>*, opaque*, i8 }>, { { { { { { i64, i64, i8* } } } } } }* }* <%ID>)

<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
Nearest neighbors:
		<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
		<%ID> = bitcast i8** <%ID> to { { i32 (...)** } }**                                                                     
		<%ID> = inttoptr i64 <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                    
		<%ID> = select i1 <%ID>, i8** null, i8** <%ID>                                                                          
		<%ID> = getelementptr inbounds { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x i64] }, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x i64] }* <%ID>, i64 <INT>, i32 <INT>, i64 <%ID>

<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
expected answer:
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
Nearest neighbors:
		<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
		<%ID> = getelementptr inbounds { { { { [1024 x double] } } } }, { { { { [1024 x double] } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i64 <%ID>
		<%ID> = bitcast { { { { { double*, { i64 }, { i64 } } }, { { { double*, i64, i64 } } }*, { i64 }, { i64 }, i64 } } }* <%ID> to i8*
		<%ID> = getelementptr inbounds { <{ { { { double*, i64 } } }*, { { { double*, i64 } } }*, { i8 }, [7 x i8] }>, { { { double*, i64 } } }* }, { <{ { { { double*, i64 } } }*, { { { double*, i64 } } }*, { i8 }, [7 x i8] }>, { { { double*, i64 } } }* }* <%ID>, i64 <INT>, i32 <INT>

<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
Nearest neighbors:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
		<%ID> = xor <2 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = phi i16 [ <%ID>, <%ID> ], [ 0, <%ID> ]                                                                          
		<%ID> = add <2 x i64> <%ID>, <%ID>                                                                                      

<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
Nearest neighbors:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
		<%ID> = phi <16 x i8> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> undef, <4 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef>      
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> <%ID>, <4 x i32> <i32 <INT>, i32 undef, i32 undef, i32 <INT>>      

<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast i32* <%ID> to <16 x i8>*                                                                                
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
		<%ID> = load <16 x i8>, <16 x i8>* <%ID>, align 16                                                                      

<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
expected answer:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
		<%ID> = xor <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
		<%ID> = phi <4 x i64> [ <%ID>, <%ID> ], [ zeroinitializer, <%ID> ]                                                      
		<%ID> = phi { double, double }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                      

<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
expected answer:
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
Nearest neighbors:
		<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
		<%ID> = getelementptr inbounds <2 x float>, <2 x float>* <%ID>, i64 <INT>, i64 <INT>                                    
		<%ID> = bitcast <8 x float>* <%ID> to i8*                                                                               
		<%ID> = getelementptr inbounds { <{ float*, { i8 } }>, [7 x i8] }, { <{ float*, { i8 } }>, [7 x i8] }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>

<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = bitcast <2 x i64> <%ID> to <4 x float>                                                                          
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         

<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
		<%ID> = bitcast <8 x i16> <%ID> to <4 x i32>                                                                            
		<%ID> = ashr <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                              
		<%ID> = or <4 x i32> <%ID>, <%ID>                                                                                       

<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = and <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                               
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
		<%ID> = call fast <4 x float> <@ID>(<4 x float> <%ID>, <4 x float> <%ID>)                                               
		<%ID> = tail call fast <4 x float> <@ID>(<4 x float> <%ID>, <4 x float> <%ID>)                                          

<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
expected answer:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = and <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = call fast <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            

<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
expected answer:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		ret <2 x i64> <%ID>                                                                                                     
		<%ID> = phi i32 [ <%ID>, <%ID> ]                                                                                        
		<%ID> = xor <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   
		<%ID> = tail call fast <8 x float> <@ID>(<8 x float> <%ID>, <8 x float> <%ID>)                                          

<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
expected answer:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
		<%ID> = phi <8 x float> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                              
		<%ID> = tail call fast <8 x float> <@ID>(<8 x float> <%ID>, <8 x float> <%ID>)                                          
		<%ID> = bitcast { i8*, { { [5 x i64] } } }* <%ID> to i8*                                                                

<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
<%ID> = bitcast double* <%ID> to i64*                                                                                   
expected answer:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i64*                                                                                   
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
		<%ID> = getelementptr inbounds { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x double] }, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x double] }* <%ID>, i64 <INT>, i32 <INT>, i64 <%ID>
		<%ID> = getelementptr inbounds { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x i64] }, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x i64] }* <%ID>, i64 <INT>, i32 <INT>, i64 <%ID>
		<%ID> = ashr i64 <%ID>, <INT>                                                                                           

<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
<%ID> = bitcast double* <%ID> to i8*                                                                                    
expected answer:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i8*                                                                                    
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
		<%ID> = getelementptr inbounds { { { { { double*, { i64 }, { i64 } } }, { { { double*, i64, i64 } } }*, { i64 }, { i64 }, i64 } } }, { { { { { double*, { i64 }, { i64 } } }, { { { double*, i64, i64 } } }*, { i64 }, { i64 }, i64 } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = phi { opaque* }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                             
		<%ID> = phi i8* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]

<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
<%ID> = bitcast float <%ID> to i32                                                                                      
expected answer:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
Nearest neighbors:
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = fcmp fast ogt float <%ID>, <%ID>                                                                                
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
		<%ID> = phi i32 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      
		<%ID> = select i1 <%ID>, float <%ID>, float <%ID>                                                                       

<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
<%ID> = bitcast double <%ID> to i64                                                                                     
expected answer:
		<%ID> = bitcast i64 <%ID> to double                                                                                     
Nearest neighbors:
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
		<%ID> = fcmp fast ogt double <%ID>, <%ID>                                                                               
		<%ID> = fcmp ogt double <%ID>, <%ID>                                                                                    
		<%ID> = phi i64 [ 2, <%ID> ], [ 1, <%ID> ]                                                                              

<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
<%ID> = bitcast float* <%ID> to i8*                                                                                     
expected answer:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
Nearest neighbors:
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
		<%ID> = bitcast { { { float*, i64 } } }** <%ID> to { { float*, i64 } }**                                                
		<%ID> = bitcast i64* <%ID> to i8*                                                                                       
		<%ID> = load { { { float*, i64 } } }*, { { { float*, i64 } } }** <%ID>, align 8                                         

<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		<%ID> = phi i16* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                     
		<%ID> = getelementptr inbounds i16, i16* <%ID>, i64 <INT>                                                               
		<%ID> = phi i16* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                   
		<%ID> = phi i16 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      

<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
		<%ID> = getelementptr inbounds { { { { [47 x float] } } } }, { { { { [47 x float] } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i64 <INT>
		<%ID> = getelementptr inbounds { { { { float*, i64 } } }*, { { { float*, i64 } } }* }, { { { { float*, i64 } } }*, { { { float*, i64 } } }* }* <%ID>, i64 <INT>, i32 <INT>
		<%ID> = getelementptr inbounds { { { { { float*, { i64 }, { i64 } } }, { { { float*, i64 } } }*, { i64 }, { i64 }, i64 } } }, { { { { { float*, { i64 }, { i64 } } }, { { { float*, i64 } } }*, { i64 }, { i64 }, i64 } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>

<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       
		<%ID> = getelementptr inbounds { { i32*, i64 } }, { { i32*, i64 } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>             
		<%ID> = load <2 x i64>, <2 x i64>* <%ID>, align 16                                                                      

<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
		<%ID> = bitcast { { i32*, i32*, { { i32* } } } }* <%ID> to i64*                                                         
		<%ID> = bitcast { { opaque**, opaque**, { { opaque** } } } }* <%ID> to i64*                                             
		<%ID> = bitcast { i32, i16 }* <%ID> to i64*                                                                             

<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
		<%ID> = getelementptr inbounds { { { { { { { i64, i64, i8* } } } } } }, { { { i32 (...)** } }, { { i8* } }, { double }, i32, [1 x i32] } }, { { { { { { { i64, i64, i8* } } } } } }, { { { i32 (...)** } }, { { i8* } }, { double }, i32, [1 x i32] } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = phi i16* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                   
		<%ID> = add i16 <%ID>, <INT>                                                                                            

<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
		<%ID> = getelementptr inbounds { i64*, i64, { { i64 } } }, { i64*, i64, { { i64 } } }* <%ID>, i64 <INT>, i32 <INT>      
		<%ID> = getelementptr inbounds { i32, i32, i32 }, { i32, i32, i32 }* <%ID>, i64 <INT>, i32 <INT>                        
		<%ID> = load { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }*, { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }** <%ID>, align 8

<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
		<%ID> = phi { opaque* }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                             
		<%ID> = phi i8 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]
		<%ID> = phi i8 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                   

<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
		store i32* <%ID>, i32** <%ID>, align 8                                                                                  
		<%ID> = tail call i64 <@ID>(i8* nonnull <%ID>, i1 false)                                                                
		<%ID> = load { { { i32*, i64 } } }*, { { { i32*, i64 } } }** <%ID>, align 8                                             

<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to { i8 }*                                                         
		<%ID> = tail call i64 <@ID>(i8* nonnull <%ID>, i1 false)                                                                
		<%ID> = getelementptr inbounds { { { { { { { i64, i64, i8* } } } } } }, { { { i32 (...)** } }, { { i8* } }, { double }, i32, [1 x i32] } }, { { { { { { { i64, i64, i8* } } } } } }, { { { i32 (...)** } }, { { i8* } }, { double }, i32, [1 x i32] } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = phi i16 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      

<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
expected answer:
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
Nearest neighbors:
		<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
		<%ID> = getelementptr inbounds { { i32*, i64, i64 } }, { { i32*, i64, i64 } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>   
		<%ID> = load { { i32*, i64, i64 } }*, { { i32*, i64, i64 } }** <%ID>, align 8                                           
		<%ID> = load { { { i32*, i64 } } }*, { { { i32*, i64 } } }** <%ID>, align 8                                             

<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
Nearest neighbors:
		<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
		<%ID> = phi i8* [ <%ID>, <%ID> ]                                                                                        
		<%ID> = load <{ { i32 (...)**, i32, i32, i32, i8**, { { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, i32, i8* }*, i8, { { i8* }, i64, { i64, [8 x i8] } }, { i32, i32, i32, i32, i32 }, i8, i8, i8, { { i8* }, i64, { i64, [8 x i8] } } }, i8, i8, i8, i8, i8, [3 x i8], i32, i32, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, i8, [7 x i8] }>*, <{ { i32 (...)**, i32, i32, i32, i8**, { { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, i32, i8* }*, i8, { { i8* }, i64, { i64, [8 x i8] } }, { i32, i32, i32, i32, i32 }, i8, i8, i8, { { i8* }, i64, { i64, [8 x i8] } } }, i8, i8, i8, i8, i8, [3 x i8], i32, i32, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, i8, [7 x i8] }>** <%ID>, align 8
		<%ID> = phi { i64, opaque*, opaque* }** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                              

<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
expected answer:
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
Nearest neighbors:
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8**                                                            
		<%ID> = getelementptr inbounds { { { double*, i64 } } }, { { { double*, i64 } } }* <%ID>, i64 <INT>, i32 <INT>          
		<%ID> = getelementptr inbounds { { { double*, i64, i64 } } }, { { { double*, i64, i64 } } }* <%ID>, i64 <INT>, i32 <INT>

<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
expected answer:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
Nearest neighbors:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
		<%ID> = trunc i64 <%ID> to i32                                                                                          
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to i8*                                                                 
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ null, <%ID> ]                                                                      

<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
		<%ID> = bitcast i8* <%ID> to i8**                                                                                       
		<%ID> = icmp eq { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* <%ID>, null
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }**                                                                     

<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
		<%ID> = bitcast i8* <%ID> to i8**                                                                                       
		<%ID> = phi i8* [ <%ID>, <%ID> ]                                                                                        
		call void <@ID>(i8* nonnull <%ID>)                                                                                      

<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
Nearest neighbors:
		<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
		<%ID> = getelementptr inbounds i8*, i8** <%ID>, i64 <%ID>                                                               
		<%ID> = load { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x i64] }*, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x i64] }** <%ID>, align 8
		<%ID> = phi { i32, [1 x i8*] }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]

<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
expected answer:
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
Nearest neighbors:
		<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
		<%ID> = getelementptr inbounds { { { double, double }*, i64 } }, { { { double, double }*, i64 } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>
		<%ID> = getelementptr inbounds { i64, opaque*, opaque* }, { i64, opaque*, opaque* }* <%ID>, i64 <INT>, i32 <INT>        
		<%ID> = getelementptr { double, double }, { double, double }* <%ID>, i64 <%ID>                                          

<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
Nearest neighbors:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
		<%ID> = xor <2 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = tail call <16 x i8> <@ID>(<16 x i8> <%ID>, <16 x i8> <%ID>)                                                     
		<%ID> = bitcast <2 x i64> <%ID> to <8 x i16>                                                                            

<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
Nearest neighbors:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = phi <16 x i8> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> undef, <4 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef>      
		<%ID> = bitcast float* <%ID> to <16 x i8>*                                                                              
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      

<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast i32* <%ID> to <16 x i8>*                                                                                
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
		<%ID> = load <16 x i8>, <16 x i8>* <%ID>, align 16                                                                      

<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
expected answer:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
		<%ID> = xor <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
		<%ID> = getelementptr inbounds { double, double }, { double, double }* <%ID>, i64 <INT>                                 
		<%ID> = phi { double, double }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                      

<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
expected answer:
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
Nearest neighbors:
		<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
		<%ID> = getelementptr inbounds <2 x float>, <2 x float>* <%ID>, i64 <INT>, i64 <INT>                                    
		<%ID> = getelementptr inbounds { { { { [289 x float] } } } }, { { { { [289 x float] } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i64 <%ID>
		<%ID> = bitcast <8 x float>* <%ID> to i8*                                                                               

<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = bitcast <2 x i64> <%ID> to <4 x float>                                                                          
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
		<%ID> = shufflevector <4 x i32> <%ID>, <4 x i32> undef, <4 x i32> <i32 <INT>, i32 undef, i32 <INT>, i32 undef>          
		<%ID> = shufflevector <4 x i32> <%ID>, <4 x i32> undef, <4 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>          

<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
		<%ID> = shufflevector <2 x i64> <%ID>, <2 x i64> <%ID>, <2 x i32> <i32 <INT>, i32 <INT>>                                
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      
		store <2 x i64> <%ID>, <2 x i64>* <%ID>, align 1                                                                        

<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
		<%ID> = or <4 x i32> <%ID>, <%ID>                                                                                       
		<%ID> = tail call <16 x i8> <@ID>(<16 x i8> <%ID>, <16 x i8> <%ID>)                                                     
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
		<%ID> = bitcast <8 x i16> <%ID> to <4 x i32>                                                                            

<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = and <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                               
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
		<%ID> = tail call fast <4 x float> <@ID>(<4 x float> <%ID>, <4 x float> <%ID>)                                          
		<%ID> = call fast <4 x float> <@ID>(<4 x float> <%ID>, <4 x float> <%ID>)                                               

<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
expected answer:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
		<%ID> = xor <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   
		<%ID> = load <8 x float>, <8 x float>* <%ID>, align 16                                                                  
		<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   

<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast double* <%ID> to i64*                                                                                   
expected answer:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i64*                                                                                   
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
		<%ID> = phi i8* [ <%ID>, <%ID> ]                                                                                        
		<%ID> = getelementptr inbounds { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x double] }, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x double] }* <%ID>, i64 <INT>, i32 <INT>, i64 <%ID>
		<%ID> = phi i8* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      

<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast double* <%ID> to i8*                                                                                    
expected answer:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i8*                                                                                    
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
		<%ID> = getelementptr double, double* <%ID>, i64 <%ID>                                                                  
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = phi i8* [ <%ID>, <%ID> ]                                                                                        

<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast float <%ID> to i32                                                                                      
expected answer:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
Nearest neighbors:
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
		<%ID> = fcmp ogt float <%ID>, <%ID>                                                                                     
		<%ID> = tail call float <@ID>(float <%ID>)                                                                              
		<%ID> = select i1 <%ID>, float <%ID>, float <%ID>                                                                       

<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast double <%ID> to i64                                                                                     
expected answer:
		<%ID> = bitcast i64 <%ID> to double                                                                                     
Nearest neighbors:
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = fcmp ogt double <%ID>, <%ID>                                                                                    
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
		<%ID> = select i1 <%ID>, double <%ID>, double <%ID>                                                                     
		<%ID> = phi i64 [ <%ID>, <%ID> ], [ undef, <%ID> ]                                                                      

<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast float* <%ID> to i8*                                                                                     
expected answer:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
Nearest neighbors:
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
		<%ID> = phi i8* [ <%ID>, <%ID> ]                                                                                        
		<%ID> = load i8*, i8** <%ID>, align 8                                                                                   
		<%ID> = bitcast float* <%ID> to i8**                                                                                    

<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
		<%ID> = getelementptr inbounds i16, i16* <%ID>, i64 <INT>                                                               
		<%ID> = bitcast i16* <%ID> to <16 x i16>*                                                                               
		<%ID> = phi i8* [ <%ID>, <%ID> ]                                                                                        

<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
		<%ID> = lshr i64 <%ID>, <INT>                                                                                           
		<%ID> = phi i8* [ <%ID>, <%ID> ]                                                                                        
		<%ID> = bitcast { float }* <%ID> to i32*                                                                                

<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
		<%ID> = getelementptr inbounds { { i32*, i64 } }, { { i32*, i64 } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>             
		<%ID> = call i8* <@ID>(i8* <%ID>, i8* <%ID>, i64 <%ID>, i64 <%ID>)                                                      
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     

<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = phi i32** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    
		<%ID> = phi i8* [ <%ID>, <%ID> ]                                                                                        

<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
		<%ID> = urem i64 <%ID>, <%ID>                                                                                           
		<%ID> = phi i8* [ <%ID>, <%ID> ]                                                                                        
		<%ID> = bitcast { { i32 (...)** } }** <%ID> to i64*                                                                     

<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
		<%ID> = call i8* <@ID>(i8* <%ID>, i8* <%ID>, i64 <%ID>, i64 <%ID>)                                                      
		<%ID> = phi i8* [ <%ID>, <%ID> ]                                                                                        
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     

<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
		<%ID> = phi i8* [ <%ID>, <%ID> ]                                                                                        
		<%ID> = phi i32** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    
		<%ID> = phi { i64, opaque*, opaque* }** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                              

<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8*                                                                      
<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
		<%ID> = phi i32* [ null, <%ID> ], [ <%ID>, <%ID> ], [ null, <%ID> ]                                                     
		<%ID> = phi i8* [ <%ID>, <%ID> ]                                                                                        
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     

<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
Nearest neighbors:
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
		<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
		<%ID> = bitcast { { { i64*, i64, i64 } } }* <%ID> to { { i64*, i64, i64 } }*                                            
		<%ID> = load <{ { i32 (...)**, i32, i32, i32, i8**, { { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, i32, i8* }*, i8, { { i8* }, i64, { i64, [8 x i8] } }, { i32, i32, i32, i32, i32 }, i8, i8, i8, { { i8* }, i64, { i64, [8 x i8] } } }, i8, i8, i8, i8, i8, [3 x i8], i32, i32, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, i8, [7 x i8] }>*, <{ { i32 (...)**, i32, i32, i32, i8**, { { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, i32, i8* }*, i8, { { i8* }, i64, { i64, [8 x i8] } }, { i32, i32, i32, i32, i32 }, i8, i8, i8, { { i8* }, i64, { i64, [8 x i8] } } }, i8, i8, i8, i8, i8, [3 x i8], i32, i32, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, { { i8* }, i64, { i64, [8 x i8] } }, i8, [7 x i8] }>** <%ID>, align 8
		<%ID> = invoke i8* <@ID>({ { i8* }, i64, { i64, [8 x i8] } }* nonnull <%ID>, i64* nonnull dereferenceable(8) <%ID>, i64 <INT>)
 to label <%ID> unwind label <%ID>

<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
expected answer:
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
Nearest neighbors:
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
		<%ID> = bitcast { { { double*, i64 } } }* <%ID> to i8*                                                                  
		<%ID> = call i64 <@ID>(<{ [8 x i8], <{ { i64 }, { i64 }, { i32 }, [4 x i8] }>, { { { i32*, i64, i64 } } }*, { i8 }, [7 x i8] }>* <%ID>)
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { i8 }*                                                            

<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
expected answer:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
Nearest neighbors:
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = bitcast { { { i16*, i64, i64 } } }* <%ID> to { { i16*, i64, i64 } }*                                            
		call void <@ID>({ i8 }* <%ID>, i64 <%ID>)                                                                               

<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
Nearest neighbors:
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
		<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
		<%ID> = load <{ [8 x i8], <{ { i64 }, { i64 }, { i32 }, [4 x i8] }>, { { { i32*, i64, i64 } } }*, { i8 }, [7 x i8] }>*, <{ [8 x i8], <{ { i64 }, { i64 }, { i32 }, [4 x i8] }>, { { { i32*, i64, i64 } } }*, { i8 }, [7 x i8] }>** <%ID>, align 8
		<%ID> = bitcast { { { i16*, i64, i64 } } }* <%ID> to { { i16*, i64, i64 } }*                                            
		<%ID> = call i8* <@ID>(i64 <INT>)                                                                                       

<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
Nearest neighbors:
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
		<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
		<%ID> = bitcast { { { i64*, i64, i64 } } }* <%ID> to { { i64*, i64, i64 } }*                                            
		<%ID> = bitcast { { { i16*, i64, i64 } } }* <%ID> to { { i16*, i64, i64 } }*                                            
		<%ID> = phi i8 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                   

<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
Nearest neighbors:
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
		<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]               
		<%ID> = ptrtoint i8** <%ID> to i64                                                                                      
		<%ID> = bitcast i8** <%ID> to { { i32 (...)** } }**                                                                     

<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
expected answer:
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
Nearest neighbors:
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
		<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
		<%ID> = alloca <2 x double>, align 16                                                                                   
		<%ID> = bitcast { { { i16*, i64, i64 } } }* <%ID> to { { i16*, i64, i64 } }*                                            
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              

<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
Nearest neighbors:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
		<%ID> = load <{ [8 x i8], <{ { i64 }, { i64 }, { i32 }, [4 x i8] }>, { { { i32*, i64, i64 } } }*, { i8 }, [7 x i8] }>*, <{ [8 x i8], <{ { i64 }, { i64 }, { i32 }, [4 x i8] }>, { { { i32*, i64, i64 } } }*, { i8 }, [7 x i8] }>** <%ID>, align 8
		<%ID> = alloca <{ [8 x i8], <{ { i64 }, { i64 }, { i32 }, [4 x i8] }>, { { { i32*, i64, i64 } } }*, { i8 }, [7 x i8] }>*, align 8
		<%ID> = bitcast { { { i64*, i64, i64 } } }* <%ID> to { { i64*, i64, i64 } }*                                            

<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 1                                                                        
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = load <{ [8 x i8], <{ { i64 }, { i64 }, { i32 }, [4 x i8] }>, { { { i32*, i64, i64 } } }*, { i8 }, [7 x i8] }>*, <{ [8 x i8], <{ { i64 }, { i64 }, { i32 }, [4 x i8] }>, { { { i32*, i64, i64 } } }*, { i8 }, [7 x i8] }>** <%ID>, align 8

<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast i32* <%ID> to <16 x i8>*                                                                                
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = load <16 x i8>, <16 x i8>* <%ID>, align 16                                                                      

<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
expected answer:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
		<%ID> = xor <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = phi <4 x i64> [ <%ID>, <%ID> ], [ zeroinitializer, <%ID> ]                                                      
		<%ID> = shufflevector <2 x double> <%ID>, <2 x double> undef, <4 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>    

<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
expected answer:
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
Nearest neighbors:
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
		<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
		<%ID> = bitcast <8 x float>* <%ID> to i8*                                                                               
		<%ID> = bitcast { { { i16*, i64, i64 } } }* <%ID> to { { i16*, i64, i64 } }*                                            
		<%ID> = bitcast { { { i64*, i64, i64 } } }* <%ID> to { { i64*, i64, i64 } }*                                            

<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     
		<%ID> = shufflevector <4 x i32> <%ID>, <4 x i32> undef, <4 x i32> <i32 <INT>, i32 undef, i32 <INT>, i32 undef>          
		<%ID> = bitcast <2 x i64> <%ID> to <4 x float>                                                                          

<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = shufflevector <2 x i64> <%ID>, <2 x i64> <%ID>, <2 x i32> <i32 <INT>, i32 <INT>>                                
		<%ID> = getelementptr inbounds <{ { i32 }, { i8 }, [3 x i8] }>, <{ { i32 }, { i8 }, [3 x i8] }>* <%ID>, i32 <INT>, i32 <INT>
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      

<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
		store { <{ [8 x i8], <{ { i64 }, { i64 }, { i32 }, [4 x i8] }>, { { { i32*, i64, i64 } } }*, { i8 }, [7 x i8] }>, { { { i32*, i64, i64 } } }* }* <%ID>, { <{ [8 x i8], <{ { i64 }, { i64 }, { i32 }, [4 x i8] }>, { { { i32*, i64, i64 } } }*, { i8 }, [7 x i8] }>, { { { i32*, i64, i64 } } }* }** <%ID>, align 8
		<%ID> = trunc <4 x i64> <%ID> to <4 x i32>                                                                              
		<%ID> = bitcast <8 x i16> <%ID> to <4 x i32>                                                                            

<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
		<%ID> = and <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                               
		<%ID> = bitcast { { { i64*, i64, i64 } } }* <%ID> to { { i64*, i64, i64 } }*                                            
		<%ID> = call fast <4 x float> <@ID>(<4 x float> <%ID>, <4 x float> <%ID>)                                               

<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
expected answer:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
		<%ID> = call fast <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            
		<%ID> = and <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = xor <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               

<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
expected answer:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
		<%ID> = xor <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   
		<%ID> = bitcast { { { i16*, i64, i64 } } }* <%ID> to { { i16*, i64, i64 } }*                                            
		<%ID> = bitcast { { { i64*, i64, i64 } } }* <%ID> to { { i64*, i64, i64 } }*                                            

<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
expected answer:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = bitcast { { { i64*, i64, i64 } } }* <%ID> to { { i64*, i64, i64 } }*                                            
		<%ID> = and <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   
		<%ID> = bitcast { { { i16*, i64, i64 } } }* <%ID> to { { i16*, i64, i64 } }*                                            

<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
<%ID> = bitcast double* <%ID> to i64*                                                                                   
expected answer:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
Nearest neighbors:
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
		<%ID> = bitcast double* <%ID> to i64*                                                                                   
		<%ID> = bitcast { { { i64*, i64, i64 } } }* <%ID> to { { i64*, i64, i64 } }*                                            
		<%ID> = bitcast { { { i16*, i64, i64 } } }* <%ID> to { { i16*, i64, i64 } }*                                            
		define linkonce_odr void <@ID>(i64* dereferenceable(8), i64* dereferenceable(8), i64* dereferenceable(8), i64)          

<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
<%ID> = bitcast double* <%ID> to i8*                                                                                    
expected answer:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
Nearest neighbors:
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
		<%ID> = bitcast double* <%ID> to i8*                                                                                    
		<%ID> = bitcast { { { i64*, i64, i64 } } }* <%ID> to { { i64*, i64, i64 } }*                                            
		<%ID> = getelementptr double, double* <%ID>, i64 <%ID>                                                                  
		<%ID> = ptrtoint double* <%ID> to i64                                                                                   

<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
<%ID> = bitcast float <%ID> to i32                                                                                      
expected answer:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
Nearest neighbors:
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
		<%ID> = select i1 <%ID>, float <%ID>, float <%ID>                                                                       
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = fmul fast float <%ID>, <%ID>                                                                                    

<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
<%ID> = bitcast double <%ID> to i64                                                                                     
expected answer:
		<%ID> = bitcast i64 <%ID> to double                                                                                     
Nearest neighbors:
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
		<%ID> = fcmp ogt double <%ID>, <%ID>                                                                                    
		<%ID> = select i1 <%ID>, double <%ID>, double <%ID>                                                                     
		<%ID> = bitcast { { { i16*, i64, i64 } } }* <%ID> to { { i16*, i64, i64 } }*                                            

<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
<%ID> = bitcast float* <%ID> to i8*                                                                                     
expected answer:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
Nearest neighbors:
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = bitcast { { { i64*, i64, i64 } } }* <%ID> to { { i64*, i64, i64 } }*                                            
		<%ID> = bitcast { { { i16*, i64, i64 } } }* <%ID> to { { i16*, i64, i64 } }*                                            
		<%ID> = bitcast i64* <%ID> to i8*                                                                                       

<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		<%ID> = bitcast { { { i16*, i64, i64 } } }* <%ID> to { { i16*, i64, i64 } }*                                            
		<%ID> = bitcast { { { i64*, i64, i64 } } }* <%ID> to { { i64*, i64, i64 } }*                                            
		<%ID> = bitcast { { { { [1027 x i16] } } } }* <%ID> to { { { [1027 x i16] } } }*                                        

<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = bitcast { { { i64*, i64, i64 } } }* <%ID> to { { i64*, i64, i64 } }*                                            
		<%ID> = fmul fast float <%ID>, <%ID>                                                                                    
		<%ID> = bitcast { { { i16*, i64, i64 } } }* <%ID> to { { i16*, i64, i64 } }*                                            

<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = call i64 <@ID>(<{ [8 x i8], <{ { i64 }, { i64 }, { i32 }, [4 x i8] }>, { { { i32*, i64, i64 } } }*, { i8 }, [7 x i8] }>* <%ID>)
		<%ID> = load <{ [8 x i8], <{ { i64 }, { i64 }, { i32 }, [4 x i8] }>, { { { i32*, i64, i64 } } }*, { i8 }, [7 x i8] }>*, <{ [8 x i8], <{ { i64 }, { i64 }, { i32 }, [4 x i8] }>, { { { i32*, i64, i64 } } }*, { i8 }, [7 x i8] }>** <%ID>, align 8
		invoke void <@ID>({ { i32*, { i64 } } }* <%ID>, { { { i32*, i64, i64 } } }* dereferenceable(24) <%ID>)
 to label <%ID> unwind label <%ID>

<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = bitcast { { { i64*, i64, i64 } } }* <%ID> to { { i64*, i64, i64 } }*                                            
		<%ID> = select i1 <%ID>, i16 <%ID>, i16 <INT>                                                                           
		<%ID> = bitcast { { { i16*, i64, i64 } } }* <%ID> to { { i16*, i64, i64 } }*                                            

<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = select i1 <%ID>, i16 <%ID>, i16 <INT>                                                                           
		<%ID> = bitcast { { { i64*, i64, i64 } } }* <%ID> to { { i64*, i64, i64 } }*                                            
		<%ID> = bitcast { { { { [3534 x i64] } } } }* <%ID> to { { { [3534 x i64] } } }*                                        

<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<%ID> = load <{ [8 x i8], <{ { i64 }, { i64 }, { i32 }, [4 x i8] }>, { { { i32*, i64, i64 } } }*, { i8 }, [7 x i8] }>*, <{ [8 x i8], <{ { i64 }, { i64 }, { i32 }, [4 x i8] }>, { { { i32*, i64, i64 } } }*, { i8 }, [7 x i8] }>** <%ID>, align 8
		<%ID> = alloca { { { i32*, i64, i64 } } }*, align 8                                                                     
		<%ID> = getelementptr inbounds <{ { i32 }, { i8 }, [3 x i8] }>, <{ { i32 }, { i8 }, [3 x i8] }>* <%ID>, i32 <INT>, i32 <INT>

<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<%ID> = load <{ [8 x i8], <{ { i64 }, { i64 }, { i32 }, [4 x i8] }>, { { { i32*, i64, i64 } } }*, { i8 }, [7 x i8] }>*, <{ [8 x i8], <{ { i64 }, { i64 }, { i32 }, [4 x i8] }>, { { { i32*, i64, i64 } } }*, { i8 }, [7 x i8] }>** <%ID>, align 8
		<%ID> = alloca <{ [8 x i8], <{ { i64 }, { i64 }, { i32 }, [4 x i8] }>, { { { i32*, i64, i64 } } }*, { i8 }, [7 x i8] }>*, align 8
		<%ID> = bitcast { { { i64*, i64, i64 } } }* <%ID> to { { i64*, i64, i64 } }*                                            

<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = call i64 <@ID>(<{ [8 x i8], <{ { i64 }, { i64 }, { i32 }, [4 x i8] }>, { { { i32*, i64, i64 } } }*, { i8 }, [7 x i8] }>* <%ID>)
		<%ID> = bitcast { { { i64*, i64, i64 } } }* <%ID> to { { i64*, i64, i64 } }*                                            
		<%ID> = getelementptr inbounds <{ { i32 }, { i8 }, [3 x i8] }>, <{ { i32 }, { i8 }, [3 x i8] }>* <%ID>, i32 <INT>, i32 <INT>

<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to { { i32*, i64, i64 } }*                                            
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = alloca <{ [8 x i8], <{ { i64 }, { i64 }, { i32 }, [4 x i8] }>, { { { i32*, i64, i64 } } }*, { i8 }, [7 x i8] }>*, align 8
		<%ID> = alloca { { { i32*, i64, i64 } } }*, align 8                                                                     
		<%ID> = call i64 <@ID>(<{ [8 x i8], <{ { i64 }, { i64 }, { i32 }, [4 x i8] }>, { { { i32*, i64, i64 } } }*, { i8 }, [7 x i8] }>* <%ID>)

<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
expected answer:
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
		<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
		<%ID> = bitcast { { { double*, i64 } } }* <%ID> to i8*                                                                  
		<%ID> = bitcast <{ { { { double*, i64, i64 } } }, { { { { i32*, i64 } } } }, { { { { i32*, i64 } } } }, { { { i64*, i64 } } }, { { { i64*, i64 } } }, i64, double, double, double, i8, i8, i8, [5 x i8] }>* <%ID> to i8**
		<%ID> = call noalias i8* <@ID>(i64 <INT>)                                                                               

<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
expected answer:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
Nearest neighbors:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to i8*                                                                 
		<%ID> = bitcast { { { i64*, i64 } } }* <%ID> to i8**                                                                    
		<%ID> = getelementptr inbounds { { { i64*, i64 } } }, { { { i64*, i64 } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>

<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
		<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
		<%ID> = icmp eq { { { { { { i64, i64, i8* } } } } } }* <%ID>, bitcast ({ { i64, [16 x i8] } }* <@ID> to { { { { { { i64, i64, i8* } } } } } }*)
		<%ID> = icmp eq { { { { { { i64, i64, i8* } } } } } }* <%ID>, <%ID>                                                     
		call void <@ID>({ { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* nonnull <%ID>, { i32 (...)**, i8* }* bitcast (i8** <@ID> to { i32 (...)**, i8* }*), i64 <INT>)

<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
		<%ID> = bitcast i8* <%ID> to { i32 (...)** }**                                                                          
		<%ID> = load i32 ({ i32 (...)** }*)**, i32 ({ i32 (...)** }*)*** <%ID>, align 8                                         
		<%ID> = bitcast i8* <%ID> to { <{ opaque, <{ opaque, opaque*, opaque*, i8, [7 x i8] }>*, opaque*, i8 }>, { { { { { { i64, i64, i8* } } } } } }* }**

<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
Nearest neighbors:
		<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
		<%ID> = getelementptr inbounds <{ { { { { { { { i64, i64, i8* } } } } } }* }, i32, [4 x i8] }>, <{ { { { { { { { i64, i64, i8* } } } } } }* }, i32, [4 x i8] }>* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>
		<%ID> = load i32 ({ i32 (...)** }*)**, i32 ({ i32 (...)** }*)*** <%ID>, align 8                                         
		<%ID> = icmp eq { { { { { { { i64, i64, i8* } } } } } }, { { { { { { { { i64*, [40 x i8] } }* }*, [8 x i8] }, i64 } } }, { <{ i32 (...)**, { { { i32 } } } }>, [4 x i8] }* } }* <%ID>, <%ID>

<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
expected answer:
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
		<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
		<%ID> = alloca <2 x double>, align 16                                                                                   
		<%ID> = alloca { { double*, { i64 } } }, align 8                                                                        
		<%ID> = icmp eq { opaque*, opaque* }* <%ID>, <%ID>                                                                      

<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
Nearest neighbors:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
		store i64 <%ID>, i64* <%ID>, align 1                                                                                    
		<%ID> = getelementptr inbounds { { { { { i32, opaque* } }*, { { { { { { { { i64*, [40 x i8] } }* }*, [8 x i8] }, i64 } } }, { <{ i32 (...)**, { { { i32 } } } }>, [4 x i8] }* }* }*, [72 x i8] } }, { { { { { i32, opaque* } }*, { { { { { { { { i64*, [40 x i8] } }* }*, [8 x i8] }, i64 } } }, { <{ i32 (...)**, { { { i32 } } } }>, [4 x i8] }* }* }*, [72 x i8] } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i64 <INT>
		<%ID> = bitcast i8** <%ID> to { { opaque*, { { opaque, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } } }, { { i64 } } } }**

<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
Nearest neighbors:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> undef, <4 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef>      
		<%ID> = shufflevector <16 x i8> <%ID>, <16 x i8> <%ID>, <16 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> <%ID>, <4 x i32> <i32 <INT>, i32 undef, i32 undef, i32 <INT>>      

<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
		<%ID> = bitcast i32* <%ID> to <16 x i8>*                                                                                
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = shufflevector <16 x i8> <%ID>, <16 x i8> <%ID>, <16 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>

<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
expected answer:
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
Nearest neighbors:
		<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
		store { { float*, { i64 } } }* <%ID>, { { float*, { i64 } } }** <%ID>, align 8                                          
		<%ID> = alloca <4 x float>, align 16                                                                                    
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> undef, <4 x i32> zeroinitializer                                   

<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
expected answer:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> <%ID>, <4 x i32> <i32 <INT>, i32 undef, i32 undef, i32 <INT>>      
		<%ID> = shufflevector <16 x i8> <%ID>, <16 x i8> <%ID>, <16 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>
		<%ID> = bitcast <2 x i64> <%ID> to <4 x float>                                                                          

<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
		<%ID> = bitcast <2 x i64> <%ID> to <4 x float>                                                                          
		<%ID> = shufflevector <4 x i32> <%ID>, <4 x i32> undef, <4 x i32> <i32 <INT>, i32 undef, i32 <INT>, i32 undef>          
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     

<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
		<%ID> = or <4 x i32> <%ID>, <%ID>                                                                                       
		<%ID> = ashr <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                              
		<%ID> = icmp slt <4 x i32> <%ID>, <%ID>                                                                                 

<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
		<%ID> = and <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                               
		<%ID> = tail call fast <4 x float> <@ID>(<4 x float> <%ID>, <4 x float> <%ID>)                                          
		<%ID> = phi <4 x float> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                              

<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
expected answer:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
		<%ID> = and <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = tail call fast <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                       
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            

<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
expected answer:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
		<%ID> = phi <8 x float> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                              
		<%ID> = tail call fast <8 x float> <@ID>(<8 x float> <%ID>, <8 x float> <%ID>)                                          
		<%ID> = and <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   

<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
<%ID> = bitcast double* <%ID> to i64*                                                                                   
expected answer:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
		<%ID> = bitcast double* <%ID> to i64*                                                                                   
		<%ID> = load i32 ({ i32 (...)** }*)**, i32 ({ i32 (...)** }*)*** <%ID>, align 8                                         
		<%ID> = call dereferenceable(24) { { { { { { { { { i64, i64, i8* } } } } } }, { { { { { { { i64, i64, i8* } } } } } }, { { { i32 (...)** } }, { { i8* } }, { { { { { { { { i64, i64, i8* } } } } } }* } }, i32, [1 x i32] } }* }, opaque* }*, { i64, i64, i64, i64, i8**, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }*, i64 }* <@ID>({ { { { { { { { { i64, i64, i8* } } } } } }, { { { { { { { i64, i64, i8* } } } } } }, { { { i32 (...)** } }, { { i8* } }, { { { { { { { { i64, i64, i8* } } } } } }* } }, i32, [1 x i32] } }* }, opaque* }*, { i64, i64, i64, i64, i8**, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }*, i64 }* nonnull <%ID>)
		<%ID> = load i32 ({ i32 (...)** }*)*, i32 ({ i32 (...)** }*)** <%ID>, align 8                                           

<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
<%ID> = bitcast double* <%ID> to i8*                                                                                    
expected answer:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
		<%ID> = bitcast double* <%ID> to i8*                                                                                    
		<%ID> = bitcast { double }* <%ID> to i64*                                                                               
		<%ID> = ptrtoint double* <%ID> to i64                                                                                   
		<%ID> = load i64, i64* <%ID>, align 4                                                                                   

<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
<%ID> = bitcast float <%ID> to i32                                                                                      
expected answer:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
Nearest neighbors:
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
		<%ID> = select i1 <%ID>, i32 <%ID>, i32 <%ID>                                                                           
		<%ID> = select i1 <%ID>, float <%ID>, float <%ID>                                                                       
		<%ID> = tail call float <@ID>(float <%ID>)                                                                              

<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
<%ID> = bitcast double <%ID> to i64                                                                                     
expected answer:
		<%ID> = bitcast i64 <%ID> to double                                                                                     
Nearest neighbors:
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
		<%ID> = phi i64 [ 2, <%ID> ], [ 1, <%ID> ]                                                                              
		<%ID> = select i1 <%ID>, double <%ID>, double <%ID>                                                                     
		<%ID> = phi i64 [ <%ID>, <%ID> ], [ undef, <%ID> ]                                                                      

<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
<%ID> = bitcast float* <%ID> to i8*                                                                                     
expected answer:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = load i32 ({ i32 (...)** }*)*, i32 ({ i32 (...)** }*)** <%ID>, align 8                                           
		<%ID> = getelementptr inbounds { float, float }, { float, float }* <%ID>, i64 <INT>, i32 <INT>                          
		<%ID> = icmp eq { opaque*, opaque* }* <%ID>, <%ID>                                                                      

<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		<%ID> = getelementptr i16, i16* <%ID>, i64 <INT>                                                                        
		<%ID> = bitcast i16* <%ID> to <8 x i16>*                                                                                
		<%ID> = bitcast i16* <%ID> to <16 x i16>*                                                                               

<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = load i32 ({ i32 (...)** }*)*, i32 ({ i32 (...)** }*)** <%ID>, align 8                                           
		<%ID> = load { i32*, { { [5 x i64] } } }*, { i32*, { { [5 x i64] } } }** <%ID>, align 8                                 
		<%ID> = shufflevector <8 x float> <%ID>, <8 x float> undef, <8 x i32> zeroinitializer                                   

<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       
		<%ID> = bitcast i32* <%ID> to <4 x i32>*                                                                                
		<%ID> = bitcast i32** <%ID> to <4 x i32>**                                                                              

<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = icmp eq i32* <%ID>, null                                                                                        
		store i16 <INT>, i16* <%ID>, align 8                                                                                    
		tail call void <@ID>(i8* <%ID>)                                                                                         

<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
		<%ID> = load i64, i64* <%ID>, align 4                                                                                   
		<%ID> = load i64, i64* <@ID>, align 8                                                                                   
		<%ID> = load i32 ({ i32 (...)** }*)**, i32 ({ i32 (...)** }*)*** <%ID>, align 8                                         

<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<%ID> = icmp eq i32* <%ID>, null                                                                                        
		store opaque* null, opaque** <%ID>, align 8                                                                             
		<%ID> = alloca { { { i32*, i64 } } }, align 8                                                                           

<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<%ID> = call dereferenceable(24) { { { { { { { { { i64, i64, i8* } } } } } }, { { { { { { { i64, i64, i8* } } } } } }, { { { i32 (...)** } }, { { i8* } }, { { { { { { { { i64, i64, i8* } } } } } }* } }, i32, [1 x i32] } }* }, opaque* }*, { i64, i64, i64, i64, i8**, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }*, i64 }* <@ID>({ { { { { { { { { i64, i64, i8* } } } } } }, { { { { { { { i64, i64, i8* } } } } } }, { { { i32 (...)** } }, { { i8* } }, { { { { { { { { i64, i64, i8* } } } } } }* } }, i32, [1 x i32] } }* }, opaque* }*, { i64, i64, i64, i64, i8**, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }*, i64 }* nonnull <%ID>)
		<%ID> = bitcast { { { { { { { { { i64, i64, i8* } } } } } }, { { { { { { { i64, i64, i8* } } } } } }, { { { i32 (...)** } }, { { i8* } }, { { { { { { { { i64, i64, i8* } } } } } }* } }, i32, [1 x i32] } }* }, opaque* }*, { i64, i64, i64, i64, i8**, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }*, i64 }* <%ID> to i8*
		<%ID> = icmp eq { opaque*, opaque* }* <%ID>, <%ID>                                                                      

<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = icmp eq { opaque*, opaque* }* <%ID>, <%ID>                                                                      
		store i32* null, i32** <%ID>, align 8                                                                                   
		store i32* <%ID>, i32** <%ID>, align 8                                                                                  

<%ID> = bitcast { { i8* }, i64, { i64, [8 x i8] } }* <%ID> to i8*                                                       
<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = bitcast i8* <%ID> to { { i8* }, i64, { i64, [8 x i8] } }*                                                       
		<%ID> = bitcast i64* <%ID> to i8**                                                                                      
		<%ID> = phi i32* [ null, <%ID> ], [ <%ID>, <%ID> ], [ null, <%ID> ]                                                     
		<%ID> = icmp eq { opaque*, opaque* }* <%ID>, <%ID>                                                                      

<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
expected answer:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
Nearest neighbors:
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = bitcast { i8 }* <%ID> to i8**                                                                                   
		ret { { { double*, i64, i64 } } }* <%ID>                                                                                
		<%ID> = phi double* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                              

<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		store { { { { { { i64, i64, i8* } } } } } }* <%ID>, { { { { { { i64, i64, i8* } } } } } }** <%ID>, align 8              
		<%ID> = select i1 <%ID>, { { { { { { i64, i64, i8* } } } } } }* <%ID>, { { { { { { i64, i64, i8* } } } } } }* <%ID>     
		<%ID> = icmp eq { { { { { { i64, i64, i8* } } } } } }* <%ID>, bitcast ({ { i64, [16 x i8] } }* <@ID> to { { { { { { i64, i64, i8* } } } } } }*)

<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = trunc i32 <%ID> to i29                                                                                          
		<%ID> = load { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }** <%ID>, align 8             
		<%ID> = tail call zeroext i1 <@ID>({ i8*, i8*, opaque*, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, opaque*, { i32 (...)** }* }* <%ID>, { { { { { { i64, i64, i8* } } } } } }* <%ID>)

<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
Nearest neighbors:
		<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = load { i32, [1 x i8*] }*, { i32, [1 x i8*] }** <%ID>, align 8                                                   
		<%ID> = tail call zeroext i1 <@ID>({ i8*, i8*, opaque*, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, opaque*, { i32 (...)** }* }* <%ID>, { { { { { { i64, i64, i8* } } } } } }* <%ID>)
		store { { { { { { i64, i64, i8* } } } } } }* <%ID>, { { { { { { i64, i64, i8* } } } } } }** <%ID>, align 8              

<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
expected answer:
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
		<%ID> = phi i64 [ 0, <%ID> ], [ 2, <%ID> ]                                                                              
		<%ID> = getelementptr inbounds { double, double }, { double, double }* <%ID>, i64 <INT>, i32 <INT>                      
		<%ID> = fcmp une double <%ID>, <FLOAT>                                                                                  

<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
Nearest neighbors:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = load <2 x double>, <2 x double>* <%ID>, align 8                                                                 
		<%ID> = trunc i64 <%ID> to i32                                                                                          
		<%ID> = load <4 x i32>, <4 x i32>* <%ID>, align 4                                                                       

<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = shufflevector <16 x i8> <%ID>, <16 x i8> <%ID>, <16 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>
		<%ID> = bitcast i32* <%ID> to <16 x i8>*                                                                                
		<%ID> = phi <4 x double> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                             

<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
expected answer:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = xor <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = getelementptr inbounds { double, double }, { double, double }* <%ID>, i64 <INT>                                 
		<%ID> = load { { double, double }*, { i8 }, { i64 } }*, { { double, double }*, { i8 }, { i64 } }** <%ID>, align 8       

<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
expected answer:
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
Nearest neighbors:
		<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = fcmp fast une float <%ID>, <FLOAT>                                                                              
		<%ID> = fsub fast float <FLOAT>, <%ID>                                                                                  
		<%ID> = fcmp une float <%ID>, <FLOAT>                                                                                   

<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
expected answer:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = phi i64 [ 0, <%ID> ], [ 4, <%ID> ]                                                                              
		<%ID> = bitcast <2 x i64> <%ID> to <4 x float>                                                                          
		<%ID> = bitcast <4 x i32> <%ID> to <2 x double>                                                                         

<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = bitcast <2 x i64> <%ID> to <4 x float>                                                                          
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = shufflevector <4 x i32> <%ID>, <4 x i32> undef, <4 x i32> <i32 <INT>, i32 undef, i32 <INT>, i32 undef>          
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     

<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = load <4 x i32>, <4 x i32>* <%ID>, align 4                                                                       
		<%ID> = icmp ult i32* <%ID>, <%ID>                                                                                      
		<%ID> = load <4 x i32>, <4 x i32>* <%ID>, align 1                                                                       

<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = bitcast <8 x i16> <%ID> to <4 x i32>                                                                            
		<%ID> = or <4 x i32> <%ID>, <%ID>                                                                                       
		<%ID> = shufflevector <8 x i16> <%ID>, <8 x i16> <%ID>, <8 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>

<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = and <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                               
		<%ID> = phi i64 [ 8, <%ID> ], [ 16, <%ID> ]                                                                             
		<%ID> = bitcast <2 x i64> <%ID> to <4 x float>                                                                          

<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
expected answer:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = call fast <4 x double> <@ID>(<4 x double> <%ID>)                                                                
		<%ID> = and <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            

<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
expected answer:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = xor <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   
		<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         

<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
expected answer:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = xor <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   
		<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   

<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast double* <%ID> to i64*                                                                                   
expected answer:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i64*                                                                                   
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = phi double* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                              
		<%ID> = trunc i64 <%ID> to i32                                                                                          
		<%ID> = xor i64 <%ID>, <%ID>                                                                                            

<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast double* <%ID> to i8*                                                                                    
expected answer:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i8*                                                                                    
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = getelementptr double, double* <%ID>, i64 <%ID>                                                                  
		<%ID> = load double, double* <%ID>, align 8                                                                             
		<%ID> = phi i64 [ 0, <%ID> ], [ 0, <%ID> ], [ 0, <%ID> ], [ <%ID>, <%ID> ]                                              

<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast float <%ID> to i32                                                                                      
expected answer:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
Nearest neighbors:
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = select i1 <%ID>, float <%ID>, float <%ID>                                                                       
		<%ID> = fcmp olt float <%ID>, <%ID>                                                                                     
		<%ID> = fcmp ogt float <%ID>, <%ID>                                                                                     

<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast double <%ID> to i64                                                                                     
expected answer:
		<%ID> = bitcast i64 <%ID> to double                                                                                     
Nearest neighbors:
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = select i1 <%ID>, double <%ID>, double <%ID>                                                                     
		<%ID> = fcmp ogt double <%ID>, <%ID>                                                                                    
		<%ID> = phi i64 [ <%ID>, <%ID> ], [ undef, <%ID> ]                                                                      

<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast float* <%ID> to i8*                                                                                     
expected answer:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
Nearest neighbors:
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = insertelement <8 x i64> undef, <TYP> <%ID>, <TYP> 0                                                             
		<%ID> = call dereferenceable(24) { { { double*, i64, i64 } } }* <@ID>({ i8 }* <%ID>, i64 <%ID>, i64 <%ID>)              
		<%ID> = phi float* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                               

<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = getelementptr inbounds i16, i16* <%ID>, i64 <%ID>                                                               
		<%ID> = phi i16* [ <%ID>, <%ID> ], [ null, <%ID> ]                                                                      
		<%ID> = getelementptr i16, i16* <%ID>, i64 <INT>                                                                        

<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = fcmp une float <%ID>, <FLOAT>                                                                                   
		<%ID> = phi i64 [ 0, <%ID> ], [ 0, <%ID> ], [ <%ID>, <%ID> ]                                                            
		<%ID> = icmp eq <8 x i64> <%ID>, <%ID>                                                                                  

<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = icmp ult i32* <%ID>, <%ID>                                                                                      
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = load <4 x i32>, <4 x i32>* <%ID>, align 4                                                                       

<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                 
		<%ID> = icmp ult i32* <%ID>, <%ID>                                                                                      
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      

<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = trunc i64 <%ID> to i32                                                                                          
		ret i64 <%ID>                                                                                                           
		<%ID> = icmp eq <4 x i64> <%ID>, <%ID>                                                                                  

<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = icmp ult i32* <%ID>, <%ID>                                                                                      
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
		<%ID> = select i1 <%ID>, i32* <%ID>, i32* <%ID>                                                                         

<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = icmp ult i32* <%ID>, <%ID>                                                                                      
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
		<%ID> = select i1 <%ID>, i8* getelementptr inbounds ([2 x i8], [2 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([1 x i8], [1 x i8]* <@ID>, i64 <INT>, i64 <INT>)

<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = icmp ult i32* <%ID>, <%ID>                                                                                      
		<%ID> = phi i32** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    
		<%ID> = getelementptr i32, i32* <%ID>, i64 <%ID>                                                                        

<%ID> = bitcast { { { double*, i64, i64 } } }* <%ID> to i8*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = bitcast { i8 }* <%ID> to { { { double*, i64, i64 } } }*                                                         
		<%ID> = call dereferenceable(24) { { { double*, i64, i64 } } }* <@ID>({ i8 }* <%ID>, i64 <%ID>, i64 <%ID>)              
		<%ID> = bitcast { i8 }* <%ID> to i8**                                                                                   
		<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             

<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
		<%ID> = bitcast { { { { { { { i64, i64, i8* } } } } } }* }* <%ID> to i8**                                               
		<%ID> = bitcast { { double*, i64 } }* <%ID> to { { { double*, i64 } } }*                                                
		tail call void <@ID>({ { { { { { i64, i64, i8* } } } } } }* <%ID>, { { { { { { i64, i64, i8* } } } } } }* nonnull dereferenceable(24) <%ID>)

<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
		<%ID> = phi { { { { i32*, i64 } } } }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                               
		<%ID> = bitcast { i8 }* <%ID> to { { { { double*, i64 } } }* }*                                                         
		<%ID> = bitcast i8* <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }**                                        

<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
		<%ID> = phi { i32, [1 x i8*] }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                      
		<%ID> = getelementptr inbounds { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* }, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* }* <%ID>, i64 <INT>, i32 <INT>
		<%ID> = getelementptr inbounds { { { i32 (...)** } }, { { i8* } }, { { { { { { { { i64, i64, i8* } } } } } }* } }, i32, [1 x i32] }, { { { i32 (...)** } }, { { i8* } }, { { { { { { { { i64, i64, i8* } } } } } }* } }, i32, [1 x i32] }* <%ID>, i64 <INT>, i32 <INT>

<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
expected answer:
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
		<%ID> = bitcast { i8 }* <%ID> to { { { { double*, i64 } } }* }*                                                         
		<%ID> = phi { { { { i32*, i64 } } } }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                               
		<%ID> = getelementptr inbounds { <{ { { { double*, i64 } } }*, { { { double*, i64 } } }*, { i8 }, [7 x i8] }>, { { { double*, i64 } } }* }, { <{ { { { double*, i64 } } }*, { { { double*, i64 } } }*, { i8 }, [7 x i8] }>, { { { double*, i64 } } }* }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>

<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
Nearest neighbors:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = getelementptr inbounds <{ { i8 }, [7 x i8], { i64 }, { i32 }, [4 x i8] }>, <{ { i8 }, [7 x i8], { i64 }, { i32 }, [4 x i8] }>* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>
		<%ID> = getelementptr inbounds { { i64 }, { i8 }, { i32 } }, { { i64 }, { i8 }, { i32 } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>
		<%ID> = bitcast { { { { i32*, i64, i64 } } }* }* <%ID> to { { i32*, i64, i64 } }**                                      

<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
Nearest neighbors:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = getelementptr inbounds { <{ { { { double*, i64 } } }*, { { { double*, i64 } } }*, { i8 }, [7 x i8] }>, { { { double*, i64 } } }* }, { <{ { { { double*, i64 } } }*, { { { double*, i64 } } }*, { i8 }, [7 x i8] }>, { { { double*, i64 } } }* }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>
		<%ID> = load double**, double*** <%ID>, align 8                                                                         
		<%ID> = bitcast { i8 }* <%ID> to { { { { double*, i64 } } }* }*                                                         

<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast { i8 }* <%ID> to { { { { double*, i64 } } }* }*                                                         
		<%ID> = call <4 x i32> <@ID>(<4 x i32> <%ID>)                                                                           
		<%ID> = extractelement <4 x i32> <%ID>, <TYP> 3                                                                         

<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = getelementptr inbounds { <{ { { { double*, i64 } } }*, { { { double*, i64 } } }*, { i8 }, [7 x i8] }>, { { { double*, i64 } } }* }, { <{ { { { double*, i64 } } }*, { { { double*, i64 } } }*, { i8 }, [7 x i8] }>, { { { double*, i64 } } }* }* <%ID>, i64 <INT>, i32 <INT>
		<%ID> = getelementptr inbounds { <{ { { { double*, i64 } } }*, { { { double*, i64 } } }*, { i8 }, [7 x i8] }>, { { { double*, i64 } } }* }, { <{ { { { double*, i64 } } }*, { { { double*, i64 } } }*, { i8 }, [7 x i8] }>, { { { double*, i64 } } }* }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>

<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
expected answer:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = phi { double, double }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                      
		<%ID> = bitcast { i8 }* <%ID> to { { { { double*, i64 } } }* }*                                                         
		<%ID> = xor <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               

<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
expected answer:
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
Nearest neighbors:
		<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = bitcast { i8 }* <%ID> to { { { { double*, i64 } } }* }*                                                         
		<%ID> = phi { { { { i32*, i64 } } } }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                               
		<%ID> = bitcast { { double*, i64 } }* <%ID> to { { { double*, i64 } } }*                                                

<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
expected answer:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = bitcast { i8 }* <%ID> to { { { { double*, i64 } } }* }*                                                         
		<%ID> = bitcast { i8 }* <%ID> to { { double*, i64, i64 } }**                                                            
		<%ID> = bitcast { { { { i32*, i64, i64 } } }* }* <%ID> to { { i32*, i64, i64 } }**                                      

<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = ashr <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                              
		<%ID> = extractelement <4 x i32> <%ID>, <TYP> 1                                                                         

<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast { i8 }* <%ID> to { { { { double*, i64 } } }* }*                                                         
		<%ID> = bitcast { { { { i32*, i64, i64 } } }* }* <%ID> to { { i32*, i64, i64 } }**                                      
		<%ID> = bitcast { { double*, i64 } }* <%ID> to { { { double*, i64 } } }*                                                

<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = ashr <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                              
		<%ID> = getelementptr inbounds <{ { i8 }, [7 x i8], { i64 }, { i32 }, [4 x i8] }>, <{ { i8 }, [7 x i8], { i64 }, { i32 }, [4 x i8] }>* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>
		<%ID> = call <4 x i32> <@ID>(<4 x i32> <%ID>)                                                                           

<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = bitcast { i8 }* <%ID> to { { { { double*, i64 } } }* }*                                                         
		<%ID> = call <4 x i32> <@ID>(<4 x i32> <%ID>)                                                                           
		<%ID> = call dereferenceable(24) { { { double*, i64, i64 } } }* <@ID>({ { double*, i64, i64 } }* nonnull <%ID>, { i8 }* nonnull dereferenceable(1) <%ID>)

<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
expected answer:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = and <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = bitcast { i8 }* <%ID> to { { { { double*, i64 } } }* }*                                                         
		<%ID> = bitcast { { double*, i64 } }* <%ID> to { { { double*, i64 } } }*                                                

<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
expected answer:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = bitcast { i8 }* <%ID> to { { { { double*, i64 } } }* }*                                                         
		call void <@ID>({ { { i32*, i64 } } }* nonnull dereferenceable(16) <%ID>, <{ { i8 }, [7 x i8], { i64 }, { i32 }, [4 x i8] }>* nonnull dereferenceable(24) <%ID>, { i8 }* nonnull dereferenceable(1) <%ID>)
		<%ID> = phi { { { double*, i64 } } }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                

<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast double* <%ID> to i64*                                                                                   
expected answer:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = bitcast double* <%ID> to i64*                                                                                   
		<%ID> = bitcast { { double*, i64 } }* <%ID> to { { { double*, i64 } } }*                                                
		call void <@ID>({ { { double*, i64 } } }* nonnull dereferenceable(16) <%ID>, { { { { { double*, i64 } } }* }, { { { { double*, i64, i64 } } }* } }* nonnull dereferenceable(16) <%ID>, { i8 }* nonnull dereferenceable(1) <%ID>, i8* null)
		<%ID> = bitcast { { { { double*, i64, i64 } } }* }* <%ID> to { { double*, i64, i64 } }**                                

<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast double* <%ID> to i8*                                                                                    
expected answer:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = bitcast double* <%ID> to i8*                                                                                    
		<%ID> = phi { { { { i32*, i64 } } } }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                               
		call void <@ID>({ { { double*, i64 } } }* nonnull dereferenceable(16) <%ID>, { { { { { double*, i64 } } }* }, { { { { double*, i64, i64 } } }* } }* nonnull dereferenceable(16) <%ID>, { i8 }* nonnull dereferenceable(1) <%ID>, i8* null)
		<%ID> = bitcast { { double*, i64 } }* <%ID> to { { { double*, i64 } } }*                                                

<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast float <%ID> to i32                                                                                      
expected answer:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = getelementptr inbounds { { i64 }, { i8 }, { i32 } }, { { i64 }, { i8 }, { i32 } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>
		<%ID> = phi float [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]              
		<%ID> = phi i32 [ 0, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]

<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast double <%ID> to i64                                                                                     
expected answer:
		<%ID> = bitcast i64 <%ID> to double                                                                                     
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = phi { { { { i32*, i64 } } } }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                               
		<%ID> = bitcast { i8 }* <%ID> to { { { { double*, i64 } } }* }*                                                         
		<%ID> = bitcast { { double*, i64 } }* <%ID> to { { { double*, i64 } } }*                                                

<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast float* <%ID> to i8*                                                                                     
expected answer:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = getelementptr inbounds <{ { i8 }, [7 x i8], { i64 }, { i32 }, [4 x i8] }>, <{ { i8 }, [7 x i8], { i64 }, { i32 }, [4 x i8] }>* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>
		<%ID> = bitcast { i8 }* <%ID> to { { { { double*, i64 } } }* }*                                                         
		<%ID> = phi { { { { i32*, i64 } } } }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                               

<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		<%ID> = tail call i32 <@ID>(opaque* <%ID>)                                                                              
		<%ID> = bitcast { i8 }* <%ID> to { { { { double*, i64 } } }* }*                                                         
		switch i16 <%ID>, label <%ID> [
 i16 <INT>, label <%ID>
 i16 <INT>, label <%ID>]                                        

<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = getelementptr inbounds <{ { i8 }, [7 x i8], { i64 }, { i32 }, [4 x i8] }>, <{ { i8 }, [7 x i8], { i64 }, { i32 }, [4 x i8] }>* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>
		<%ID> = getelementptr inbounds { { i64 }, { i8 }, { i32 } }, { { i64 }, { i8 }, { i32 } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>
		<%ID> = bitcast { i8 }* <%ID> to { { { { double*, i64 } } }* }*                                                         

<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = bitcast { { { { i32*, i64, i64 } } }* }* <%ID> to { { i32*, i64, i64 } }**                                      
		<%ID> = load { { i32*, i64, i64 } }*, { { i32*, i64, i64 } }** <%ID>, align 8                                           
		<%ID> = bitcast { { { i32*, i64, i64 } } }** <%ID> to { { i32*, i64, i64 } }**                                          

<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = getelementptr inbounds <{ { i8 }, [7 x i8], { i64 }, { i32 }, [4 x i8] }>, <{ { i8 }, [7 x i8], { i64 }, { i32 }, [4 x i8] }>* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>
		<%ID> = bitcast { { { i32*, i64 } } }** <%ID> to { { i32*, i64 } }**                                                    
		<%ID> = getelementptr inbounds { { i64 }, { i8 }, { i32 } }, { { i64 }, { i8 }, { i32 } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>

<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = getelementptr inbounds { { i64 }, { i8 }, { i32 } }, { { i64 }, { i8 }, { i32 } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>
		<%ID> = getelementptr inbounds <{ { i8 }, [7 x i8], { i64 }, { i32 }, [4 x i8] }>, <{ { i8 }, [7 x i8], { i64 }, { i32 }, [4 x i8] }>* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>
		<%ID> = getelementptr inbounds <{ { i64 }, { i64 }, { i32 }, [4 x i8] }>, <{ { i64 }, { i64 }, { i32 }, [4 x i8] }>* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>

<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<%ID> = bitcast { { { { i32*, i64, i64 } } }* }* <%ID> to { { i32*, i64, i64 } }**                                      
		<%ID> = getelementptr inbounds <{ { i8 }, [7 x i8], { i64 }, { i32 }, [4 x i8] }>, <{ { i8 }, [7 x i8], { i64 }, { i32 }, [4 x i8] }>* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>
		<%ID> = load { { i32*, i64, i64 } }*, { { i32*, i64, i64 } }** <%ID>, align 8                                           

<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		store <{ { i32 }, { i8 }, [3 x i8] }>* <%ID>, <{ { i32 }, { i8 }, [3 x i8] }>** <%ID>, align 8                          
		<%ID> = getelementptr inbounds <{ { i8 }, [7 x i8], { i64 }, { i32 }, [4 x i8] }>, <{ { i8 }, [7 x i8], { i64 }, { i32 }, [4 x i8] }>* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>
		<%ID> = bitcast { { { i32*, i64 } } }** <%ID> to { { i32*, i64 } }**                                                    

<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = getelementptr inbounds <{ { i8 }, [7 x i8], { i64 }, { i32 }, [4 x i8] }>, <{ { i8 }, [7 x i8], { i64 }, { i32 }, [4 x i8] }>* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>
		<%ID> = bitcast { { { { i32*, i64, i64 } } }* }* <%ID> to { { i32*, i64, i64 } }**                                      
		<%ID> = bitcast { { { i32*, i64 } } }** <%ID> to { { i32*, i64 } }**                                                    

<%ID> = bitcast { { { { i32*, i64 } } } }* <%ID> to { i8 }*                                                             
<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast { i8 }* <%ID> to { { { { i32*, i64 } } } }*                                                             
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = getelementptr inbounds <{ { i8 }, [7 x i8], { i64 }, { i32 }, [4 x i8] }>, <{ { i8 }, [7 x i8], { i64 }, { i32 }, [4 x i8] }>* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>
		<%ID> = phi { { { { i32*, i64 } } } }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                               
		<%ID> = bitcast { { { { i32*, i64, i64 } } }* }* <%ID> to { { i32*, i64, i64 } }**                                      

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
		<%ID> = getelementptr inbounds { { i8 }, [23 x i8] }, { { i8 }, [23 x i8] }* <%ID>, i64 <INT>, i32 <INT>, i64 <INT>     
		<%ID> = select i1 <%ID>, i8* <%ID>, i8* <%ID>                                                                           
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to { { i8 }, [23 x i8] }*                                  

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
Nearest neighbors:
		<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
		<%ID> = bitcast i8** <%ID> to { { i32 (...)** } }**                                                                     
		<%ID> = icmp eq { i32, [1 x i8*] }* <%ID>, null                                                                         
		<%ID> = getelementptr inbounds { { i8 }, [23 x i8] }, { { i8 }, [23 x i8] }* <%ID>, i64 <INT>, i32 <INT>, i64 <INT>     

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
expected answer:
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
Nearest neighbors:
		<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
		<%ID> = alloca <2 x double>, align 16                                                                                   
		<%ID> = bitcast <2 x double>* <%ID> to { double, double }*                                                              
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([146 x i8], [146 x i8]* <@ID>, i64 <INT>, i64 <INT>))

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
Nearest neighbors:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		<%ID> = add <2 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = extractvalue { i8*, i32 } <%ID>, 1                                                                              
		<%ID> = xor <2 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = phi i8* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                    

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		<%ID> = insertvalue { i8*, i32 } <%ID>, i32 <%ID>, 1                                                                    
		<%ID> = load <4 x i32>, <4 x i32>* <%ID>, align 1                                                                       
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = phi i32 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                    

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = shufflevector <16 x i8> <%ID>, <16 x i8> <%ID>, <16 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>
		<%ID> = bitcast i32* <%ID> to <16 x i8>*                                                                                
		<%ID> = load <16 x i8>, <16 x i8>* <%ID>, align 16                                                                      

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
expected answer:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
		<%ID> = xor <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = getelementptr inbounds { double, double }, { double, double }* <%ID>, i64 <INT>                                 
		<%ID> = shufflevector <2 x double> <%ID>, <2 x double> undef, <4 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>    
		<%ID> = phi { double, double }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                      

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
expected answer:
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
Nearest neighbors:
		<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
		<%ID> = alloca <4 x float>, align 16                                                                                    
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
		store <4 x float> <%ID>, <4 x float>* <%ID>, align 16                                                                   
		<%ID> = load float*, float** <%ID>, align 8                                                                             

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
expected answer:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> <%ID>, <4 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>      
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     
		<%ID> = phi <16 x i8> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     
		<%ID> = shufflevector <4 x i32> <%ID>, <4 x i32> undef, <4 x i32> <i32 <INT>, i32 undef, i32 <INT>, i32 undef>          
		<%ID> = bitcast <2 x i64> <%ID> to <4 x float>                                                                          
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = load <4 x i32>, <4 x i32>* <%ID>, align 4                                                                       
		<%ID> = load <4 x i32>, <4 x i32>* <%ID>, align 1                                                                       
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast <8 x i16> <%ID> to <4 x i32>                                                                            
		<%ID> = or <4 x i32> <%ID>, <%ID>                                                                                       
		<%ID> = sub <8 x i16> <%ID>, <%ID>                                                                                      
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = and <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                               
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
		<%ID> = tail call <4 x float> <@ID>(<4 x float> <%ID>, <4 x float> <%ID>)                                               
		<%ID> = tail call fast <4 x float> <@ID>(<4 x float> <%ID>, <4 x float> <%ID>)                                          

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
expected answer:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = and <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            
		<%ID> = call fast <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            
		<%ID> = tail call fast <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                       

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
expected answer:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = xor <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   
		<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = getelementptr inbounds { i32*, { { [1 x i64] } } }, { i32*, { { [1 x i64] } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i64 <INT>
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
expected answer:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		store { i8*, { { [1 x i64] } } }* <%ID>, { i8*, { { [1 x i64] } } }** <%ID>, align 8                                    
		<%ID> = and <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
		<%ID> = xor <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
<%ID> = bitcast double* <%ID> to i64*                                                                                   
expected answer:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i64*                                                                                   
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
		<%ID> = lshr i64 <%ID>, <INT>                                                                                           
		<%ID> = phi i8* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      
		<%ID> = getelementptr inbounds { { i8 }, [23 x i8] }, { { i8 }, [23 x i8] }* <%ID>, i64 <INT>, i32 <INT>, i64 <INT>     

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
<%ID> = bitcast double* <%ID> to i8*                                                                                    
expected answer:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i8*                                                                                    
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
		<%ID> = getelementptr inbounds { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = getelementptr inbounds { { i8 }, [23 x i8] }, { { i8 }, [23 x i8] }* <%ID>, i64 <INT>, i32 <INT>, i64 <INT>     
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to { { i8 }, [23 x i8] }*                                  

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
<%ID> = bitcast float <%ID> to i32                                                                                      
expected answer:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
Nearest neighbors:
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = select i1 <%ID>, float <%ID>, float <%ID>                                                                       
		<%ID> = phi i32 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      
		<%ID> = fcmp olt float <%ID>, <%ID>                                                                                     
		<%ID> = phi float [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
<%ID> = bitcast double <%ID> to i64                                                                                     
expected answer:
		<%ID> = bitcast i64 <%ID> to double                                                                                     
Nearest neighbors:
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = fcmp ogt double <%ID>, <%ID>                                                                                    
		<%ID> = fcmp fast ogt double <%ID>, <%ID>                                                                               
		<%ID> = select i1 <%ID>, double <%ID>, double <%ID>                                                                     
		<%ID> = fcmp olt double <%ID>, <%ID>                                                                                    

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
<%ID> = bitcast float* <%ID> to i8*                                                                                     
expected answer:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
Nearest neighbors:
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
		<%ID> = bitcast i64* <%ID> to i8*                                                                                       
		<%ID> = bitcast double* <%ID> to i8*                                                                                    
		<%ID> = alloca { { { { { { i64, i64, i8* } } } } } }, align 8                                                           

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
		<%ID> = load i16, i16* <%ID>, align 2                                                                                   
		store i16 <%ID>, i16* <%ID>, align 8                                                                                    
		<%ID> = getelementptr inbounds { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
		<%ID> = lshr i64 <%ID>, <INT>                                                                                           
		<%ID> = select i1 <%ID>, i64 <%ID>, i64 <%ID>                                                                           
		<%ID> = bitcast { float }* <%ID> to i32*                                                                                

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
		<%ID> = getelementptr inbounds { { i32*, i64 } }, { { i32*, i64 } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>             
		<%ID> = extractvalue { i8*, i32 } <%ID>, 1                                                                              
		define linkonce_odr i64 <@ID>()                                                                                         

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
		call void <@ID>({ { i32*, i32*, { { i32* } } } }* nonnull <%ID>, i32* nonnull dereferenceable(4) <%ID>)                 
		<%ID> = bitcast { { i32*, i32*, { { i32* } } } }* <%ID> to i64*                                                         
		<%ID> = load i32*, i32** <%ID>, align 8                                                                                 

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
		<%ID> = invoke dereferenceable(24) { { { { { { i64, i64, i8* } } } } } }* <@ID>({ { { { { { i64, i64, i8* } } } } } }* <%ID>, i8* <%ID>, i64 <%ID>)
 to label <%ID> unwind label <%ID>
		<%ID> = load i32*, i32** <%ID>, align 8                                                                                 
		<%ID> = sext i8 <%ID> to i64                                                                                            

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
		<%ID> = load i32*, i32** <%ID>, align 8                                                                                 
		<%ID> = bitcast i64* <%ID> to i8*                                                                                       
		<%ID> = getelementptr inbounds { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to { { i8 }, [23 x i8] }*                                  
		<%ID> = getelementptr inbounds { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = extractvalue { i8*, i32 } <%ID>, 1                                                                              

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = load i32*, i32** <%ID>, align 8                                                                                 
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
		<%ID> = phi i32** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    
		store i32* <%ID>, i32** <%ID>, align 8                                                                                  

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                     
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = icmp eq i32* <%ID>, null                                                                                        
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     
		<%ID> = insertvalue { i8*, i32 } <%ID>, i32 <%ID>, 1                                                                    
		<%ID> = load i32*, i32** <%ID>, align 8                                                                                 

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
expected answer:
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
Nearest neighbors:
		<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
		store { { { { { { { { i64, i64, i8* } } } } } }, { { { { { { { i64, i64, i8* } } } } } }, { { { i32 (...)** } }, { { i8* } }, { { { { { { { { i64, i64, i8* } } } } } }* } }, i32, [1 x i32] } }* }, opaque* }* null, { { { { { { { { i64, i64, i8* } } } } } }, { { { { { { { i64, i64, i8* } } } } } }, { { { i32 (...)** } }, { { i8* } }, { { { { { { { { i64, i64, i8* } } } } } }* } }, i32, [1 x i32] } }* }, opaque* }** <%ID>, align 8
		<%ID> = bitcast { { { { { { { { { { i64, i64, i8* } } } } } }, { { { { { { { i64, i64, i8* } } } } } }, { { { i32 (...)** } }, { { i8* } }, { { { { { { { { i64, i64, i8* } } } } } }* } }, i32, [1 x i32] } }* }, opaque* }*, { i64, i64, i64, i64, i8**, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }*, i64 } }* <%ID> to i64*
		<%ID> = alloca { { { { { { i64, i64, i8* } } } } } }*, align 8                                                          

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
expected answer:
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
Nearest neighbors:
		<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
		<%ID> = alloca <2 x double>, align 16                                                                                   
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([146 x i8], [146 x i8]* <@ID>, i64 <INT>, i64 <INT>))
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([152 x i8], [152 x i8]* <@ID>, i64 <INT>, i64 <INT>))

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
Nearest neighbors:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
		store i16 <INT>, i16* <%ID>, align 8                                                                                    
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([152 x i8], [152 x i8]* <@ID>, i64 <INT>, i64 <INT>))
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
		<%ID> = bitcast i32* <%ID> to <16 x i8>*                                                                                
		<%ID> = shufflevector <16 x i8> <%ID>, <16 x i8> <%ID>, <16 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
expected answer:
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
Nearest neighbors:
		<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
		<%ID> = alloca <4 x float>, align 16                                                                                    
		<%ID> = bitcast <8 x float>* <%ID> to i8*                                                                               
		<%ID> = alloca { i8 }, align 1                                                                                          

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
expected answer:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = bitcast <2 x i64> <%ID> to <4 x float>                                                                          

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     
		<%ID> = bitcast <2 x i64> <%ID> to <4 x float>                                                                          
		<%ID> = shufflevector <4 x i32> <%ID>, <4 x i32> undef, <4 x i32> <i32 <INT>, i32 undef, i32 <INT>, i32 undef>          
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast <8 x i16> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
		<%ID> = ashr <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                              
		<%ID> = call <4 x i32> <@ID>(<4 x i32> <%ID>)                                                                           

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
		<%ID> = and <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                               
		<%ID> = tail call fast <4 x float> <@ID>(<4 x float> <%ID>, <4 x float> <%ID>)                                          
		<%ID> = alloca { { { { { { i64, i64, i8* } } } } } }*, align 8                                                          

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
expected answer:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = and <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = tail call fast <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                       
		<%ID> = call fast <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
expected answer:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
		<%ID> = xor <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   
		<%ID> = tail call <8 x float> <@ID>(<8 x float> <%ID>, <8 x float> <%ID>, <8 x float> <float <FLOAT>, float <FLOAT>, float <FLOAT>, float <FLOAT>, float <FLOAT>, float <FLOAT>, float <FLOAT>, float <FLOAT>>)
		<%ID> = select i1 <%ID>, i16 <INT>, i16 <%ID>                                                                           

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
expected answer:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
		<%ID> = alloca i32*, align 8                                                                                            
		store { i8*, { { [1 x i64] } } }* <%ID>, { i8*, { { [1 x i64] } } }** <%ID>, align 8                                    
		<%ID> = alloca <{ opaque*, i32, [4 x i8] }>, align 8                                                                    

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
<%ID> = bitcast double* <%ID> to i64*                                                                                   
expected answer:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i64*                                                                                   
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([146 x i8], [146 x i8]* <@ID>, i64 <INT>, i64 <INT>))
		<%ID> = alloca <{ opaque*, i32, [4 x i8] }>, align 8                                                                    
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([152 x i8], [152 x i8]* <@ID>, i64 <INT>, i64 <INT>))

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
<%ID> = bitcast double* <%ID> to i8*                                                                                    
expected answer:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i8*                                                                                    
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([146 x i8], [146 x i8]* <@ID>, i64 <INT>, i64 <INT>))
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([152 x i8], [152 x i8]* <@ID>, i64 <INT>, i64 <INT>))
		<%ID> = bitcast { double }* <%ID> to i64*                                                                               

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
<%ID> = bitcast float <%ID> to i32                                                                                      
expected answer:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
Nearest neighbors:
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = select i1 <%ID>, float <%ID>, float <%ID>                                                                       
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
		<%ID> = fcmp fast ogt float <%ID>, <%ID>                                                                                
		<%ID> = fcmp fast olt float <%ID>, <%ID>                                                                                

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
<%ID> = bitcast double <%ID> to i64                                                                                     
expected answer:
		<%ID> = bitcast i64 <%ID> to double                                                                                     
Nearest neighbors:
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = fcmp ogt double <%ID>, <%ID>                                                                                    
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
		<%ID> = fcmp fast ogt double <%ID>, <%ID>                                                                               
		<%ID> = select i1 <%ID>, double <%ID>, double <%ID>                                                                     

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
<%ID> = bitcast float* <%ID> to i8*                                                                                     
expected answer:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
Nearest neighbors:
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([152 x i8], [152 x i8]* <@ID>, i64 <INT>, i64 <INT>))
		<%ID> = alloca { i8 }, align 1                                                                                          
		<%ID> = bitcast double* <%ID> to i8*                                                                                    

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
		<%ID> = alloca i16, align 2                                                                                             
		<%ID> = phi i16* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                     
		store i16 <%ID>, i16* <%ID>, align 2                                                                                    

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
		<%ID> = bitcast { float }* <%ID> to i32*                                                                                
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
		<%ID> = bitcast i64 <%ID> to double                                                                                     

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       
		store i32* <%ID>, i32** <%ID>, align 8                                                                                  
		<%ID> = load { { i32*, i64, i64 } }*, { { i32*, i64, i64 } }** <%ID>, align 8                                           

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
		store i32* <%ID>, i32** <%ID>, align 8                                                                                  
		call void <@ID>({ { i32*, i32*, { { i32* } } } }* nonnull <%ID>, i32* nonnull dereferenceable(4) <%ID>)                 

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
		<%ID> = alloca { { { { { { i64, i64, i8* } } } } } }*, align 8                                                          
		<%ID> = load i64, i64* <@ID>, align 8                                                                                   
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
		<%ID> = alloca i32, align 4                                                                                             
		store i32* <%ID>, i32** <%ID>, align 8                                                                                  
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
		<%ID> = alloca { { { { { { i64, i64, i8* } } } } } }*, align 8                                                          
		<%ID> = load i1, i1* <@ID>, align 1                                                                                     
		<%ID> = select i1 <%ID>, i8* getelementptr inbounds ([2 x i8], [2 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([1 x i8], [1 x i8]* <@ID>, i64 <INT>, i64 <INT>)

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		store i32* <%ID>, i32** <%ID>, align 8                                                                                  
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = icmp eq i32* <%ID>, null                                                                                        

<%ID> = bitcast i8* <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                    
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		store i32* <%ID>, i32** <%ID>, align 8                                                                                  
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
		<%ID> = icmp eq i32* <%ID>, null                                                                                        
		<%ID> = phi i32** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    

<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
expected answer:
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
Nearest neighbors:
		<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
		<%ID> = alloca <2 x double>, align 16                                                                                   
		invoke void <@ID>({ { { { { { i64, i64, i8* } } } } } }* nonnull <%ID>, { { { { { { i64, i64, i8* } } } } } }* nonnull dereferenceable(24) <%ID>)
 to label <%ID> unwind label <%ID>
		<%ID> = invoke dereferenceable(24) { { { { { { i64, i64, i8* } } } } } }* <@ID>({ { { { { { i64, i64, i8* } } } } } }* nonnull <%ID>, i8* <%ID>)
 to label <%ID> unwind label <%ID>

<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
Nearest neighbors:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
		<%ID> = bitcast <2 x i64> <%ID> to <8 x i16>                                                                            
		<%ID> = add <2 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = xor <2 x i64> <%ID>, <%ID>                                                                                      

<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = shufflevector <16 x i8> <%ID>, <16 x i8> <%ID>, <16 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
		<%ID> = bitcast i32* <%ID> to <16 x i8>*                                                                                

<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
expected answer:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
		<%ID> = xor <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
		<%ID> = phi { double, double }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                      
		<%ID> = getelementptr inbounds { double, double }, { double, double }* <%ID>, i64 <INT>                                 

<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
expected answer:
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
Nearest neighbors:
		<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
		<%ID> = alloca <4 x float>, align 16                                                                                    
		store <4 x float> <%ID>, <4 x float>* <%ID>, align 16                                                                   
		<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   

<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     
		<%ID> = bitcast <2 x i64> <%ID> to <4 x float>                                                                          
		<%ID> = shufflevector <4 x i32> <%ID>, <4 x i32> undef, <4 x i32> <i32 <INT>, i32 undef, i32 <INT>, i32 undef>          
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> <%ID>, <4 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>      

<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast <8 x i16> <%ID> to <4 x i32>                                                                            
		<%ID> = ashr <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                              
		<%ID> = or <4 x i32> <%ID>, <%ID>                                                                                       
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   

<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
		<%ID> = and <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                               
		<%ID> = tail call fast <4 x float> <@ID>(<4 x float> <%ID>, <4 x float> <%ID>)                                          
		<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   

<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
expected answer:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = and <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
		<%ID> = fmul <4 x double> <%ID>, <double <FLOAT>, double <FLOAT>, double <FLOAT>, double <FLOAT>>                       
		<%ID> = call fast <4 x double> <@ID>(<4 x double> <%ID>)                                                                

<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
expected answer:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
		<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = xor <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   
		store <8 x float> <%ID>, <8 x float>* <%ID>, align 4                                                                    

<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
expected answer:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
		store { i8*, { { [2 x i64] } } }* <%ID>, { i8*, { { [2 x i64] } } }** <%ID>, align 8                                    
		<%ID> = getelementptr inbounds { { i8*, { { [2 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { i8*, { { [2 x i64] } } }* }, { { i8 }, { { [2 x i64] }, { { [2 x i64] } }, { [2 x i64] }, { [2 x i64] }, { i8*, { { [2 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { i8*, { { [2 x i64] } } }* } }, { { [2 x i64] }, { { [2 x i64] } }, { [2 x i64] }, { [2 x i64] }, { i8*, { { [2 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { i8*, { { [2 x i64] } } }* } } } }, { { i8*, { { [2 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { i8*, { { [2 x i64] } } }* }, { { i8 }, { { [2 x i64] }, { { [2 x i64] } }, { [2 x i64] }, { [2 x i64] }, { i8*, { { [2 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { i8*, { { [2 x i64] } } }* } }, { { [2 x i64] }, { { [2 x i64] } }, { [2 x i64] }, { [2 x i64] }, { i8*, { { [2 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { i8*, { { [2 x i64] } } }* } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i64 <INT>
		<%ID> = getelementptr inbounds { { i8*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { i8*, { { [5 x i64] } } }* }, { { i8 }, { { [5 x i64] }, { { [5 x i64] } }, { [5 x i64] }, { [5 x i64] }, { i8*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { i8*, { { [5 x i64] } } }* } }, { { [5 x i64] }, { { [5 x i64] } }, { [5 x i64] }, { [5 x i64] }, { i8*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { i8*, { { [5 x i64] } } }* } } } }, { { i8*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { i8*, { { [5 x i64] } } }* }, { { i8 }, { { [5 x i64] }, { { [5 x i64] } }, { [5 x i64] }, { [5 x i64] }, { i8*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { i8*, { { [5 x i64] } } }* } }, { { [5 x i64] }, { { [5 x i64] } }, { [5 x i64] }, { [5 x i64] }, { i8*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { i8*, { { [5 x i64] } } }* } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i64 <INT>

<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
<%ID> = bitcast double* <%ID> to i64*                                                                                   
expected answer:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i64*                                                                                   
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
		<%ID> = phi i8* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      
		<%ID> = alloca { i32, i8*, { i32, i32 } }, align 8                                                                      
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       

<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
<%ID> = bitcast double* <%ID> to i8*                                                                                    
expected answer:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i8*                                                                                    
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
		<%ID> = getelementptr double, double* <%ID>, i64 <%ID>                                                                  
		tail call void <@ID>(i8* <%ID>, i8 <INT>, i64 <%ID>, i32 <INT>, i1 false)                                               
		call void <@ID>(i64 <%ID>, i64 <%ID>, { { double*, i64 } }* nonnull dereferenceable(16) <%ID>, { { double*, i64 } }* nonnull dereferenceable(16) <%ID>, double* <%ID>, i64 <INT>, double <FLOAT>)

<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
<%ID> = bitcast float <%ID> to i32                                                                                      
expected answer:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
Nearest neighbors:
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = select i1 <%ID>, float <%ID>, float <%ID>                                                                       
		<%ID> = phi float [ undef, <%ID> ], [ <%ID>, <%ID> ]                                                                    
		<%ID> = fcmp fast ogt float <%ID>, <%ID>                                                                                
		<%ID> = fmul float <%ID>, <%ID>                                                                                         

<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
<%ID> = bitcast double <%ID> to i64                                                                                     
expected answer:
		<%ID> = bitcast i64 <%ID> to double                                                                                     
Nearest neighbors:
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
		<%ID> = select i1 <%ID>, double <%ID>, double <%ID>                                                                     
		<%ID> = fcmp ogt double <%ID>, <%ID>                                                                                    
		<%ID> = fcmp fast ogt double <%ID>, <%ID>                                                                               

<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
<%ID> = bitcast float* <%ID> to i8*                                                                                     
expected answer:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
Nearest neighbors:
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
		tail call void <@ID>(i8* <%ID>, i8 <INT>, i64 <%ID>, i32 <INT>, i1 false)                                               
		<%ID> = bitcast { { { float*, i64 } } }** <%ID> to { { float*, i64 } }**                                                
		<%ID> = bitcast { float }* <%ID> to i32*                                                                                

<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
		<%ID> = phi i16* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                     
		<%ID> = bitcast i16** <%ID> to i8**                                                                                     
		<%ID> = getelementptr inbounds i16, i16* <%ID>, i64 <INT>                                                               

<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
		<%ID> = bitcast { float }* <%ID> to i32*                                                                                
		<%ID> = bitcast { { float*, i64 } }* <%ID> to i64*                                                                      
		<%ID> = getelementptr inbounds { { { { float*, i64 } } }*, { { { float*, i64 } } }* }, { { { { float*, i64 } } }*, { { { float*, i64 } } }* }* <%ID>, i64 <INT>, i32 <INT>

<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
		<%ID> = load { { i32*, i64, i64 } }*, { { i32*, i64, i64 } }** <%ID>, align 8                                           
		<%ID> = ptrtoint i32* <%ID> to i64                                                                                      
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     

<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
		call void <@ID>({ { i32*, i32*, { { i32* } } } }* nonnull <%ID>, i32* nonnull dereferenceable(4) <%ID>)                 
		<%ID> = bitcast { { i32*, i32*, { { i32* } } } }* <%ID> to i64*                                                         
		<%ID> = ptrtoint i32* <%ID> to i64                                                                                      

<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
		<%ID> = bitcast { { { float*, i64 } } }** <%ID> to { { float*, i64 } }**                                                
		<%ID> = invoke i8* <@ID>({ i8*, i64 }* nonnull <%ID>, i64 <%ID>)
 to label <%ID> unwind label <%ID>                     
		<%ID> = invoke i64 <@ID>({ i8 }* nonnull <%ID>, i8* <%ID>, i64 <%ID>)
 to label <%ID> unwind label <%ID>                

<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
		<%ID> = load { { { i32*, i64 } } }*, { { { i32*, i64 } } }** <%ID>, align 8                                             
		<%ID> = load { { i32*, i64, i64 } }*, { { i32*, i64, i64 } }** <%ID>, align 8                                           
		<%ID> = ptrtoint i32* <%ID> to i64                                                                                      

<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
		<%ID> = invoke dereferenceable(24) { { { { { { i64, i64, i8* } } } } } }* <@ID>({ { { { { { i64, i64, i8* } } } } } }* nonnull <%ID>, i8* <%ID>)
 to label <%ID> unwind label <%ID>
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
		<%ID> = alloca { <{ { { { { opaque* }**, { { { i64 } } } } } }, { { { opaque* } } }, { { i64 } }, { { float } }, [4 x i8] }> }, align 8

<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
		<%ID> = load { { { i32*, i64 } } }*, { { { i32*, i64 } } }** <%ID>, align 8                                             
		<%ID> = bitcast { { { { i32*, i64 } } }* }* <%ID> to { { i32*, i64 } }**                                                
		store i32* <%ID>, i32** <%ID>, align 8                                                                                  

<%ID> = bitcast i8** <%ID> to { { { { { { i64, i64, i8* } } } } } }**                                                   
<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8**                                                   
		<%ID> = phi i32* [ null, <%ID> ], [ <%ID>, <%ID> ], [ null, <%ID> ]                                                     
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ null, <%ID> ], [ null, <%ID> ]                                                     

<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
Nearest neighbors:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
		<%ID> = add <2 x i64> <%ID>, <%ID>                                                                                      
		<%ID> = tail call <16 x i8> <@ID>(<16 x i8> <%ID>, <16 x i8> <%ID>)                                                     
		<%ID> = getelementptr i8, i8* <%ID>, i64 <INT>                                                                          

<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
Nearest neighbors:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> undef, <4 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef>      
		<%ID> = phi <2 x double> [ zeroinitializer, <%ID> ], [ <%ID>, <%ID> ]                                                   
		<%ID> = load <2 x double>, <2 x double>* <%ID>, align 16                                                                

<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = shufflevector <16 x i8> <%ID>, <16 x i8> <%ID>, <16 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>
		<%ID> = load <16 x i8>, <16 x i8>* <%ID>, align 16                                                                      

<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
expected answer:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
		<%ID> = phi <4 x i64> [ <%ID>, <%ID> ], [ zeroinitializer, <%ID> ]                                                      
		<%ID> = phi <4 x i64> [ <%ID>, <%ID> ], [ undef, <%ID> ]                                                                
		<%ID> = bitcast { double, double }* <%ID> to <4 x double>*                                                              

<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
expected answer:
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
		<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
		<%ID> = getelementptr inbounds { { { { [4 x float] } } } }, { { { { [4 x float] } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i64 <INT>
		<%ID> = alloca <4 x float>, align 16                                                                                    
		<%ID> = getelementptr inbounds <2 x float>, <2 x float>* <%ID>, i64 <INT>, i64 <INT>                                    

<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     
		<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = shufflevector <4 x i32> <%ID>, <4 x i32> undef, <4 x i32> <i32 <INT>, i32 undef, i32 <INT>, i32 undef>          

<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       
		<%ID> = shufflevector <2 x i64> <%ID>, <2 x i64> <%ID>, <2 x i32> <i32 <INT>, i32 <INT>>                                

<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
		<%ID> = tail call <16 x i8> <@ID>(<16 x i8> <%ID>, <16 x i8> <%ID>)                                                     
		<%ID> = bitcast <8 x i16> <%ID> to <4 x i32>                                                                            
		<%ID> = or <4 x i32> <%ID>, <%ID>                                                                                       

<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
		<%ID> = and <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                               
		<%ID> = tail call fast <4 x float> <@ID>(<4 x float> <%ID>, <4 x float> <%ID>)                                          
		<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   

<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
expected answer:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
		<%ID> = tail call fast <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                       
		<%ID> = bitcast float** <%ID> to i64*                                                                                   
		<%ID> = call fast <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            

<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
expected answer:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
		<%ID> = insertelement <8 x float> <%ID>, float <%ID>, <TYP> 6                                                           
		<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = bitcast { i32*, { { [5 x i64] } } }* <%ID> to i64*                                                              

<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
expected answer:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = bitcast { i32*, { { [5 x i64] } } }* <%ID> to i64*                                                              
		<%ID> = insertelement <8 x float> <%ID>, float <%ID>, <TYP> 6                                                           
		<%ID> = tail call fast <8 x float> <@ID>(<8 x float> <%ID>, <8 x float> <%ID>)                                          

<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
<%ID> = bitcast double* <%ID> to i64*                                                                                   
expected answer:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
		<%ID> = bitcast double* <%ID> to i64*                                                                                   
		<%ID> = phi i8* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      
		<%ID> = or i8 <%ID>, <INT>                                                                                              
		<%ID> = getelementptr inbounds i8, i8* <%ID>, i64 <INT>                                                                 

<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
<%ID> = bitcast double* <%ID> to i8*                                                                                    
expected answer:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
		<%ID> = bitcast double* <%ID> to i8*                                                                                    
		<%ID> = ptrtoint double* <%ID> to i64                                                                                   
		<%ID> = lshr i64 <%ID>, <INT>                                                                                           
		store i8* <%ID>, i8** <%ID>, align 8                                                                                    

<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
<%ID> = bitcast float <%ID> to i32                                                                                      
expected answer:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
Nearest neighbors:
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
		<%ID> = phi float [ undef, <%ID> ], [ <%ID>, <%ID> ]                                                                    
		<%ID> = fsub float <%ID>, <%ID>                                                                                         
		<%ID> = select i1 <%ID>, float <%ID>, float <%ID>                                                                       

<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
<%ID> = bitcast double <%ID> to i64                                                                                     
expected answer:
		<%ID> = bitcast i64 <%ID> to double                                                                                     
Nearest neighbors:
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
		<%ID> = phi i64 [ 2, <%ID> ], [ 1, <%ID> ]                                                                              
		<%ID> = fcmp ogt double <%ID>, <%ID>                                                                                    
		<%ID> = select i1 <%ID>, double <%ID>, double <%ID>                                                                     

<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
<%ID> = bitcast float* <%ID> to i8*                                                                                     
expected answer:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = bitcast { float }* <%ID> to i32*                                                                                
		<%ID> = load i8*, i8** <%ID>, align 8                                                                                   
		<%ID> = sub nsw i64 <INT>, <%ID>                                                                                        

<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
		<%ID> = fsub float <%ID>, <%ID>                                                                                         
		<%ID> = bitcast { float }* <%ID> to i32*                                                                                
		<%ID> = fcmp uno float <%ID>, <FLOAT>                                                                                   

<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       
		<%ID> = load <2 x i64>, <2 x i64>* <%ID>, align 16                                                                      
		<%ID> = bitcast i32* <%ID> to <4 x i32>*                                                                                

<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = ptrtoint i32* <%ID> to i64                                                                                      
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = add i64 <%ID>, <INT>                                                                                            

<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = or i8 <%ID>, <INT>                                                                                              
		store volatile i32 <INT>, i32* <%ID>, align 4                                                                           
		<%ID> = getelementptr inbounds { { float*, { { [4 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { float*, { { [4 x i64] } } }* }, { { i8 }, { { [4 x i64] }, { { [4 x i64] } }, { [4 x i64] }, { [4 x i64] }, { float*, { { [4 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { float*, { { [4 x i64] } } }* } }, { { [4 x i64] }, { { [4 x i64] } }, { [4 x i64] }, { [4 x i64] }, { float*, { { [4 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { float*, { { [4 x i64] } } }* } } } }, { { float*, { { [4 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { float*, { { [4 x i64] } } }* }, { { i8 }, { { [4 x i64] }, { { [4 x i64] } }, { [4 x i64] }, { [4 x i64] }, { float*, { { [4 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { float*, { { [4 x i64] } } }* } }, { { [4 x i64] }, { { [4 x i64] } }, { [4 x i64] }, { [4 x i64] }, { float*, { { [4 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { float*, { { [4 x i64] } } }* } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i64 <INT>

<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<%ID> = alloca i32, align 4                                                                                             
		<%ID> = load i32, i32* <%ID>, align 4                                                                                   
		store i8* <%ID>, i8** <%ID>, align 8                                                                                    

<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		store volatile i32 <INT>, i32* <%ID>, align 4                                                                           
		<%ID> = call i64 <@ID>(i8* <%ID>, i1 false)                                                                             
		store i8* <%ID>, i8** <%ID>, align 8                                                                                    

<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
		<%ID> = getelementptr inbounds { { { i8 } }, i64, i64, i32*, i32*, { { { float, float } }*, i32*, i64, i64 } }, { { { i8 } }, i64, i64, i32*, i32*, { { { float, float } }*, i32*, i64, i64 } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>
		store i8* <%ID>, i8** <%ID>, align 8                                                                                    
		<%ID> = icmp ugt i8* <%ID>, inttoptr (i64 <INT> to i8*)                                                                 

<%ID> = bitcast <2 x double>* <%ID> to i8*                                                                              
<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = bitcast i8* <%ID> to <2 x double>*                                                                              
		<%ID> = phi i32* [ null, <%ID> ], [ <%ID>, <%ID> ], [ null, <%ID> ]                                                     
		store i8* <%ID>, i8** <%ID>, align 8                                                                                    
		<%ID> = bitcast { { { float*, i64, i64 } } }* <%ID> to i8**                                                             

<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = shufflevector <16 x i8> <%ID>, <16 x i8> <%ID>, <16 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = load <16 x i8>, <16 x i8>* <%ID>, align 16                                                                      

<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast i32* <%ID> to <16 x i8>*                                                                                
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = shufflevector <16 x i8> <%ID>, <16 x i8> <%ID>, <16 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>
		<%ID> = load <16 x i8>, <16 x i8>* <%ID>, align 16                                                                      

<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
expected answer:
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
Nearest neighbors:
		<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
		store <4 x float> <%ID>, <4 x float>* <%ID>, align 1                                                                    
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = load { { { { i32*, i64 } } }, { { { i32*, i64 } } }*, { { i32*, { i64 } } }, { <{ i32*, { i8 } }>, [7 x i8] }, i64 }*, { { { { i32*, i64 } } }, { { { i32*, i64 } } }*, { { i32*, { i64 } } }, { <{ i32*, { i8 } }>, [7 x i8] }, i64 }** <%ID>, align 8
		<%ID> = load { { { { float*, i64 } } }, { { { float*, i64 } } }*, { { float*, { i64 } } }, { <{ float*, { i8 } }>, [7 x i8] }, i64 }*, { { { { float*, i64 } } }, { { { float*, i64 } } }*, { { float*, { i64 } } }, { <{ float*, { i8 } }>, [7 x i8] }, i64 }** <%ID>, align 8

<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
expected answer:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = shufflevector <16 x i8> <%ID>, <16 x i8> <%ID>, <16 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>
		<%ID> = phi <16 x i8> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                
		<%ID> = bitcast i32* <%ID> to <16 x i8>*                                                                                

<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = shufflevector <16 x i8> <%ID>, <16 x i8> <%ID>, <16 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            

<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = and <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                               
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = phi i64 [ 8, <%ID> ], [ 16, <%ID> ]                                                                             
		<%ID> = tail call fast <4 x float> <@ID>(<4 x float> <%ID>, <4 x float> <%ID>)                                          

<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
expected answer:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = and <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            
		<%ID> = call fast <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            

<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
expected answer:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = add nsw <8 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = xor <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   
		<%ID> = phi <8 x i32> [ <%ID>, <%ID> ], [ zeroinitializer, <%ID> ]                                                      

<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
expected answer:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = and <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   
		<%ID> = add nsw <8 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = tail call fast <8 x float> <@ID>(<8 x float> <%ID>, <8 x float> <%ID>)                                          

<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast double* <%ID> to i64*                                                                                   
expected answer:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i64*                                                                                   
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = sext i32 <%ID> to i64                                                                                           
		<%ID> = icmp ugt i32 <%ID>, <INT>                                                                                       
		<%ID> = load double, double* <%ID>, align 8                                                                             

<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast double* <%ID> to i8*                                                                                    
expected answer:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i8*                                                                                    
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = getelementptr double, double* <%ID>, i64 <%ID>                                                                  
		<%ID> = getelementptr inbounds double, double* <%ID>, i64 <INT>                                                         
		<%ID> = getelementptr inbounds double, double* <%ID>, i64 <%ID>                                                         

<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast float <%ID> to i32                                                                                      
expected answer:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
Nearest neighbors:
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = fcmp olt float <%ID>, <%ID>                                                                                     
		<%ID> = phi i64 [ 0, <%ID> ], [ 16, <%ID> ]                                                                             
		<%ID> = select i1 <%ID>, float <%ID>, float <%ID>                                                                       

<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast double <%ID> to i64                                                                                     
expected answer:
		<%ID> = bitcast i64 <%ID> to double                                                                                     
Nearest neighbors:
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = shufflevector <16 x i8> <%ID>, <16 x i8> <%ID>, <16 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>
		<%ID> = fcmp ogt double <%ID>, <%ID>                                                                                    
		<%ID> = phi i64 [ <%ID>, <%ID> ], [ undef, <%ID> ]                                                                      

<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast float* <%ID> to i8*                                                                                     
expected answer:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
Nearest neighbors:
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = getelementptr inbounds float, float* <%ID>, i64 <INT>                                                           
		<%ID> = getelementptr inbounds double, double* <%ID>, i64 <INT>                                                         
		<%ID> = bitcast i32* <%ID> to <16 x i8>*                                                                                

<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = getelementptr inbounds i16, i16* <%ID>, i64 <INT>                                                               
		<%ID> = getelementptr inbounds i16, i16* <%ID>, i64 <%ID>                                                               
		<%ID> = bitcast i16* <%ID> to <16 x i16>*                                                                               

<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = inttoptr i64 <%ID> to float*                                                                                    
		<%ID> = load i32**, i32*** <%ID>, align 8                                                                               
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            

<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       
		<%ID> = bitcast i32* <%ID> to <4 x i32>*                                                                                
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            

<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                 
		call void <@ID>({ { i32*, i32*, { { i32* } } } }* nonnull <%ID>, i32* nonnull dereferenceable(4) <%ID>)                 
		<%ID> = load i32**, i32*** <%ID>, align 8                                                                               

<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = load i32**, i32*** <%ID>, align 8                                                                               
		<%ID> = sext i32 <%ID> to i64                                                                                           
		<%ID> = load <{ { { { { { { i64, i64, i8* } } } } } }, i32, [4 x i8] }>*, <{ { { { { { { i64, i64, i8* } } } } } }, i32, [4 x i8] }>** <%ID>, align 8

<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = sext i32 <%ID> to i64                                                                                           
		<%ID> = icmp sgt i32 <%ID>, <INT>                                                                                       
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       

<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = load i32**, i32*** <%ID>, align 8                                                                               
		<%ID> = sext i32 <%ID> to i64                                                                                           
		<%ID> = invoke i32 <@ID>({ i32, i8*, { i32, i32 } }* nonnull <%ID>)
 to label <%ID> unwind label <%ID>                  

<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = load i32**, i32*** <%ID>, align 8                                                                               
		store i32* <%ID>, i32** <%ID>, align 8                                                                                  
		<%ID> = icmp eq i32* <%ID>, null                                                                                        

<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = load i32**, i32*** <%ID>, align 8                                                                               
		<%ID> = bitcast i32* <%ID> to <4 x i32>*                                                                                
		<%ID> = bitcast i64* <%ID> to i8**                                                                                      

<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast i32* <%ID> to <16 x i8>*                                                                                
		<%ID> = shufflevector <16 x i8> <%ID>, <16 x i8> <%ID>, <16 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>

<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
expected answer:
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
Nearest neighbors:
		<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> undef, <4 x i32> zeroinitializer                                   
		<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = call fast <4 x float> <@ID>(<4 x float> <%ID>, <4 x float> <%ID>, <4 x float> <%ID>)                            
		<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   

<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
expected answer:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = bitcast <4 x i32> <%ID> to <2 x double>                                                                         
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> <%ID>, <4 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>      
		<%ID> = bitcast <2 x i64> <%ID> to <4 x float>                                                                          
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     

<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = bitcast <2 x i64> <%ID> to <4 x float>                                                                          
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     
		<%ID> = shufflevector <4 x i32> <%ID>, <4 x i32> undef, <4 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>          

<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast i32* <%ID> to <4 x i32>*                                                                                
		<%ID> = load <4 x i32>, <4 x i32>* <%ID>, align 4                                                                       
		<%ID> = load <4 x i32>, <4 x i32>* <%ID>, align 1                                                                       
		<%ID> = bitcast <2 x i64> <%ID> to <4 x float>                                                                          

<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = or <4 x i32> <%ID>, <%ID>                                                                                       
		<%ID> = bitcast <8 x i16> <%ID> to <4 x i32>                                                                            
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     

<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = and <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                               
		<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   

<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
expected answer:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = add nsw <8 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = getelementptr inbounds float, float* <%ID>, i64 <%ID>                                                           
		ret <8 x float> <%ID>                                                                                                   

<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
expected answer:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = bitcast { { { { i16 } } }*, { { [1 x i64] } } }* <%ID> to i8*                                                   
		<%ID> = add nsw <8 x i32> <%ID>, <%ID>                                                                                  
		<%ID> = shufflevector <8 x float> <%ID>, <8 x float> undef, <8 x i32> zeroinitializer                                   
		<%ID> = bitcast { { [3 x i64] } }* <%ID> to i8*                                                                         

<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast double* <%ID> to i64*                                                                                   
expected answer:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i64*                                                                                   
		<%ID> = load i32*, i32** <%ID>, align 8                                                                                 
		<%ID> = alloca { i32, i8*, i32, { { { { { { i64, i64, i8* } } } } } } }, align 8                                        
		<%ID> = lshr i64 <%ID>, <INT>                                                                                           
		<%ID> = load i8*, i8** <%ID>, align 8                                                                                   

<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast double* <%ID> to i8*                                                                                    
expected answer:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i8*                                                                                    
		<%ID> = lshr i64 <%ID>, <INT>                                                                                           
		<%ID> = or i1 <%ID>, <%ID>                                                                                              
		<%ID> = inttoptr i64 <%ID> to i8*                                                                                       
		<%ID> = bitcast float* <%ID> to i8*                                                                                     

<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast float <%ID> to i32                                                                                      
expected answer:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
Nearest neighbors:
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = select i1 <%ID>, float <%ID>, float <%ID>                                                                       
		<%ID> = fcmp fast ogt float <%ID>, <%ID>                                                                                
		<%ID> = select i1 <%ID>, i32 <%ID>, i32 <%ID>                                                                           
		<%ID> = fcmp olt float <%ID>, <%ID>                                                                                     

<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast float* <%ID> to i8*                                                                                     
expected answer:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
Nearest neighbors:
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = getelementptr inbounds float, float* <%ID>, i64 <INT>                                                           
		<%ID> = load float*, float** <%ID>, align 8                                                                             
		<%ID> = load i8*, i8** <%ID>, align 8                                                                                   
		<%ID> = sub nsw i64 <INT>, <%ID>                                                                                        

<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		<%ID> = getelementptr inbounds i16, i16* <%ID>, i64 <%ID>                                                               
		<%ID> = load i16, i16* <%ID>, align 8                                                                                   
		store i16 <%ID>, i16* <%ID>, align 8                                                                                    
		<%ID> = load i16, i16* <%ID>, align 2                                                                                   

<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = inttoptr i64 <%ID> to float*                                                                                    
		<%ID> = shufflevector <8 x float> <%ID>, <8 x float> undef, <8 x i32> zeroinitializer                                   
		<%ID> = getelementptr inbounds { { double*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { double*, { { [5 x i64] } } }* }, { { i8 }, { double*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { double*, { { [5 x i64] } } }* }, { { [5 x i64] }, { { [5 x i64] } }, { [5 x i64] }, { [5 x i64] }, { double*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { double*, { { [5 x i64] } } }* } } } }, { { double*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { double*, { { [5 x i64] } } }* }, { { i8 }, { double*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { double*, { { [5 x i64] } } }* }, { { [5 x i64] }, { { [5 x i64] } }, { [5 x i64] }, { [5 x i64] }, { double*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { double*, { { [5 x i64] } } }* } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i64 <INT>
		<%ID> = lshr i64 <%ID>, <INT>                                                                                           

<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		store <2 x i64> <%ID>, <2 x i64>* <%ID>, align 16                                                                       
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       
		<%ID> = bitcast i32* <%ID> to <4 x i32>*                                                                                
		<%ID> = load i32*, i32** <%ID>, align 8                                                                                 

<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = load i32*, i32** <%ID>, align 8                                                                                 
		<%ID> = phi i32** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    
		<%ID> = bitcast { { i32*, i32*, { { i32* } } } }* <%ID> to i64*                                                         
		call void <@ID>({ { i32*, i32*, { { i32* } } } }* nonnull <%ID>, i32* nonnull dereferenceable(4) <%ID>)                 

<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = load i32*, i32** <%ID>, align 8                                                                                 
		<%ID> = or i1 <%ID>, <%ID>                                                                                              
		<%ID> = load i64*, i64** <%ID>, align 8                                                                                 
		<%ID> = bitcast { { [4 x i32] } }* <%ID> to i8*                                                                         

<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<%ID> = load i32*, i32** <%ID>, align 8                                                                                 
		<%ID> = icmp sgt i32 <%ID>, <INT>                                                                                       
		<%ID> = alloca i64*, align 8                                                                                            
		<%ID> = icmp eq i32* <%ID>, null                                                                                        

<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<%ID> = load i32*, i32** <%ID>, align 8                                                                                 
		<%ID> = getelementptr inbounds { i8, i8, i8, i8 }, { i8, i8, i8, i8 }* <%ID>, i64 <INT>, i32 <INT>                      
		<%ID> = alloca { { { { { { i64, i64, i8* } } } } } }*, align 8                                                          
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    

<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = load i32*, i32** <%ID>, align 8                                                                                 
		<%ID> = phi i32** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    
		<%ID> = load { { { i32*, i64 } } }*, { { { i32*, i64 } } }** <%ID>, align 8                                             
		invoke void <@ID>({ { i32*, i32*, { { i32* } } } }* nonnull <%ID>, i32* nonnull dereferenceable(4) <%ID>)
 to label <%ID> unwind label <%ID>

<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = load i32*, i32** <%ID>, align 8                                                                                 
		<%ID> = phi i32** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    
		<%ID> = getelementptr inbounds { { { i32*, i64 } } }, { { { i32*, i64 } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = icmp eq i32* <%ID>, null                                                                                        

<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
Nearest neighbors:
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast i32* <%ID> to <16 x i8>*                                                                                
		<%ID> = shufflevector <2 x i64> <%ID>, <2 x i64> <%ID>, <2 x i32> <i32 <INT>, i32 <INT>>                                

<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
expected answer:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
		<%ID> = xor <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = phi { double, double }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                      
		<%ID> = phi <4 x i64> [ <%ID>, <%ID> ], [ zeroinitializer, <%ID> ]                                                      
		store <4 x i64> <%ID>, <4 x i64>* <%ID>, align 1                                                                        

<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
expected answer:
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
Nearest neighbors:
		<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
		<%ID> = alloca <4 x float>, align 16                                                                                    
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> undef, <4 x i32> zeroinitializer                                   
		<%ID> = load float*, float** <%ID>, align 8                                                                             
		<%ID> = alloca { float*, i64 }, align 8                                                                                 

<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
expected answer:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast <2 x i64> <%ID> to <4 x float>                                                                          
		<%ID> = bitcast float* <%ID> to <4 x float>*                                                                            
		<%ID> = bitcast double* <%ID> to <2 x double>*                                                                          

<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast <2 x i64> <%ID> to <4 x float>                                                                          
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     

<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = shufflevector <2 x i64> <%ID>, <2 x i64> <%ID>, <2 x i32> <i32 <INT>, i32 <INT>>                                
		<%ID> = shufflevector <4 x i32> <%ID>, <4 x i32> <%ID>, <4 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>          
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = bitcast i32* <%ID> to <32 x i32>*                                                                               

<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = or <4 x i32> <%ID>, <%ID>                                                                                       
		<%ID> = bitcast <8 x i16> <%ID> to <4 x i32>                                                                            
		<%ID> = load <16 x i32>, <16 x i32>* <%ID>, align 4                                                                     

<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = and <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                               
		<%ID> = bitcast i32* <%ID> to <4 x i32>*                                                                                
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> undef, <4 x i32> zeroinitializer                                   

<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
expected answer:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = and <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            
		<%ID> = fcmp fast olt <4 x double> <%ID>, <%ID>                                                                         
		<%ID> = fadd <4 x double> <%ID>, <double <FLOAT>, double <FLOAT>, double <FLOAT>, double <FLOAT>>                       

<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
expected answer:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = phi float* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                   

<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast double* <%ID> to i64*                                                                                   
expected answer:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i64*                                                                                   
		<%ID> = lshr i64 <%ID>, <INT>                                                                                           
		<%ID> = phi i8* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      
		define linkonce_odr void <@ID>(i8*)                                                                                     
		<%ID> = ashr i64 <%ID>, <INT>                                                                                           

<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast double* <%ID> to i8*                                                                                    
expected answer:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i8*                                                                                    
		<%ID> = lshr i64 <%ID>, <INT>                                                                                           
		<%ID> = ptrtoint double* <%ID> to i64                                                                                   
		<%ID> = mul i64 <%ID>, <%ID>                                                                                            
		<%ID> = getelementptr double, double* <%ID>, i64 <%ID>                                                                  

<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast float <%ID> to i32                                                                                      
expected answer:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
Nearest neighbors:
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = select i1 <%ID>, float <%ID>, float <%ID>                                                                       
		<%ID> = fcmp fast ogt float <%ID>, <%ID>                                                                                
		<%ID> = phi i32 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      
		<%ID> = or i64 <%ID>, <INT>                                                                                             

<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast double <%ID> to i64                                                                                     
expected answer:
		<%ID> = bitcast i64 <%ID> to double                                                                                     
Nearest neighbors:
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = fcmp ogt double <%ID>, <%ID>                                                                                    
		<%ID> = phi i64 [ <%ID>, <%ID> ], [ undef, <%ID> ]                                                                      
		<%ID> = fcmp fast ogt double <%ID>, <%ID>                                                                               
		<%ID> = phi i64 [ 2, <%ID> ], [ 1, <%ID> ]                                                                              

<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast float* <%ID> to i8*                                                                                     
expected answer:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
Nearest neighbors:
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = getelementptr inbounds float, float* <%ID>, i64 <INT>                                                           
		<%ID> = load float*, float** <%ID>, align 8                                                                             
		<%ID> = mul i64 <%ID>, <%ID>                                                                                            
		<%ID> = icmp ult float* <%ID>, <%ID>                                                                                    

<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		<%ID> = phi i16* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                     
		<%ID> = getelementptr i16, i16* <%ID>, i64 <INT>                                                                        
		<%ID> = phi i16* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                   
		<%ID> = getelementptr inbounds i16, i16* <%ID>, i64 <%ID>                                                               

<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = lshr i64 <%ID>, <INT>                                                                                           
		<%ID> = bitcast { float }* <%ID> to i32*                                                                                
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = insertelement <8 x float> undef, float <%ID>, <TYP> 0                                                           

<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = shufflevector <2 x i64> <%ID>, <2 x i64> <%ID>, <2 x i32> <i32 <INT>, i32 <INT>>                                
		<%ID> = getelementptr inbounds { { i32*, i64 } }, { { i32*, i64 } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>             
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       

<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                 
		define linkonce_odr void <@ID>({ { i32*, i32*, { { i32* } } } }*, i32* dereferenceable(4)) local_unnamed_addr           
		<%ID> = getelementptr i32, i32* <%ID>, i64 <%ID>                                                                        
		call void <@ID>({ { i32*, i32*, { { i32* } } } }* nonnull <%ID>, i32* nonnull dereferenceable(4) <%ID>)                 

<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = mul i64 <%ID>, <%ID>                                                                                            
		<%ID> = getelementptr inbounds i32, i32* <%ID>, i64 <%ID>                                                               
		<%ID> = shl i64 <%ID>, <%ID>                                                                                            
		ret i64 <%ID>                                                                                                           

<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		define linkonce_odr void <@ID>({ { i32*, i32*, { { i32* } } } }*, i32* dereferenceable(4)) local_unnamed_addr           
		<%ID> = icmp ult i32* <%ID>, <%ID>                                                                                      
		store i32 <INT>, i32* <%ID>, align 4                                                                                    
		<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            

<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<%ID> = getelementptr inbounds { i8, i8, i8, i8 }, { i8, i8, i8, i8 }* <%ID>, i64 <INT>, i32 <INT>                      
		<%ID> = load i8, i8* <%ID>, align 8                                                                                     
		<@ID> = private unnamed_addr constant [64 x i8]  <STRING>, align 1                                                      
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            

<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = phi i32** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    
		<%ID> = load { { { i32*, i64 } } }*, { { { i32*, i64 } } }** <%ID>, align 8                                             
		define linkonce_odr void <@ID>({ { i32*, i32*, { { i32* } } } }*, i32* dereferenceable(4)) local_unnamed_addr           
		store i32* null, i32** <%ID>, align 8                                                                                   

<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ null, <%ID> ], [ null, <%ID> ]                                                     
		<%ID> = getelementptr inbounds { { i32*, i64, i64 } }, { { i32*, i64, i64 } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>   

<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
expected answer:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		<%ID> = xor <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = load { { double, double }*, { i8 }, { i64 } }*, { { double, double }*, { i8 }, { i64 } }** <%ID>, align 8       
		<%ID> = call { double, double } <@ID>({ double, double }* nonnull dereferenceable(16) <%ID>, { double, double }* nonnull dereferenceable(16) <%ID>)

<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
expected answer:
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
Nearest neighbors:
		<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		<%ID> = alloca <4 x float>, align 16                                                                                    
		<%ID> = getelementptr inbounds { { { { [17 x float] } } } }, { { { { [17 x float] } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i64 <INT>
		<%ID> = phi float [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    

<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
expected answer:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> <%ID>, <4 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>      
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     
		<%ID> = bitcast <2 x i64> <%ID> to <4 x float>                                                                          

<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		<%ID> = shufflevector <4 x i32> <%ID>, <4 x i32> undef, <4 x i32> <i32 <INT>, i32 undef, i32 <INT>, i32 undef>          
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     
		<%ID> = phi <4 x i32> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                

<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = load <4 x i32>, <4 x i32>* <%ID>, align 4                                                                       
		<%ID> = phi <4 x i32> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                

<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		<%ID> = tail call <16 x i8> <@ID>(<16 x i8> <%ID>, <16 x i8> <%ID>)                                                     
		<%ID> = bitcast <8 x i16> <%ID> to <4 x i32>                                                                            
		<%ID> = sub <8 x i16> <%ID>, <%ID>                                                                                      

<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		<%ID> = and <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                               
		invoke void <@ID>({ opaque* }* <%ID>)
 to label <%ID> unwind label <%ID>                                                
		<%ID> = phi float [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    

<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast double* <%ID> to i64*                                                                                   
expected answer:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i64*                                                                                   
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		<%ID> = phi i8* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      
		switch i32 <%ID>, label <%ID> [
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>]
		<%ID> = load { { double, double } }*, { { double, double } }** <%ID>, align 8                                           

<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast double* <%ID> to i8*                                                                                    
expected answer:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i8*                                                                                    
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		tail call void <@ID>(i8* <%ID>, i8 <INT>, i64 <%ID>, i32 <INT>, i1 false)                                               
		define linkonce_odr i64 <@ID>({ i8 }*, i8*, i64) local_unnamed_addr                                                     
		<%ID> = inttoptr i64 <%ID> to i8*                                                                                       

<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast float <%ID> to i32                                                                                      
expected answer:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
Nearest neighbors:
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		<%ID> = phi float [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    
		<%ID> = select i1 <%ID>, float <%ID>, float <%ID>                                                                       
		<%ID> = fmul float <%ID>, <%ID>                                                                                         

<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast double <%ID> to i64                                                                                     
expected answer:
		<%ID> = bitcast i64 <%ID> to double                                                                                     
Nearest neighbors:
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		<%ID> = select i1 <%ID>, double <%ID>, double <%ID>                                                                     
		<%ID> = phi float [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    
		<%ID> = fcmp ogt double <%ID>, <%ID>                                                                                    

<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast float* <%ID> to i8*                                                                                     
expected answer:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
Nearest neighbors:
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		define linkonce_odr void <@ID>({ { { float*, i64, i64 } } }* dereferenceable(24), <{ { i64 }, { i64 }, { float }, [4 x i8] }>* dereferenceable(24), { i8 }* dereferenceable(1)) local_unnamed_addr
		tail call void <@ID>(i8* <%ID>, i8 <INT>, i64 <%ID>, i32 <INT>, i1 false)                                               
		<%ID> = inttoptr i64 <%ID> to i8*                                                                                       

<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		store i16 <%ID>, i16* <%ID>, align 8                                                                                    
		<%ID> = phi i16 [ <%ID>, <%ID> ], [ 0, <%ID> ]                                                                          
		store i16 <%ID>, i16* <%ID>, align 4                                                                                    

<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		<%ID> = phi float [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    
		define linkonce_odr void <@ID>({ { { float*, i64, i64 } } }* dereferenceable(24), <{ { i64 }, { i64 }, { float }, [4 x i8] }>* dereferenceable(24), { i8 }* dereferenceable(1)) local_unnamed_addr
		<%ID> = inttoptr i64 <%ID> to i8*                                                                                       

<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		<%ID> = getelementptr inbounds { { i32*, i64 } }, { { i32*, i64 } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>             
		store <2 x i64> <%ID>, <2 x i64>* <%ID>, align 16                                                                       
		<%ID> = alloca { { { i32*, i64 } } }, align 8                                                                           

<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		invoke void <@ID>(i8* <%ID>, i8* bitcast (i8** <@ID> to i8*), i8* bitcast (void ({ { { i32 (...)** }, { i8* } } }*)* <@ID> to i8*))
 to label <%ID> unwind label <%ID>
		<@ID> = private unnamed_addr constant [36 x i8]  <STRING>, align 1                                                      
		<@ID> = private unnamed_addr constant [42 x i8]  <STRING>, align 1                                                      

<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		switch i32 <%ID>, label <%ID> [
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>]
		<%ID> = invoke i64 <@ID>({ i8 }* nonnull <%ID>, i8* <%ID>, i64 <%ID>)
 to label <%ID> unwind label <%ID>                
		<%ID> = inttoptr i64 <%ID> to i8*                                                                                       

<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		<@ID> = private unnamed_addr constant [54 x i8]  <STRING>, align 1                                                      
		<@ID> = private unnamed_addr constant [49 x i8]  <STRING>, align 1                                                      
		<@ID> = private unnamed_addr constant [37 x i8]  <STRING>, align 1                                                      

<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		invoke void <@ID>({ opaque* }* <%ID>)
 to label <%ID> unwind label <%ID>                                                
		<@ID> = private unnamed_addr constant [36 x i8]  <STRING>, align 1                                                      
		<%ID> = invoke i64 <@ID>({ i8 }* nonnull <%ID>, i8* <%ID>, i64 <%ID>)
 to label <%ID> unwind label <%ID>                

<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		<%ID> = load { { double, double } }*, { { double, double } }** <%ID>, align 8                                           
		<%ID> = getelementptr inbounds { { { i32*, i64 } } }, { { { i32*, i64 } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = phi i32** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    

<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = bitcast <16 x i8> <%ID> to <2 x i64>                                                                            
		<%ID> = getelementptr inbounds { { { i32*, i64 } } }, { { { i32*, i64 } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		invoke void <@ID>({ opaque* }* <%ID>)
 to label <%ID> unwind label <%ID>                                                

<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
expected answer:
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
Nearest neighbors:
		<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
		<%ID> = alloca <4 x float>, align 16                                                                                    
		store <4 x float> <%ID>, <4 x float>* <%ID>, align 16                                                                   
		<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = getelementptr inbounds <{ float*, { i8 }, [7 x i8] }>, <{ float*, { i8 }, [7 x i8] }>* <%ID>, i64 <INT>, i32 <INT>

<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
expected answer:
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> <%ID>, <4 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>      
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = phi <16 x i8> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         

<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = bitcast <2 x i64> <%ID> to <4 x float>                                                                          
		<%ID> = shufflevector <4 x i32> <%ID>, <4 x i32> undef, <4 x i32> <i32 <INT>, i32 undef, i32 <INT>, i32 undef>          
		<%ID> = shufflevector <4 x i32> <%ID>, <4 x i32> undef, <4 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>          

<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast i32* <%ID> to <4 x i32>*                                                                                
		<%ID> = shufflevector <2 x i64> <%ID>, <2 x i64> <%ID>, <2 x i32> <i32 <INT>, i32 <INT>>                                
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                

<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
		<%ID> = ashr <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                              
		<%ID> = call <4 x i32> <@ID>(<4 x i32> <%ID>)                                                                           
		<%ID> = bitcast <8 x i16> <%ID> to <4 x i32>                                                                            
		<%ID> = icmp slt <4 x i32> <%ID>, <%ID>                                                                                 

<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = and <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                               
		<%ID> = call fast <4 x float> <@ID>(<4 x float> <%ID>, <4 x float> <%ID>)                                               
		<%ID> = tail call fast <4 x float> <@ID>(<4 x float> <%ID>, <4 x float> <%ID>)                                          
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         

<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
expected answer:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = and <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = call fast <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            
		<%ID> = tail call fast <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                       

<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
expected answer:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = tail call fast <8 x float> <@ID>(<8 x float> <%ID>, <8 x float> <%ID>)                                          
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = and <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   
		<%ID> = phi <8 x float> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                              

<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
<%ID> = bitcast double* <%ID> to i64*                                                                                   
expected answer:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i64*                                                                                   
		<%ID> = bitcast { i32 (...)** }* <%ID> to i8*                                                                           
		<%ID> = phi i8* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      
		<%ID> = xor i64 <%ID>, <%ID>                                                                                            
		<%ID> = load i32, i32* <%ID>, align 8                                                                                   

<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
<%ID> = bitcast double* <%ID> to i8*                                                                                    
expected answer:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i8*                                                                                    
		<%ID> = bitcast { double }* <%ID> to i64*                                                                               
		<%ID> = bitcast { { { { { { { { { { i64, i64, i8* } } } } } }, { { { { { { { i64, i64, i8* } } } } } }, { { { i32 (...)** } }, { { i8* } }, { { { { { { { { i64, i64, i8* } } } } } }* } }, i32, [1 x i32] } }* }, opaque* }*, { i64, i64, i64, i64, i8**, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }*, i64 } }* <%ID> to i64*
		<@ID> = linkonce_odr unnamed_addr constant { [5 x i8*], [5 x i8*] } { [5 x i8*] [i8* inttoptr (i64 <INT> to i8*), i8* null, i8* bitcast (i8** <@ID> to i8*), i8* bitcast (void ({ i32 (...)**, i64, opaque }*)* <@ID> to i8*), i8* bitcast (void ({ i32 (...)**, i64, opaque }*)* <@ID> to i8*)], [5 x i8*] [i8* inttoptr (i64 <INT> to i8*), i8* inttoptr (i64 <INT> to i8*), i8* bitcast (i8** <@ID> to i8*), i8* bitcast (void ({ i32 (...)**, i64, opaque }*)* <@ID> to i8*), i8* bitcast (void ({ i32 (...)**, i64, opaque }*)* <@ID> to i8*)] }
		<%ID> = ptrtoint double* <%ID> to i64                                                                                   

<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
<%ID> = bitcast float <%ID> to i32                                                                                      
expected answer:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
Nearest neighbors:
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = select i1 <%ID>, float <%ID>, float <%ID>                                                                       
		<%ID> = phi float [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]              
		<%ID> = fcmp fast ogt float <%ID>, <%ID>                                                                                
		<%ID> = fcmp ogt float <%ID>, <%ID>                                                                                     

<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
<%ID> = bitcast double <%ID> to i64                                                                                     
expected answer:
		<%ID> = bitcast i64 <%ID> to double                                                                                     
Nearest neighbors:
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = phi i64 [ 2, <%ID> ], [ 1, <%ID> ]                                                                              
		<%ID> = phi i64 [ <%ID>, <%ID> ], [ undef, <%ID> ]                                                                      
		<%ID> = fcmp ogt double <%ID>, <%ID>                                                                                    

<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
<%ID> = bitcast float* <%ID> to i8*                                                                                     
expected answer:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
Nearest neighbors:
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		store i8 <INT>, i8* <%ID>, align 8                                                                                      
		<%ID> = getelementptr inbounds { <{ { { { float*, i64 } } }*, { { { float*, i64 } } }*, { i8 }, [7 x i8] }>, { { { float*, i64 } } }* }, { <{ { { { float*, i64 } } }*, { { { float*, i64 } } }*, { i8 }, [7 x i8] }>, { { { float*, i64 } } }* }* <%ID>, i64 <INT>, i32 <INT>
		<%ID> = bitcast i64* <%ID> to i8*                                                                                       

<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		store i16 <%ID>, i16* <%ID>, align 2                                                                                    
		<%ID> = select i1 <%ID>, i16 <INT>, i16 <%ID>                                                                           
		<%ID> = select i1 <%ID>, i16* <%ID>, i16* <%ID>                                                                         
		store i16 <%ID>, i16* <%ID>, align 8                                                                                    

<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = bitcast { float }* <%ID> to i32*                                                                                
		<%ID> = inttoptr i64 <%ID> to float*                                                                                    
		<%ID> = fsub float <%ID>, <%ID>                                                                                         
		<%ID> = extractelement <4 x float> <%ID>, <TYP> 0                                                                       

<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       
		<%ID> = bitcast i32* <%ID> to <4 x i32>*                                                                                
		<%ID> = bitcast i32** <%ID> to <4 x i32>**                                                                              
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      

<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = ptrtoint i32* <%ID> to i64                                                                                      
		invoke void <@ID>({ { { { { { i64, i64, i8* } } } } } }* nonnull sret <%ID>, i32 <%ID>)
 to label <%ID> unwind label <%ID>
		store i32* null, i32** <%ID>, align 8                                                                                   
		<%ID> = bitcast { { i32*, i32*, { { i32* } } } }* <%ID> to i64*                                                         

<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		ret i64 <%ID>                                                                                                           
		<%ID> = trunc i64 <%ID> to i32                                                                                          
		<%ID> = load i32**, i32*** <%ID>, align 8                                                                               
		<%ID> = lshr exact i32 <%ID>, <INT>                                                                                     

<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		define linkonce_odr void <@ID>({ { { { { i32, { { { { { { i64, i64, i8* } } } } } } }* } } } }* noalias sret, i8*) local_unnamed_addr
		<%ID> = alloca { { { double*, i64, i64 } } }, align 8                                                                   
		<%ID> = load { { { i32*, i64 } } }*, { { { i32*, i64 } } }** <%ID>, align 8                                             
		invoke void <@ID>({ { { { { { i64, i64, i8* } } } } } }* nonnull sret <%ID>, i32 <%ID>)
 to label <%ID> unwind label <%ID>

<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		invoke void <@ID>({ { { { { { i64, i64, i8* } } } } } }* nonnull sret <%ID>, i32 <%ID>)
 to label <%ID> unwind label <%ID>
		<%ID> = getelementptr inbounds { { [32 x i8] }, { i32 (...)** }*, [8 x i8] }, { { [32 x i8] }, { i32 (...)** }*, [8 x i8] }* <%ID>, i64 <INT>, i32 <INT>
		<%ID> = alloca { { i8*, i64 }, [32 x i8] }, align 8                                                                     
		<%ID> = bitcast i8** <%ID> to i8*                                                                                       

<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		store i32* null, i32** <%ID>, align 8                                                                                   
		<%ID> = load { { { i32*, i64 } } }*, { { { i32*, i64 } } }** <%ID>, align 8                                             
		store i32* <%ID>, i32** <%ID>, align 8                                                                                  
		store <{ { i32 }, { i8 }, [3 x i8] }>* <%ID>, <{ { i32 }, { i8 }, [3 x i8] }>** <%ID>, align 8                          

<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ null, <%ID> ], [ null, <%ID> ]                                                     
		<%ID> = load i32**, i32*** <%ID>, align 8                                                                               
		<%ID> = phi { { { i32 (...)** } }, { { i8* } }, { { { i32 (...)** } }, { { i8* } }, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, i8, i32 }*, <{ { { i32 (...)** } }, { { i8* } }, { i32, i32, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }, i32, [4 x i8], { i32, i32, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }, i32, [4 x i8], { i32, i32, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }, i32, [4 x i8], { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, { i32, i32, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }, i32, [4 x i8], { i32, i32, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }, i32, [4 x i8], { i32, i32, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }, i32, [4 x i8], { i32, i32, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }, i32, [4 x i8], { i32, i32, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }, i32, [4 x i8], { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, { i32, i32, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }, i32, [4 x i8], { i32, i32, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }, i32, [4 x i8], { { { { { { { i64, i64, i8* } } } } } }* }, { { { i32 (...)** } }, { { i8* } }, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, i8, i32 }*, i32, i32, i32, [4 x i8] }>*, i32, i32 }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]

<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
		<%ID> = tail call <2 x i64> <@ID>(<4 x i32> <%ID>, <4 x i32> <%ID>)                                                     
		<%ID> = bitcast i8* <%ID> to <4 x i32>*                                                                                 
		<%ID> = phi <4 x i32> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                

<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
		<%ID> = bitcast i8* <%ID> to <4 x i32>*                                                                                 
		store <2 x i64> <%ID>, <2 x i64>* <%ID>, align 1                                                                        
		<%ID> = load <4 x i32>, <4 x i32>* <%ID>, align 1                                                                       

<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
		<%ID> = bitcast <8 x i16> <%ID> to <4 x i32>                                                                            
		<%ID> = shufflevector <8 x i16> <%ID>, <8 x i16> <%ID>, <8 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>
		<%ID> = sub <8 x i16> <%ID>, <%ID>                                                                                      

<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
		<%ID> = and <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                               
		<%ID> = bitcast i8* <%ID> to <4 x i32>*                                                                                 
		<%ID> = load volatile i64, i64* <@ID>, align 8                                                                          

<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
expected answer:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            
		<%ID> = and <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                                 

<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
expected answer:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
		<%ID> = xor <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   
		<%ID> = insertelement <32 x i8> undef, <TYP> <%ID>, <TYP> 0                                                             
		<%ID> = phi i64 [ 0, <%ID> ], [ 32, <%ID> ]                                                                             

<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
<%ID> = bitcast double* <%ID> to i64*                                                                                   
expected answer:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
		<%ID> = bitcast double* <%ID> to i64*                                                                                   
		<%ID> = bitcast i8* <%ID> to i64*                                                                                       
		<%ID> = phi i8* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      
		<%ID> = icmp ugt i32 <%ID>, <INT>                                                                                       

<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
<%ID> = bitcast double* <%ID> to i8*                                                                                    
expected answer:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
		<%ID> = bitcast double* <%ID> to i8*                                                                                    
		<%ID> = load double, double* <%ID>, align 8                                                                             
		<%ID> = phi i8* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ null, <%ID> ]                                                     
		<%ID> = getelementptr double, double* <%ID>, i64 <INT>                                                                  

<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
<%ID> = bitcast float <%ID> to i32                                                                                      
expected answer:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
Nearest neighbors:
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
		<%ID> = phi i32 [ <%ID>, <%ID> ], [ undef, <%ID> ]                                                                      
		<%ID> = select i1 <%ID>, float <%ID>, float <%ID>                                                                       
		<%ID> = phi float [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]              

<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
<%ID> = bitcast double <%ID> to i64                                                                                     
expected answer:
		<%ID> = bitcast i64 <%ID> to double                                                                                     
Nearest neighbors:
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
		<%ID> = fcmp ogt double <%ID>, <%ID>                                                                                    
		<%ID> = select i1 <%ID>, double <%ID>, double <%ID>                                                                     
		<%ID> = fcmp fast ogt double <%ID>, <%ID>                                                                               

<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
<%ID> = bitcast float* <%ID> to i8*                                                                                     
expected answer:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = phi i8* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ null, <%ID> ]                                                     
		<%ID> = load volatile i64, i64* <%ID>, align 8                                                                          
		invoke void <%ID>(<{ i32 (...)**, i32, [4 x i8] }>* nonnull <%ID>)
 to label <%ID> unwind label <%ID>                   

<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = inttoptr i64 <%ID> to <8 x float>*                                                                              
		<%ID> = load <8 x float>, <8 x float>* <%ID>, align 4                                                                   
		<%ID> = phi i8* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ null, <%ID> ]                                                     

<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = bitcast i8* <%ID> to <4 x i32>*                                                                                 
		<%ID> = load <2 x i64>, <2 x i64>* <%ID>, align 32                                                                      
		<%ID> = load <2 x i64>, <2 x i64>* <%ID>, align 16                                                                      

<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = getelementptr inbounds { i32 }, { i32 }* <%ID>, i64 <%ID>, i32 <INT>                                            
		<%ID> = inttoptr i64 <%ID> to { { i32*, i64 } }*                                                                        
		<%ID> = inttoptr i64 <%ID> to i32*                                                                                      

<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = load <{ { { { { { { i64, i64, i8* } } } } } }, i32, [4 x i8] }>*, <{ { { { { { { i64, i64, i8* } } } } } }, i32, [4 x i8] }>** <%ID>, align 8
		switch i32 <%ID>, label <%ID> [
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>]
		<%ID> = udiv i32 <%ID>, <INT>                                                                                           

<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<%ID> = and i1 <%ID>, <%ID>                                                                                             
		<%ID> = tail call i64 <@ID>(i8* nonnull <%ID>)                                                                          
		define linkonce_odr void <@ID>({ { { { { { { { i64*, [40 x i8] } }* }*, [8 x i8] }, i64 } } }, { <{ i32 (...)**, { { { i32 } } } }>, [4 x i8] }* }*, i64*, i64, { [2 x i64] }*) local_unnamed_addr

<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i64*                                                                     
		<%ID> = insertelement <32 x i8> undef, <TYP> <%ID>, <TYP> 0                                                             
		invoke void <%ID>(<{ i32 (...)**, i32, [4 x i8] }>* nonnull <%ID>)
 to label <%ID> unwind label <%ID>                   

<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
		<%ID> = phi i8* [ <%ID>, <%ID> ], [ null, <%ID> ], [ <%ID>, <%ID> ]                                                     
		<%ID> = inttoptr i64 <%ID> to { { i32*, i64 } }*                                                                        
		<%ID> = bitcast i8* <%ID> to <4 x i32>*                                                                                 

<%ID> = bitcast <4 x float>* <%ID> to i8*                                                                               
<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = bitcast i8* <%ID> to <4 x float>*                                                                               
		<%ID> = phi i8* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ null, <%ID> ]                                                     
		<%ID> = load <2 x i64>, <2 x i64>* <%ID>, align 32                                                                      
		<%ID> = phi i32* [ null, <%ID> ], [ <%ID>, <%ID> ], [ null, <%ID> ]                                                     

<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
expected answer:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = shufflevector <4 x float> <%ID>, <4 x float> undef, <4 x i32> <i32 <INT>, i32 <INT>, i32 undef, i32 undef>      
		<%ID> = phi <4 x i32> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                
		<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  

<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = shufflevector <2 x i64> <%ID>, <2 x i64> <%ID>, <2 x i32> <i32 <INT>, i32 <INT>>                                
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = phi <4 x i32> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                

<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast <8 x i16> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = tail call <16 x i8> <@ID>(<16 x i8> <%ID>, <16 x i8> <%ID>)                                                     
		<%ID> = or <4 x i32> <%ID>, <%ID>                                                                                       

<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = and <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                               
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = tail call fast <4 x float> <@ID>(<4 x float> <%ID>, <4 x float> <%ID>)                                          
		<%ID> = call fast <4 x float> <@ID>(<4 x float> <%ID>, <4 x float> <%ID>)                                               

<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
expected answer:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            
		<%ID> = and <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = call fast <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            
		<%ID> = tail call fast <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                       

<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
expected answer:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = tail call fast <8 x float> <@ID>(<8 x float> <%ID>, <8 x float> <%ID>)                                          
		<%ID> = xor <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   
		<%ID> = tail call <8 x float> <@ID>(<8 x float> <%ID>, <8 x float> <%ID>)                                               
		<%ID> = and <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   

<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast double* <%ID> to i64*                                                                                   
expected answer:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i64*                                                                                   
		<%ID> = getelementptr inbounds { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x double] }, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x double] }* <%ID>, i64 <INT>, i32 <INT>, i64 <%ID>
		<%ID> = trunc i64 <%ID> to i8                                                                                           
		<%ID> = xor i64 <%ID>, <%ID>                                                                                            
		<%ID> = phi i8* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      

<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast double* <%ID> to i8*                                                                                    
expected answer:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i8*                                                                                    
		<%ID> = getelementptr double, double* <%ID>, i64 <%ID>                                                                  
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		call void <@ID>({ { { double*, i64 } } }* nonnull dereferenceable(16) <%ID>, { { { { { double*, i64 } } }* }, { { { { double*, i64, i64 } } }* } }* nonnull dereferenceable(16) <%ID>, { i8 }* nonnull dereferenceable(1) <%ID>, i8* null)
		<%ID> = load double, double* <%ID>, align 8                                                                             

<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast float <%ID> to i32                                                                                      
expected answer:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
Nearest neighbors:
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = phi float [ undef, <%ID> ], [ <%ID>, <%ID> ]                                                                    
		<%ID> = select i1 <%ID>, float <%ID>, float <%ID>                                                                       
		<%ID> = fcmp ogt float <%ID>, <%ID>                                                                                     
		<%ID> = phi float [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]              

<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast double <%ID> to i64                                                                                     
expected answer:
		<%ID> = bitcast i64 <%ID> to double                                                                                     
Nearest neighbors:
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = fcmp ogt double <%ID>, <%ID>                                                                                    
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = select i1 <%ID>, double <%ID>, double <%ID>                                                                     
		<%ID> = phi i64 [ <%ID>, <%ID> ], [ undef, <%ID> ]                                                                      

<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast float* <%ID> to i8*                                                                                     
expected answer:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
Nearest neighbors:
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = bitcast double* <%ID> to i8*                                                                                    
		<%ID> = bitcast i64* <%ID> to i8*                                                                                       
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = trunc i64 <%ID> to i8                                                                                           

<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		<%ID> = phi i16* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                     
		store i16 <%ID>, i16* <%ID>, align 2                                                                                    
		<%ID> = getelementptr inbounds i16, i16* <%ID>, i64 <INT>                                                               
		<%ID> = bitcast i16* <%ID> to <16 x i16>*                                                                               

<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = phi float [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]
		<%ID> = inttoptr i64 <%ID> to <8 x float>*                                                                              
		<%ID> = sitofp i64 <%ID> to float                                                                                       
		<%ID> = bitcast { float }* <%ID> to i32*                                                                                

<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = load <2 x i64>, <2 x i64>* <%ID>, align 16                                                                      
		<%ID> = call fast <2 x double> <@ID>(<2 x double> <%ID>, <2 x double> <%ID>)                                            
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       

<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		define linkonce_odr void <@ID>({ { i32*, i32*, { { i32* } } } }*, i32* dereferenceable(4)) local_unnamed_addr           
		<@ID> = linkonce_odr unnamed_addr constant { [16 x i8*] } { [16 x i8*] [i8* null, i8* bitcast ({ i8*, i8*, i8* }* <@ID> to i8*), i8* bitcast (void (<{ { i32 (...)**, { opaque* }, i8*, i8*, i8*, i8*, i8*, i8* }, { { { { { { i64, i64, i8* } } } } } }, i8*, i32, [4 x i8] }>*)* <@ID> to i8*), i8* bitcast (void (<{ { i32 (...)**, { opaque* }, i8*, i8*, i8*, i8*, i8*, i8* }, { { { { { { i64, i64, i8* } } } } } }, i8*, i32, [4 x i8] }>*)* <@ID> to i8*), i8* bitcast (void ({ i32 (...)**, { opaque* }, i8*, i8*, i8*, i8*, i8*, i8* }*, { opaque* }*)* <@ID> to i8*), i8* bitcast ({ i32 (...)**, { opaque* }, i8*, i8*, i8*, i8*, i8*, i8* }* ({ i32 (...)**, { opaque* }, i8*, i8*, i8*, i8*, i8*, i8* }*, i8*, i64)* <@ID> to i8*), i8* bitcast (void ({ { i64, [120 x i8] }, i64 }*, <{ { i32 (...)**, { opaque* }, i8*, i8*, i8*, i8*, i8*, i8* }, { { { { { { i64, i64, i8* } } } } } }, i8*, i32, [4 x i8] }>*, i64, i32, i32)* <@ID> to i8*), i8* bitcast (void ({ { i64, [120 x i8] }, i64 }*, <{ { i32 (...)**, { opaque* }, i8*, i8*, i8*, i8*, i8*, i8* }, { { { { { { i64, i64, i8* } } } } } }, i8*, i32, [4 x i8] }>*, { { i64, [120 x i8] }, i64 }*, i32)* <@ID> to i8*), i8* bitcast (i32 ({ i32 (...)**, { opaque* }, i8*, i8*, i8*, i8*, i8*, i8* }*)* <@ID> to i8*), i8* bitcast (i64 ({ i32 (...)**, { opaque* }, i8*, i8*, i8*, i8*, i8*, i8* }*)* <@ID> to i8*), i8* bitcast (i64 ({ i32 (...)**, { opaque* }, i8*, i8*, i8*, i8*, i8*, i8* }*, i8*, i64)* <@ID> to i8*), i8* bitcast (i32 (<{ { i32 (...)**, { opaque* }, i8*, i8*, i8*, i8*, i8*, i8* }, { { { { { { i64, i64, i8* } } } } } }, i8*, i32, [4 x i8] }>*)* <@ID> to i8*), i8* bitcast (i32 ({ i32 (...)**, { opaque* }, i8*, i8*, i8*, i8*, i8*, i8* }*)* <@ID> to i8*), i8* bitcast (i32 (<{ { i32 (...)**, { opaque* }, i8*, i8*, i8*, i8*, i8*, i8* }, { { { { { { i64, i64, i8* } } } } } }, i8*, i32, [4 x i8] }>*, i32)* <@ID> to i8*), i8* bitcast (i64 ({ i32 (...)**, { opaque* }, i8*, i8*, i8*, i8*, i8*, i8* }*, i8*, i64)* <@ID> to i8*), i8* bitcast (i32 (<{ { i32 (...)**, { opaque* }, i8*, i8*, i8*, i8*, i8*, i8* }, { { { { { { i64, i64, i8* } } } } } }, i8*, i32, [4 x i8] }>*, i32)* <@ID> to i8*)] }, align 8
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      

<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		ret i64 <%ID>                                                                                                           
		<%ID> = lshr i64 <%ID>, <%ID>                                                                                           
		<%ID> = mul nsw i128 <%ID>, <%ID>                                                                                       
		<%ID> = trunc i64 <%ID> to i32                                                                                          

<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		call void <@ID>({ { { double*, i64 } } }* nonnull dereferenceable(16) <%ID>, { { { { { double*, i64 } } }* }, { { { { double*, i64, i64 } } }* } }* nonnull dereferenceable(16) <%ID>, { i8 }* nonnull dereferenceable(1) <%ID>, i8* null)
		store i8 <INT>, i8* <%ID>, align 2                                                                                      
		<%ID> = getelementptr inbounds { <{ { { { i32*, i64 } } }*, { { { i32*, i64 } } }*, { i8 }, [7 x i8] }>, { { { i32*, i64, i64 } } }* }, { <{ { { { i32*, i64 } } }*, { { { i32*, i64 } } }*, { i8 }, [7 x i8] }>, { { { i32*, i64, i64 } } }* }* <%ID>, i64 <INT>, i32 <INT>
		define linkonce_odr void <@ID>({ { i32*, i32*, { { i32* } } } }*, i32* dereferenceable(4)) local_unnamed_addr           

<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		store i8 <INT>, i8* <%ID>, align 2                                                                                      
		store i16 <INT>, i16* <%ID>, align 8                                                                                    
		<%ID> = phi { opaque* }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                             
		store volatile i32 <INT>, i32* <%ID>, align 4                                                                           

<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		store i32* <%ID>, i32** <%ID>, align 8                                                                                  
		store i32* null, i32** <%ID>, align 8                                                                                   
		<%ID> = icmp eq i32* <%ID>, <%ID>                                                                                       
		switch i64 <%ID>, label <%ID> [
 i64 <INT>, label <%ID>
 i64 <INT>, label <%ID>]                                        

<%ID> = bitcast <4 x float> <%ID> to <2 x double>                                                                       
<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = bitcast <2 x double> <%ID> to <4 x float>                                                                       
		<%ID> = phi i32* [ null, <%ID> ], [ <%ID>, <%ID> ], [ null, <%ID> ]                                                     
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ null, <%ID> ], [ null, <%ID> ]                                                     
		<%ID> = trunc i64 <%ID> to i8                                                                                           

<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
expected answer:
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = and <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                               
		<%ID> = bitcast i32* <%ID> to <4 x i32>*                                                                                
		<%ID> = shufflevector <2 x i64> <%ID>, <2 x i64> <%ID>, <2 x i32> <i32 <INT>, i32 <INT>>                                

<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
		<%ID> = and <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                               
		<%ID> = tail call <16 x i8> <@ID>(<16 x i8> <%ID>, <16 x i8> <%ID>)                                                     
		<%ID> = ashr <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                              

<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = and <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                               
		<%ID> = tail call fast <4 x float> <@ID>(<4 x float> <%ID>, <4 x float> <%ID>)                                          
		<%ID> = getelementptr inbounds { <{ { { { float*, i64, i64 } } }, { { { float*, i64, i64 } } }, { { { float*, i64 } } }, i8, i8, i8, i8, i8, i8, i8, i8, i32, [4 x i8], i64, i64, i64, i64, float }>, { { { float*, i64, i64 } } }, { { { { { float*, i64, i64 } } }, { { { float*, i64 } } }, { { { { i32*, i64 } } } }, { { { i64*, i64 } } }, { { { float*, i64 } } }, { { { float*, i64 } } }, { { { float*, i64 } } }, i8, i8, float, float, i64, i64 }, { { { float*, i64, i64 } } }, { { { float*, i64 } } } }, { { { { { float*, i64, i64 } } }, { { { float*, i64 } } }, { { { { i32*, i64 } } } }, { { { i64*, i64 } } }, { { { float*, i64 } } }, { { { float*, i64 } } }, { { { float*, i64 } } }, i8, i8, float, float, i64, i64 }, { { { float*, i64 } } } }, { { { float*, i64, i64 } } } }, { <{ { { { float*, i64, i64 } } }, { { { float*, i64, i64 } } }, { { { float*, i64 } } }, i8, i8, i8, i8, i8, i8, i8, i8, i32, [4 x i8], i64, i64, i64, i64, float }>, { { { float*, i64, i64 } } }, { { { { { float*, i64, i64 } } }, { { { float*, i64 } } }, { { { { i32*, i64 } } } }, { { { i64*, i64 } } }, { { { float*, i64 } } }, { { { float*, i64 } } }, { { { float*, i64 } } }, i8, i8, float, float, i64, i64 }, { { { float*, i64, i64 } } }, { { { float*, i64 } } } }, { { { { { float*, i64, i64 } } }, { { { float*, i64 } } }, { { { { i32*, i64 } } } }, { { { i64*, i64 } } }, { { { float*, i64 } } }, { { { float*, i64 } } }, { { { float*, i64 } } }, i8, i8, float, float, i64, i64 }, { { { float*, i64 } } } }, { { { float*, i64, i64 } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = phi i64 [ 8, <%ID> ], [ 16, <%ID> ]                                                                             

<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
expected answer:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = and <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            
		<%ID> = call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                                 

<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
expected answer:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = and <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   
		<%ID> = xor <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   
		<%ID> = phi <8 x float> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                              

<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
<%ID> = bitcast double* <%ID> to i64*                                                                                   
expected answer:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i64*                                                                                   
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = getelementptr inbounds { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x i64] }, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x i64] }* <%ID>, i64 <INT>, i32 <INT>, i64 <%ID>
		<%ID> = call dereferenceable(24) { { { { { { { { { i64, i64, i8* } } } } } }, { { { { { { { i64, i64, i8* } } } } } }, { { { i32 (...)** } }, { { i8* } }, { { { { { { { { i64, i64, i8* } } } } } }* } }, i32, [1 x i32] } }* }, opaque* }*, { i64, i64, i64, i64, i8**, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }*, i64 }* <@ID>({ { { { { { { { { i64, i64, i8* } } } } } }, { { { { { { { i64, i64, i8* } } } } } }, { { { i32 (...)** } }, { { i8* } }, { { { { { { { { i64, i64, i8* } } } } } }* } }, i32, [1 x i32] } }* }, opaque* }*, { i64, i64, i64, i64, i8**, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }*, i64 }* nonnull <%ID>)
		<%ID> = getelementptr inbounds { { opaque*, { { opaque, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } } }, { { i64 } } } }, { { opaque*, { { opaque, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } } }, { { i64 } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>

<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
<%ID> = bitcast double* <%ID> to i8*                                                                                    
expected answer:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = bitcast double* <%ID> to i8*                                                                                    
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = load i8, i8* <%ID>, align 8                                                                                     
		<%ID> = bitcast i8*** <%ID> to i8**                                                                                     

<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
<%ID> = bitcast float <%ID> to i32                                                                                      
expected answer:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
Nearest neighbors:
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = fcmp fast olt float <%ID>, <%ID>                                                                                
		<%ID> = fcmp olt float <%ID>, <%ID>                                                                                     
		<%ID> = tail call fast <4 x float> <@ID>(<4 x float> <%ID>, <4 x float> <%ID>)                                          

<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
<%ID> = bitcast double <%ID> to i64                                                                                     
expected answer:
		<%ID> = bitcast i64 <%ID> to double                                                                                     
Nearest neighbors:
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = select i1 <%ID>, double <%ID>, double <%ID>                                                                     
		<%ID> = fcmp ogt double <%ID>, <%ID>                                                                                    
		<%ID> = fcmp fast ogt double <%ID>, <%ID>                                                                               

<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
<%ID> = bitcast float* <%ID> to i8*                                                                                     
expected answer:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
Nearest neighbors:
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = getelementptr inbounds float, float* <%ID>, i64 <INT>                                                           
		<%ID> = bitcast i64* <%ID> to i8*                                                                                       
		<%ID> = load i8*, i8** <%ID>, align 8                                                                                   

<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = load i16, i16* <%ID>, align 8                                                                                   
		<%ID> = bitcast i8*** <%ID> to i8**                                                                                     
		store i16 <%ID>, i16* <%ID>, align 8                                                                                    

<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = inttoptr i64 <%ID> to float*                                                                                    
		<%ID> = getelementptr inbounds { float, float }, { float, float }* <%ID>, i64 <INT>, i32 <INT>                          
		<%ID> = getelementptr inbounds float, float* <%ID>, i64 <INT>                                                           

<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = bitcast i32* <%ID> to <4 x i32>*                                                                                
		store <2 x i64> <%ID>, <2 x i64>* <%ID>, align 16                                                                       
		<%ID> = and <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                               

<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = bitcast { i32, i16 }* <%ID> to i64*                                                                             
		<%ID> = bitcast { double*, i32*, i64, i64 }* <%ID> to i64*                                                              
		<%ID> = ptrtoint i32* <%ID> to i64                                                                                      

<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = bitcast { i32, i16 }* <%ID> to i64*                                                                             
		tail call void <@ID>({ { i64 }, { { { { { i32 } } } } }, { { i32 } }, { opaque*, opaque* } }* <%ID>)                    
		<%ID> = phi i64* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                 

<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<%ID> = bitcast { i32, i16 }* <%ID> to i64*                                                                             
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<%ID> = bitcast i64* <%ID> to i8*                                                                                       

<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = bitcast { { { { { { { { { i64, i64, i8* } } } } } }, { { { { { { { i64, i64, i8* } } } } } }, { { { i32 (...)** } }, { { i8* } }, { { { { { { { { i64, i64, i8* } } } } } }* } }, i32, [1 x i32] } }* }, opaque* }*, { i64, i64, i64, i64, i8**, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }*, i64 }* <%ID> to i8*
		<%ID> = bitcast i8** <%ID> to i8*                                                                                       
		invoke void <@ID>({ { { { { { i64, i64, i8* } } } } } }* nonnull <%ID>, i8 signext <%ID>)
 to label <%ID> unwind label <%ID>

<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = bitcast { i32, i16 }* <%ID> to i64*                                                                             
		<%ID> = getelementptr inbounds { { { i8 } }, i64, i64, i32*, i32*, { { { float, float } }*, i32*, i64, i64 } }, { { { i8 } }, i64, i64, i32*, i32*, { { { float, float } }*, i32*, i64, i64 } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ null, <%ID> ], [ <%ID>, <%ID> ]                                                    

<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = bitcast i64* <%ID> to i8**                                                                                      
		<%ID> = getelementptr inbounds { <{ { { { float*, i64, i64 } } }, { { { float*, i64, i64 } } }, { { { float*, i64 } } }, i8, i8, i8, i8, i8, i8, i8, i8, i32, [4 x i8], i64, i64, i64, i64, float }>, { { { float*, i64, i64 } } }, { { { { { float*, i64, i64 } } }, { { { float*, i64 } } }, { { { { i32*, i64 } } } }, { { { i64*, i64 } } }, { { { float*, i64 } } }, { { { float*, i64 } } }, { { { float*, i64 } } }, i8, i8, float, float, i64, i64 }, { { { float*, i64, i64 } } }, { { { float*, i64 } } } }, { { { { { float*, i64, i64 } } }, { { { float*, i64 } } }, { { { { i32*, i64 } } } }, { { { i64*, i64 } } }, { { { float*, i64 } } }, { { { float*, i64 } } }, { { { float*, i64 } } }, i8, i8, float, float, i64, i64 }, { { { float*, i64 } } } }, { { { float*, i64, i64 } } } }, { <{ { { { float*, i64, i64 } } }, { { { float*, i64, i64 } } }, { { { float*, i64 } } }, i8, i8, i8, i8, i8, i8, i8, i8, i32, [4 x i8], i64, i64, i64, i64, float }>, { { { float*, i64, i64 } } }, { { { { { float*, i64, i64 } } }, { { { float*, i64 } } }, { { { { i32*, i64 } } } }, { { { i64*, i64 } } }, { { { float*, i64 } } }, { { { float*, i64 } } }, { { { float*, i64 } } }, i8, i8, float, float, i64, i64 }, { { { float*, i64, i64 } } }, { { { float*, i64 } } } }, { { { { { float*, i64, i64 } } }, { { { float*, i64 } } }, { { { { i32*, i64 } } } }, { { { i64*, i64 } } }, { { { float*, i64 } } }, { { { float*, i64 } } }, { { { float*, i64 } } }, i8, i8, float, float, i64, i64 }, { { { float*, i64 } } } }, { { { float*, i64, i64 } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		call void <@ID>({ { { { double*, i64, i64 } } }, { { { double*, i64 } } }, { { { i64*, i64 } } }, { { { i64*, i64 } } }, { { { { i32*, i64 } } } }, { { { double*, i64 } } }, i8, i8, double, double, i64, double, i64 }* nonnull <%ID>, { i8 }* nonnull dereferenceable(1) <%ID>)

<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
expected answer:
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast <8 x i16> <%ID> to <4 x i32>                                                                            
		<%ID> = tail call <16 x i8> <@ID>(<16 x i8> <%ID>, <16 x i8> <%ID>)                                                     
		<%ID> = or <4 x i32> <%ID>, <%ID>                                                                                       

<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		<%ID> = call fast <4 x float> <@ID>(<4 x float> <%ID>, <4 x float> <%ID>)                                               
		<%ID> = and <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                               
		<%ID> = tail call fast <4 x float> <@ID>(<4 x float> <%ID>, <4 x float> <%ID>)                                          

<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
expected answer:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = call fast <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            
		<%ID> = and <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = tail call fast <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                       
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            

<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
expected answer:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = tail call fast <8 x float> <@ID>(<8 x float> <%ID>, <8 x float> <%ID>)                                          
		<%ID> = phi <8 x float> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                            
		<%ID> = xor <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            

<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast double* <%ID> to i64*                                                                                   
expected answer:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i64*                                                                                   
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		<%ID> = trunc i64 <%ID> to i8                                                                                           
		<%ID> = getelementptr inbounds { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x double] }, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x double] }* <%ID>, i64 <INT>, i32 <INT>, i64 <%ID>
		<%ID> = phi i8* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      

<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast double* <%ID> to i8*                                                                                    
expected answer:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i8*                                                                                    
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		<%ID> = getelementptr double, double* <%ID>, i64 <INT>                                                                  
		<%ID> = call i8* <@ID>(i32 <%ID>)                                                                                       
		<%ID> = getelementptr double, double* <%ID>, i64 <%ID>                                                                  

<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast float <%ID> to i32                                                                                      
expected answer:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
Nearest neighbors:
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = select i1 <%ID>, float <%ID>, float <%ID>                                                                       
		<%ID> = fcmp olt float <%ID>, <%ID>                                                                                     
		<%ID> = phi i32 [ <%ID>, <%ID> ], [ undef, <%ID> ]                                                                      
		<%ID> = fptosi float <%ID> to i32                                                                                       

<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast double <%ID> to i64                                                                                     
expected answer:
		<%ID> = bitcast i64 <%ID> to double                                                                                     
Nearest neighbors:
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = select i1 <%ID>, double <%ID>, double <%ID>                                                                     
		<%ID> = fcmp ogt double <%ID>, <%ID>                                                                                    
		<%ID> = tail call double <@ID>(double <%ID>)                                                                            
		<%ID> = fcmp olt double <%ID>, <%ID>                                                                                    

<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast float* <%ID> to i8*                                                                                     
expected answer:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
Nearest neighbors:
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = load i8*, i8** <%ID>, align 8                                                                                   
		<%ID> = getelementptr inbounds { { { { [17 x float] } } } }, { { { { [17 x float] } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i64 <INT>
		<%ID> = bitcast i64* <%ID> to i8*                                                                                       
		<%ID> = bitcast float* <%ID> to i8**                                                                                    

<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		store i16 <%ID>, i16* <%ID>, align 2                                                                                    
		<%ID> = phi i16 [ <%ID>, <%ID> ], [ 0, <%ID> ]                                                                          
		<%ID> = getelementptr inbounds i16, i16* <%ID>, i64 <INT>                                                               
		<%ID> = load i16, i16* <%ID>, align 2                                                                                   

<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = getelementptr inbounds { { { i8 }, { { { { <{ float*, { i8 } }> }, { { { float*, i64 } } } } } }, { <{ { float }, { i8 } }>, [3 x i8] } } }, { { { i8 }, { { { { <{ float*, { i8 } }> }, { { { float*, i64 } } } } } }, { <{ { float }, { i8 } }>, [3 x i8] } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		<%ID> = getelementptr inbounds { { { i8 }, { { { { <{ float*, { i8 } }> }, { { { float*, i64 } } } } } }, { <{ { float }, { i8 } }>, [3 x i8] } } }, { { { i8 }, { { { { <{ float*, { i8 } }> }, { { { float*, i64 } } } } } }, { <{ { float }, { i8 } }>, [3 x i8] } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = getelementptr inbounds { { { i8 }, { { { { <{ float*, { i8 } }> }, { { { float*, i64 } } } } } }, { <{ { float }, { i8 } }>, [3 x i8] } } }, { { { i8 }, { { { { <{ float*, { i8 } }> }, { { { float*, i64 } } } } } }, { <{ { float }, { i8 } }>, [3 x i8] } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>

<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		<%ID> = load <2 x i64>, <2 x i64>* <%ID>, align 16                                                                      
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       
		<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      

<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast { { i32*, i32*, { { i32* } } } }* <%ID> to i64*                                                         
		call void <@ID>({ { i32*, i32*, { { i32* } } } }* nonnull <%ID>, i32* nonnull dereferenceable(4) <%ID>)                 
		store i16 <INT>, i16* <%ID>, align 8                                                                                    

<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		<%ID> = call i32 <@ID>(i32 <%ID>)                                                                                       
		<%ID> = load i64*, i64** <%ID>, align 8                                                                                 
		<%ID> = trunc i64 <%ID> to i32                                                                                          

<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		<%ID> = call i32 <@ID>(i32 <%ID>)                                                                                       
		<%ID> = icmp sgt i32 <%ID>, <INT>                                                                                       
		<%ID> = call i8* <@ID>(i32 <%ID>)                                                                                       

<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		<%ID> = call i32 <@ID>(i32 <%ID>)                                                                                       
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
		<%ID> = tail call i64 <@ID>(i8* <%ID>)                                                                                  

<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		store i32* <%ID>, i32** <%ID>, align 8                                                                                  
		<%ID> = call i32 <@ID>(i32 <%ID>)                                                                                       
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		switch i64 <%ID>, label <%ID> [
 i64 <INT>, label <%ID>
 i64 <INT>, label <%ID>]                                        

<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = bitcast <2 x i64> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast i64* <%ID> to i8**                                                                                      
		<%ID> = phi i32 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                    
		<%ID> = phi i32* [ null, <%ID> ], [ <%ID>, <%ID> ], [ null, <%ID> ]                                                     

<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
expected answer:
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = and <4 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>                                               
		<%ID> = shufflevector <16 x i8> <%ID>, <16 x i8> <%ID>, <16 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>
		<%ID> = load <16 x i8>, <16 x i8>* <%ID>, align 16                                                                      

<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
expected answer:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = and <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = tail call <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                            
		<%ID> = tail call fast <4 x double> <@ID>(<4 x double> <%ID>, <4 x double> <%ID>)                                       

<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
expected answer:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = load <8 x float>, <8 x float>* <%ID>, align 16                                                                  
		<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   

<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
expected answer:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = load <8 x float>, <8 x float>* <%ID>, align 16                                                                  
		<%ID> = bitcast { float, float }* <%ID> to <8 x float>*                                                                 
		<%ID> = bitcast <8 x float>* <%ID> to i8*                                                                               

<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast double* <%ID> to i64*                                                                                   
expected answer:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i64*                                                                                   
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = getelementptr inbounds { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x double] }, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x double] }* <%ID>, i64 <INT>, i32 <INT>, i64 <%ID>
		<%ID> = getelementptr inbounds { float, float }, { float, float }* <%ID>, i64 <%ID>                                     
		<%ID> = xor i64 <%ID>, <%ID>                                                                                            

<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast double* <%ID> to i8*                                                                                    
expected answer:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i8*                                                                                    
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = getelementptr double, double* <%ID>, i64 <%ID>                                                                  
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = ptrtoint double* <%ID> to i64                                                                                   

<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast float <%ID> to i32                                                                                      
expected answer:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
Nearest neighbors:
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = phi i32 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = fadd float <%ID>, <%ID>                                                                                         
		<%ID> = fsub float <%ID>, <%ID>                                                                                         

<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast double <%ID> to i64                                                                                     
expected answer:
		<%ID> = bitcast i64 <%ID> to double                                                                                     
Nearest neighbors:
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = shufflevector <16 x i8> <%ID>, <16 x i8> <%ID>, <16 x i32> <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>
		<%ID> = fcmp ogt double <%ID>, <%ID>                                                                                    
		<%ID> = fcmp fast ogt double <%ID>, <%ID>                                                                               

<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast float* <%ID> to i8*                                                                                     
expected answer:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
Nearest neighbors:
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = load float*, float** <%ID>, align 8                                                                             
		<%ID> = getelementptr inbounds { float, float }, { float, float }* <%ID>, i64 <INT>, i32 <INT>                          
		<%ID> = getelementptr inbounds { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x i32] }, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x i32] }* <%ID>, i64 <INT>, i32 <INT>, i64 <INT>

<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = icmp ult i16* <%ID>, <%ID>                                                                                      
		<%ID> = phi i16* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                   
		<%ID> = phi i16* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                     

<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = inttoptr i64 <%ID> to float*                                                                                    
		<%ID> = getelementptr inbounds { float, float }, { float, float }* <%ID>, i64 <INT>, i32 <INT>                          
		call void <@ID>(i64 <%ID>, i64 <INT>, { { float*, i64 } }* nonnull dereferenceable(16) <%ID>, { { float*, i64 } }* nonnull dereferenceable(16) <%ID>, float* <%ID>, i64 <INT>, float <FLOAT>)

<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       
		<%ID> = load <2 x i64>, <2 x i64>* <%ID>, align 16                                                                      
		store <2 x i64> <%ID>, <2 x i64>* <%ID>, align 16                                                                       

<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = getelementptr inbounds { { i32*, i32*, { { i32* } } } }, { { i32*, i32*, { { i32* } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = ptrtoint i32* <%ID> to i64                                                                                      
		<%ID> = bitcast { float*, i32*, i64, i64 }* <%ID> to i64*                                                               

<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = extractvalue { i64, i64 } <%ID>, 0                                                                              
		<%ID> = load i64, i64* <%ID>, align 4                                                                                   
		<%ID> = icmp ugt i8 <%ID>, <INT>                                                                                        

<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = getelementptr inbounds { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x i32] }, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x i32] }* <%ID>, i64 <INT>, i32 <INT>, i64 <INT>
		invoke void <@ID>({ i32, i32, i32, i32, { i32 (...)** }*, i32, { { i32 (...)** }*, { i32 (...)** }*, i32, i32, i8*, i8*, i64, i32, i8*, i8*, i32, i32, opaque* }*, i64, { i32* }, { i64*, [2 x i64] } }* nonnull sret <%ID>, { i32, i8*, { i32, i32 } }* nonnull <%ID>, i32 <INT>)
 to label <%ID> unwind label <%ID>

<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		store { i8*, { { [1 x i64] } } }* <%ID>, { i8*, { { [1 x i64] } } }** <%ID>, align 8                                    
		<%ID> = getelementptr inbounds { i32, i32 }, { i32, i32 }* <%ID>, i64 <INT>, i32 <INT>                                  
		<%ID> = icmp eq { { { { { { i64, i64, i8* } } } } } }* <%ID>, <%ID>                                                     

<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		store i32* <%ID>, i32** <%ID>, align 8                                                                                  
		<%ID> = bitcast { float*, i32*, i64, i64 }* <%ID> to i64*                                                               
		call void <@ID>(i64 <%ID>, i64 <INT>, { { i32*, i64 } }* nonnull dereferenceable(16) <%ID>, { { i32*, i64 } }* nonnull dereferenceable(16) <%ID>, i32* <%ID>, i64 <INT>, i32 <INT>)

<%ID> = bitcast <4 x i32> <%ID> to <16 x i8>                                                                            
<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = bitcast <16 x i8> <%ID> to <4 x i32>                                                                            
		<%ID> = bitcast <2 x i64> <%ID> to <16 x i8>                                                                            
		<%ID> = add <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   
		<%ID> = bitcast i32* <%ID> to <16 x i8>*                                                                                

<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
expected answer:
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
Nearest neighbors:
		<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = bitcast { double, double }* <%ID> to <4 x double>*                                                              
		<%ID> = and <4 x i64> <%ID>, <i64 <INT>, i64 <INT>, i64 <INT>, i64 <INT>>                                               
		<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  

<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
expected answer:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = phi i32 [ <%ID>, <%ID> ], [ 0, <%ID> ]                                                                          
		<%ID> = phi i32 [ 0, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                      
		<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   

<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
expected answer:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = phi i32 [ <%ID>, <%ID> ], [ 0, <%ID> ]                                                                          
		<%ID> = getelementptr inbounds { { i8*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { i8*, { { [5 x i64] } } }* }, { { i8 }, { { [5 x i64] }, { { [5 x i64] } }, { [5 x i64] }, { [5 x i64] }, { i8*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { i8*, { { [5 x i64] } } }* } }, { { [5 x i64] }, { { [5 x i64] } }, { [5 x i64] }, { [5 x i64] }, { i8*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { i8*, { { [5 x i64] } } }* } } } }, { { i8*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { i8*, { { [5 x i64] } } }* }, { { i8 }, { { [5 x i64] }, { { [5 x i64] } }, { [5 x i64] }, { [5 x i64] }, { i8*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { i8*, { { [5 x i64] } } }* } }, { { [5 x i64] }, { { [5 x i64] } }, { [5 x i64] }, { [5 x i64] }, { i8*, { { [5 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { i8*, { { [5 x i64] } } }* } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i64 <INT>
		<%ID> = getelementptr inbounds { float*, { { [4 x i64] } } }, { float*, { { [4 x i64] } } }* <%ID>, i64 <INT>, i32 <INT>

<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
<%ID> = bitcast double* <%ID> to i64*                                                                                   
expected answer:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i64*                                                                                   
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = phi i32 [ <%ID>, <%ID> ], [ 0, <%ID> ]                                                                          
		<%ID> = icmp ugt i32 <%ID>, <INT>                                                                                       
		<%ID> = load double, double* <%ID>, align 8                                                                             

<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
<%ID> = bitcast double* <%ID> to i8*                                                                                    
expected answer:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i8*                                                                                    
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = getelementptr double, double* <%ID>, i64 <%ID>                                                                  
		<%ID> = icmp ult double* <%ID>, <%ID>                                                                                   
		tail call void <@ID>(i8* <%ID>, i8 <INT>, i64 <%ID>, i32 <INT>, i1 false)                                               

<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
<%ID> = bitcast float <%ID> to i32                                                                                      
expected answer:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
Nearest neighbors:
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = select i1 <%ID>, float <%ID>, float <%ID>                                                                       
		<%ID> = phi i32 [ <%ID>, <%ID> ], [ undef, <%ID> ]                                                                      
		<%ID> = phi i32 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      

<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
<%ID> = bitcast double <%ID> to i64                                                                                     
expected answer:
		<%ID> = bitcast i64 <%ID> to double                                                                                     
Nearest neighbors:
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = phi i64 [ 2, <%ID> ], [ 1, <%ID> ]                                                                              
		<%ID> = phi i64 [ <%ID>, <%ID> ], [ undef, <%ID> ]                                                                      
		<%ID> = fcmp ogt double <%ID>, <%ID>                                                                                    

<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
<%ID> = bitcast float* <%ID> to i8*                                                                                     
expected answer:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
Nearest neighbors:
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = bitcast double* <%ID> to i8*                                                                                    
		tail call void <@ID>(i8* <%ID>, i8 <INT>, i64 <%ID>, i32 <INT>, i1 false)                                               
		<%ID> = or i64 <%ID>, <INT>                                                                                             

<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = getelementptr inbounds i16, i16* <%ID>, i64 <%ID>                                                               
		<%ID> = getelementptr inbounds i16, i16* <%ID>, i64 <INT>                                                               
		<%ID> = trunc i32 <%ID> to i16                                                                                          

<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = srem i32 <%ID>, <%ID>                                                                                           
		<%ID> = lshr i64 <%ID>, <INT>                                                                                           
		<%ID> = phi i32 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      

<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = shufflevector <4 x i32> <%ID>, <4 x i32> undef, <4 x i32> <i32 <INT>, i32 undef, i32 <INT>, i32 undef>          
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      

<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		call void <@ID>({ { i32*, i32*, { { i32* } } } }* nonnull <%ID>, i32* nonnull dereferenceable(4) <%ID>)                 
		<%ID> = icmp sgt i32 <%ID>, <%ID>                                                                                       
		<%ID> = inttoptr i64 <%ID> to i32*                                                                                      

<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = load i64*, i64** <%ID>, align 8                                                                                 
		<%ID> = shl i64 <%ID>, <%ID>                                                                                            
		<%ID> = select i1 <%ID>, i16 <%ID>, i16 <INT>                                                                           

<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = icmp ne i32* <%ID>, null                                                                                        
		<%ID> = icmp sgt i32 <%ID>, <%ID>                                                                                       
		<%ID> = load { { { i32*, i64 } } }*, { { { i32*, i64 } } }** <%ID>, align 8                                             

<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = phi i32 [ <%ID>, <%ID> ], [ 0, <%ID> ]                                                                          
		<%ID> = icmp ne i32* <%ID>, null                                                                                        
		<%ID> = icmp sgt i32 <%ID>, <%ID>                                                                                       

<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = load { { { i32*, i64 } } }*, { { { i32*, i64 } } }** <%ID>, align 8                                             
		<%ID> = bitcast { { { { i32*, i64 } } }* }* <%ID> to { { i32*, i64 } }**                                                
		store i32* <%ID>, i32** <%ID>, align 8                                                                                  

<%ID> = bitcast <4 x i32> <%ID> to <4 x float>                                                                          
<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = bitcast <4 x float> <%ID> to <4 x i32>                                                                          
		<%ID> = icmp sgt i32 <%ID>, <%ID>                                                                                       
		<%ID> = phi i32 [ <%ID>, <%ID> ], [ 0, <%ID> ]                                                                          
		<%ID> = srem i32 <%ID>, <%ID>                                                                                           

<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
expected answer:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = phi i32 [ <%ID>, <%ID> ], [ 0, <%ID> ]                                                                          
		<%ID> = bitcast { float, float }* <%ID> to <8 x float>*                                                                 
		<%ID> = tail call <8 x float> <@ID>(<8 x float> <%ID>, <8 x float> <%ID>, <8 x float> <float <FLOAT>, float <FLOAT>, float <FLOAT>, float <FLOAT>, float <FLOAT>, float <FLOAT>, float <FLOAT>, float <FLOAT>>)
		store <8 x float> <%ID>, <8 x float>* <%ID>, align 4                                                                    

<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
expected answer:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = phi i32 [ <%ID>, <%ID> ], [ 0, <%ID> ]                                                                          
		<%ID> = phi i64 [ <%ID>, <%ID> ], [ 0, <%ID> ]                                                                          
		<%ID> = and <8 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = bitcast { float, float }* <%ID> to <8 x float>*                                                                 

<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
<%ID> = bitcast double* <%ID> to i64*                                                                                   
expected answer:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i64*                                                                                   
		<%ID> = phi i32 [ <%ID>, <%ID> ], [ 0, <%ID> ]                                                                          
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([146 x i8], [146 x i8]* <@ID>, i64 <INT>, i64 <INT>))
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([152 x i8], [152 x i8]* <@ID>, i64 <INT>, i64 <INT>))

<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
<%ID> = bitcast double* <%ID> to i8*                                                                                    
expected answer:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i8*                                                                                    
		<%ID> = getelementptr double, double* <%ID>, i64 <%ID>                                                                  
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([152 x i8], [152 x i8]* <@ID>, i64 <INT>, i64 <INT>))
		<%ID> = bitcast i64 <%ID> to double                                                                                     
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([146 x i8], [146 x i8]* <@ID>, i64 <INT>, i64 <INT>))

<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
<%ID> = bitcast float <%ID> to i32                                                                                      
expected answer:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
Nearest neighbors:
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = phi i32 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      
		<%ID> = phi i32 [ <%ID>, <%ID> ], [ undef, <%ID> ]                                                                      
		<%ID> = fcmp olt float <%ID>, <%ID>                                                                                     
		<%ID> = select i1 <%ID>, float <%ID>, float <%ID>                                                                       

<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
<%ID> = bitcast float* <%ID> to i8*                                                                                     
expected answer:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
Nearest neighbors:
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = load float*, float** <%ID>, align 8                                                                             
		<%ID> = getelementptr inbounds float, float* <%ID>, i64 <INT>                                                           
		store float* <%ID>, float** <%ID>, align 8                                                                              
		<%ID> = sub nsw i64 <INT>, <%ID>                                                                                        

<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		<%ID> = getelementptr inbounds i16, i16* <%ID>, i64 <INT>                                                               
		<%ID> = load i16, i16* <%ID>, align 2                                                                                   
		<%ID> = phi i16* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                     
		<%ID> = getelementptr i16, i16* <%ID>, i64 <INT>                                                                        

<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = bitcast i64 <%ID> to double                                                                                     
		<%ID> = getelementptr inbounds { { { i8 }, { { { { <{ float*, { i8 } }> }, { { { float*, i64 } } } } } }, { <{ { float }, { i8 } }>, [3 x i8] } } }, { { { i8 }, { { { { <{ float*, { i8 } }> }, { { { float*, i64 } } } } } }, { <{ { float }, { i8 } }>, [3 x i8] } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = insertelement <8 x i32> undef, <TYP> <%ID>, <TYP> 0                                                             
		<%ID> = load float*, float** <%ID>, align 8                                                                             

<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = getelementptr inbounds { { i32*, i64 } }, { { i32*, i64 } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>             
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       
		<%ID> = load <4 x i32>, <4 x i32>* <%ID>, align 4                                                                       
		<%ID> = phi i32 [ <%ID>, <%ID> ], [ 0, <%ID> ]                                                                          

<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = bitcast { { i32*, i32*, { { i32* } } } }* <%ID> to i64*                                                         
		call void <@ID>({ { i32*, i32*, { { i32* } } } }* nonnull <%ID>, i32* nonnull dereferenceable(4) <%ID>)                 
		<%ID> = phi i32** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      

<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
		<%ID> = extractvalue { i64, i64 } <%ID>, 0                                                                              
		<%ID> = shl i64 <%ID>, <%ID>                                                                                            
		<%ID> = urem i64 <%ID>, <%ID>                                                                                           

<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<%ID> = alloca i32, align 4                                                                                             
		<@ID> = linkonce_odr global { i64, i64, i64 } zeroinitializer, align 8                                                  
		switch i32 <%ID>, label <%ID> [
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>]                                        
		<%ID> = icmp eq i32 <%ID>, <INT>                                                                                        

<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		switch i32 <%ID>, label <%ID> [
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>]                                        
		<%ID> = phi i32 [ <%ID>, <%ID> ], [ 0, <%ID> ]                                                                          
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([152 x i8], [152 x i8]* <@ID>, i64 <INT>, i64 <INT>))
		<%ID> = add i8 <%ID>, <INT>                                                                                             

<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = phi i32** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    
		store i32* <%ID>, i32** <%ID>, align 8                                                                                  
		switch i32 <%ID>, label <%ID> [
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>]                                        
		<%ID> = load i32*, i32** <%ID>, align 8                                                                                 

<%ID> = bitcast <4 x i64> <%ID> to <4 x double>                                                                         
<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = phi i32 [ <%ID>, <%ID> ], [ 0, <%ID> ]                                                                          
		<%ID> = bitcast <4 x double> <%ID> to <4 x i64>                                                                         
		<%ID> = phi i64 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      
		<%ID> = phi i64 [ 4, <%ID> ], [ <%ID>, <%ID> ]                                                                          

<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
expected answer:
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
Nearest neighbors:
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = and <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   
		<%ID> = getelementptr inbounds { { { { i16 } } }*, { { [4 x i64] } } }, { { { { i16 } } }*, { { [4 x i64] } } }* <%ID>, i64 <INT>, i32 <INT>
		<%ID> = getelementptr inbounds i8*, i8** <%ID>, i64 <INT>                                                               
		<%ID> = phi <8 x float> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                              

<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
<%ID> = bitcast double* <%ID> to i64*                                                                                   
expected answer:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i64*                                                                                   
		<%ID> = xor i64 <%ID>, <%ID>                                                                                            
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = trunc i64 <%ID> to i32                                                                                          
		<%ID> = bitcast { double }* <%ID> to i64*                                                                               

<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
<%ID> = bitcast double* <%ID> to i8*                                                                                    
expected answer:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i8*                                                                                    
		call void <@ID>(i64 <%ID>, i64 <%ID>, { { double*, i64 } }* nonnull dereferenceable(16) <%ID>, { { double*, i64 } }* nonnull dereferenceable(16) <%ID>, double* <%ID>, i64 <INT>, double <FLOAT>)
		<%ID> = getelementptr double, double* <%ID>, i64 <%ID>                                                                  
		<%ID> = ptrtoint double* <%ID> to i64                                                                                   
		<%ID> = getelementptr double, double* <%ID>, i64 <INT>                                                                  

<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
<%ID> = bitcast float <%ID> to i32                                                                                      
expected answer:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
Nearest neighbors:
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = select i1 <%ID>, float <%ID>, float <%ID>                                                                       
		<%ID> = fcmp olt float <%ID>, <%ID>                                                                                     
		<%ID> = phi i32 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      

<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
<%ID> = bitcast double <%ID> to i64                                                                                     
expected answer:
		<%ID> = bitcast i64 <%ID> to double                                                                                     
Nearest neighbors:
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = select i1 <%ID>, double <%ID>, double <%ID>                                                                     
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
		<%ID> = fcmp ogt double <%ID>, <%ID>                                                                                    

<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
<%ID> = bitcast float* <%ID> to i8*                                                                                     
expected answer:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
Nearest neighbors:
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = bitcast i64* <%ID> to i8*                                                                                       
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		tail call void <@ID>(i8* <%ID>, i8 <INT>, i64 <INT>, i32 <INT>, i1 false)                                               
		<%ID> = shl nsw i64 <%ID>, <INT>                                                                                        

<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		<%ID> = phi i16* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                   
		store <8 x i16> <%ID>, <8 x i16>* <%ID>, align 2                                                                        
		<%ID> = bitcast i16* <%ID> to <16 x i16>*                                                                               
		<%ID> = sext i16 <%ID> to i64                                                                                           

<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = bitcast { { { float*, i64 } } }** <%ID> to i64**                                                                
		<%ID> = bitcast { { float*, i64 } }* <%ID> to i8*                                                                       
		<%ID> = getelementptr inbounds { { { i8 }, { { { { <{ float*, { i8 } }> }, { { { float*, i64 } } } } } }, { <{ { float }, { i8 } }>, [3 x i8] } } }, { { { i8 }, { { { { <{ float*, { i8 } }> }, { { { float*, i64 } } } } } }, { <{ { float }, { i8 } }>, [3 x i8] } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>

<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = ptrtoint i32* <%ID> to i64                                                                                      
		<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      

<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = ptrtoint i32* <%ID> to i64                                                                                      
		tail call void <@ID>(i8* <%ID>)                                                                                         
		<%ID> = load i32*, i32** <%ID>, align 8                                                                                 
		<%ID> = bitcast { { i32*, i32*, { { i32* } } } }* <%ID> to i64*                                                         

<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = trunc i64 <%ID> to i32                                                                                          
		<%ID> = bitcast { double }* <%ID> to i64*                                                                               
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([152 x i8], [152 x i8]* <@ID>, i64 <INT>, i64 <INT>))

<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<%ID> = bitcast i64* <%ID> to i8*                                                                                       
		store i32 <INT>, i32* <%ID>, align 4                                                                                    
		<%ID> = ptrtoint i32* <%ID> to i64                                                                                      
		<%ID> = load i32*, i32** <%ID>, align 8                                                                                 

<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<@ID> = private unnamed_addr constant [2 x i8]  <STRING>, align 1                                                       
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([152 x i8], [152 x i8]* <@ID>, i64 <INT>, i64 <INT>))
		store <2 x i64> <%ID>, <2 x i64>* <%ID>, align 8                                                                        

<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		tail call void <@ID>(i8* <%ID>, i8 <INT>, i64 <INT>, i32 <INT>, i1 false)                                               
		call void <@ID>({ { { i32*, i64 } } }* nonnull dereferenceable(16) <%ID>, <{ { i8 }, [7 x i8], { i64 }, { i32 }, [4 x i8] }>* nonnull dereferenceable(24) <%ID>, { i8 }* nonnull dereferenceable(1) <%ID>)
		<%ID> = load i32*, i32** <%ID>, align 8                                                                                 
		define linkonce_odr void <@ID>(i64, i64, i64, i32*, i64, i32*, i64, i32*, i64, i32, { i32*, i32*, i64, i64, i64 }* dereferenceable(40), opaque*) local_unnamed_addr

<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
		<%ID> = getelementptr inbounds { { i32*, i64, i64 } }, { { i32*, i64, i64 } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>   
		<%ID> = bitcast i8** <%ID> to i64*                                                                                      
		<%ID> = ptrtoint i32* <%ID> to i64                                                                                      

<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
<%ID> = bitcast double* <%ID> to i64*                                                                                   
expected answer:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i64*                                                                                   
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = phi i8* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      
		<%ID> = getelementptr inbounds { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x i64] }, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x i64] }* <%ID>, i64 <INT>, i32 <INT>, i64 <%ID>
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       

<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
<%ID> = bitcast double* <%ID> to i8*                                                                                    
expected answer:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
Nearest neighbors:
		<%ID> = bitcast double* <%ID> to i8*                                                                                    
		<%ID> = shl i64 <%ID>, <%ID>                                                                                            
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = load double, double* <%ID>, align 8                                                                             
		<%ID> = lshr i64 <%ID>, <INT>                                                                                           

<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
<%ID> = bitcast float <%ID> to i32                                                                                      
expected answer:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
Nearest neighbors:
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = select i1 <%ID>, float <%ID>, float <%ID>                                                                       
		<%ID> = phi i32 [ <%ID>, <%ID> ], [ undef, <%ID> ]                                                                      
		<%ID> = select i1 <%ID>, i32 <%ID>, i32 <%ID>                                                                           

<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
<%ID> = bitcast double <%ID> to i64                                                                                     
expected answer:
		<%ID> = bitcast i64 <%ID> to double                                                                                     
Nearest neighbors:
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = phi i64 [ 2, <%ID> ], [ 1, <%ID> ]                                                                              
		<%ID> = fcmp ogt double <%ID>, <%ID>                                                                                    
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = phi i64 [ <%ID>, <%ID> ], [ undef, <%ID> ]                                                                      

<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
<%ID> = bitcast float* <%ID> to i8*                                                                                     
expected answer:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
Nearest neighbors:
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = getelementptr inbounds float, float* <%ID>, i64 <INT>                                                           
		<%ID> = icmp ult float* <%ID>, <%ID>                                                                                    
		store float* <%ID>, float** <%ID>, align 8                                                                              

<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = phi i16* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                     
		<%ID> = select i1 <%ID>, i16 <INT>, i16 <%ID>                                                                           
		<%ID> = getelementptr inbounds i16, i16* <%ID>, i64 <INT>                                                               

<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = getelementptr inbounds { { float*, { { [4 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { float*, { { [4 x i64] } } }* }, { { i8 }, { { [4 x i64] }, { { [4 x i64] } }, { [4 x i64] }, { [4 x i64] }, { float*, { { [4 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { float*, { { [4 x i64] } } }* } }, { { [4 x i64] }, { { [4 x i64] } }, { [4 x i64] }, { [4 x i64] }, { float*, { { [4 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { float*, { { [4 x i64] } } }* } } } }, { { float*, { { [4 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { float*, { { [4 x i64] } } }* }, { { i8 }, { { [4 x i64] }, { { [4 x i64] } }, { [4 x i64] }, { [4 x i64] }, { float*, { { [4 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { float*, { { [4 x i64] } } }* } }, { { [4 x i64] }, { { [4 x i64] } }, { [4 x i64] }, { [4 x i64] }, { float*, { { [4 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { float*, { { [4 x i64] } } }* } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i64 <INT>
		<%ID> = inttoptr i64 <%ID> to float*                                                                                    
		<%ID> = fadd fast float <%ID>, <%ID>                                                                                    

<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = phi <4 x i32> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                
		<%ID> = load <4 x i32>, <4 x i32>* <%ID>, align 4                                                                       

<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = phi i32** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    
		tail call void <@ID>(i8* nonnull <%ID>, i8* <%ID>, i64 <%ID>, i32 <INT>, i1 false)                                      
		<%ID> = bitcast { { i32*, i32*, { { i32* } } } }* <%ID> to i64*                                                         

<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = shl i64 <%ID>, <%ID>                                                                                            
		<%ID> = getelementptr inbounds { { float*, { { [4 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { float*, { { [4 x i64] } } }* }, { { i8 }, { { [4 x i64] }, { { [4 x i64] } }, { [4 x i64] }, { [4 x i64] }, { float*, { { [4 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { float*, { { [4 x i64] } } }* } }, { { [4 x i64] }, { { [4 x i64] } }, { [4 x i64] }, { [4 x i64] }, { float*, { { [4 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { float*, { { [4 x i64] } } }* } } } }, { { float*, { { [4 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { float*, { { [4 x i64] } } }* }, { { i8 }, { { [4 x i64] }, { { [4 x i64] } }, { [4 x i64] }, { [4 x i64] }, { float*, { { [4 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { float*, { { [4 x i64] } } }* } }, { { [4 x i64] }, { { [4 x i64] } }, { [4 x i64] }, { [4 x i64] }, { float*, { { [4 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { float*, { { [4 x i64] } } }* } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i64 <INT>
		<%ID> = shl i64 <INT>, <%ID>                                                                                            

<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = icmp ult i32* <%ID>, <%ID>                                                                                      
		<%ID> = tail call i64 <@ID>(i8* nonnull <%ID>)                                                                          
		<%ID> = load i32, i32* <%ID>, align 4                                                                                   

<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = getelementptr inbounds { i8, i8, i8, i8 }, { i8, i8, i8, i8 }* <%ID>, i64 <INT>, i32 <INT>                      
		define internal i32 <@ID>()                                                                                             
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    

<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = phi i32** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		store i32* <%ID>, i32** <%ID>, align 8                                                                                  
		store i32* null, i32** <%ID>, align 8                                                                                   

<%ID> = bitcast <8 x i32> <%ID> to <8 x float>                                                                          
<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = bitcast <8 x float> <%ID> to <8 x i32>                                                                          
		<%ID> = phi i32* [ null, <%ID> ], [ <%ID>, <%ID> ], [ null, <%ID> ]                                                     
		<%ID> = phi i32** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    
		<%ID> = phi <4 x i32> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                

<%ID> = bitcast double* <%ID> to i64*                                                                                   
<%ID> = bitcast i64* <%ID> to double*                                                                                   
<%ID> = bitcast double* <%ID> to i8*                                                                                    
expected answer:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
Nearest neighbors:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
		<%ID> = bitcast double* <%ID> to i8*                                                                                    
		<%ID> = bitcast i64* <%ID> to i8*                                                                                       
		<%ID> = getelementptr inbounds { i32, i32, i32, i32, i8*, i8*, i8*, i8*, { i32 (...)** }*, { { i32 (...)** }*, { i32 (...)** }*, i32, i32, i8*, i8*, i64, i32, i8*, i8*, i32, i32, opaque* }*, { i32* }, { i64*, [2 x i64] } }, { i32, i32, i32, i32, i8*, i8*, i8*, i8*, { i32 (...)** }*, { { i32 (...)** }*, { i32 (...)** }*, i32, i32, i8*, i8*, i64, i32, i8*, i8*, i32, i32, opaque* }*, { i32* }, { i64*, [2 x i64] } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i64 <INT>
		<%ID> = tail call i64 <@ID>(i8* nonnull <%ID>)                                                                          

<%ID> = bitcast double* <%ID> to i64*                                                                                   
<%ID> = bitcast i64* <%ID> to double*                                                                                   
<%ID> = bitcast float <%ID> to i32                                                                                      
expected answer:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
Nearest neighbors:
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
		<%ID> = select i1 <%ID>, float <%ID>, float <%ID>                                                                       
		<%ID> = phi float [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]              
		<%ID> = tail call float <@ID>(float <%ID>, float <%ID>)                                                                 

<%ID> = bitcast double* <%ID> to i64*                                                                                   
<%ID> = bitcast i64* <%ID> to double*                                                                                   
<%ID> = bitcast double <%ID> to i64                                                                                     
expected answer:
		<%ID> = bitcast i64 <%ID> to double                                                                                     
Nearest neighbors:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = fcmp ogt double <%ID>, <%ID>                                                                                    
		<%ID> = fcmp fast ogt double <%ID>, <%ID>                                                                               
		<%ID> = call double <@ID>(double <%ID>)                                                                                 

<%ID> = bitcast double* <%ID> to i64*                                                                                   
<%ID> = bitcast i64* <%ID> to double*                                                                                   
<%ID> = bitcast float* <%ID> to i8*                                                                                     
expected answer:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
Nearest neighbors:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = bitcast i64* <%ID> to i8*                                                                                       
		<%ID> = getelementptr inbounds { <{ opaque, <{ opaque, opaque*, opaque*, i8, [7 x i8] }>*, opaque*, i8 }>, { { { { { { i64, i64, i8* } } } } } } }, { <{ opaque, <{ opaque, opaque*, opaque*, i8, [7 x i8] }>*, opaque*, i8 }>, { { { { { { i64, i64, i8* } } } } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		store i64 <%ID>, i64* <%ID>, align 8                                                                                    

<%ID> = bitcast double* <%ID> to i64*                                                                                   
<%ID> = bitcast i64* <%ID> to double*                                                                                   
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		<%ID> = phi i16* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                     
		store i16 <%ID>, i16* <%ID>, align 8                                                                                    
		store i16 <%ID>, i16* <%ID>, align 2                                                                                    

<%ID> = bitcast double* <%ID> to i64*                                                                                   
<%ID> = bitcast i64* <%ID> to double*                                                                                   
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = bitcast { { float*, i64 } }* <%ID> to i64*                                                                      
		<%ID> = fsub float <%ID>, <%ID>                                                                                         
		<%ID> = fcmp uno float <%ID>, <FLOAT>                                                                                   

<%ID> = bitcast double* <%ID> to i64*                                                                                   
<%ID> = bitcast i64* <%ID> to double*                                                                                   
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = add <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to i64*                                                               

<%ID> = bitcast double* <%ID> to i64*                                                                                   
<%ID> = bitcast i64* <%ID> to double*                                                                                   
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = getelementptr inbounds <{ i32 (...)**, i32, [4 x i8] }>, <{ i32 (...)**, i32, [4 x i8] }>* <%ID>, i64 <INT>, i32 <INT>
		<%ID> = tail call i64 <@ID>(i8* nonnull <%ID>)                                                                          
		<%ID> = inttoptr i64 <%ID> to { { { i32*, i64 } } }*                                                                    

<%ID> = bitcast double* <%ID> to i64*                                                                                   
<%ID> = bitcast i64* <%ID> to double*                                                                                   
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = getelementptr inbounds { <{ opaque, <{ opaque, opaque*, opaque*, i8, [7 x i8] }>*, opaque*, i8 }>, { { { { { { i64, i64, i8* } } } } } } }, { <{ opaque, <{ opaque, opaque*, opaque*, i8, [7 x i8] }>*, opaque*, i8 }>, { { { { { { i64, i64, i8* } } } } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		invoke void <@ID>({ { { { { { i64, i64, i8* } } } } } }* nonnull sret <%ID>, { { { { { { i64, i64, i8* } } } } } }* nonnull dereferenceable(24) <%ID>)
 to label <%ID> unwind label <%ID>
		<%ID> = call i8* <@ID>({ i8*, i64 }* nonnull <%ID>, i64 <INT>)                                                          

<%ID> = bitcast double* <%ID> to i64*                                                                                   
<%ID> = bitcast i64* <%ID> to double*                                                                                   
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<%ID> = tail call i64 <@ID>(i8* nonnull <%ID>)                                                                          
		<%ID> = bitcast i64* <%ID> to i8*                                                                                       
		<%ID> = getelementptr inbounds <{ i32 (...)**, i32, [4 x i8], { { i8*, i64 } }, i8, [7 x i8] }>, <{ i32 (...)**, i32, [4 x i8], { { i8*, i64 } }, i8, [7 x i8] }>* <%ID>, i64 <INT>, i32 <INT>

<%ID> = bitcast double* <%ID> to i64*                                                                                   
<%ID> = bitcast i64* <%ID> to double*                                                                                   
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<%ID> = invoke dereferenceable(24) { { { { { { i64, i64, i8* } } } } } }* <@ID>({ { { { { { i64, i64, i8* } } } } } }* nonnull <%ID>, i8* <%ID>)
 to label <%ID> unwind label <%ID>
		<%ID> = call i8* <@ID>({ i8*, i64 }* nonnull <%ID>, i64 <INT>)                                                          
		<%ID> = call dereferenceable(24) { { { { { { i64, i64, i8* } } } } } }* <@ID>({ i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }* <%ID>)

<%ID> = bitcast double* <%ID> to i64*                                                                                   
<%ID> = bitcast i64* <%ID> to double*                                                                                   
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = getelementptr inbounds <{ i32 (...)**, i32, [4 x i8] }>, <{ i32 (...)**, i32, [4 x i8] }>* <%ID>, i64 <INT>, i32 <INT>
		<%ID> = icmp eq <{ i32 (...)**, i32, [4 x i8] }>* <%ID>, null                                                           
		<%ID> = bitcast { { i32*, i32*, i64, i64, i64 }, i64, i64 }* <%ID> to i8**                                              

<%ID> = bitcast double* <%ID> to i64*                                                                                   
<%ID> = bitcast i64* <%ID> to double*                                                                                   
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = bitcast i64* <%ID> to double*                                                                                   
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to i64*                                                               
		<%ID> = icmp eq <{ i32 (...)**, i32, [4 x i8] }>* <%ID>, null                                                           
		<%ID> = getelementptr inbounds { { { i32*, i64, i64 } } }, { { { i32*, i64, i64 } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>

<%ID> = bitcast double* <%ID> to i8*                                                                                    
<%ID> = bitcast i8* <%ID> to double*                                                                                    
<%ID> = bitcast float <%ID> to i32                                                                                      
expected answer:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
Nearest neighbors:
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
		<%ID> = phi float [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]              
		<%ID> = select i1 <%ID>, float <%ID>, float <%ID>                                                                       
		<%ID> = fcmp fast ogt float <%ID>, <%ID>                                                                                

<%ID> = bitcast double* <%ID> to i8*                                                                                    
<%ID> = bitcast i8* <%ID> to double*                                                                                    
<%ID> = bitcast double <%ID> to i64                                                                                     
expected answer:
		<%ID> = bitcast i64 <%ID> to double                                                                                     
Nearest neighbors:
		<%ID> = bitcast double <%ID> to i64                                                                                     
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
		<%ID> = fcmp ogt double <%ID>, <%ID>                                                                                    
		<%ID> = select i1 <%ID>, double <%ID>, double <%ID>                                                                     
		<%ID> = fcmp oeq double <%ID>, <FLOAT>                                                                                  

<%ID> = bitcast double* <%ID> to i8*                                                                                    
<%ID> = bitcast i8* <%ID> to double*                                                                                    
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		<%ID> = icmp ult i16 <%ID>, <INT>                                                                                       
		<%ID> = bitcast i16** <%ID> to i8**                                                                                     
		<%ID> = sext i16 <%ID> to i64                                                                                           

<%ID> = bitcast double* <%ID> to i8*                                                                                    
<%ID> = bitcast i8* <%ID> to double*                                                                                    
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
		<%ID> = bitcast { { { float*, i64 } } }** <%ID> to i64*                                                                 

<%ID> = bitcast double* <%ID> to i8*                                                                                    
<%ID> = bitcast i8* <%ID> to double*                                                                                    
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
		<%ID> = bitcast i32** <%ID> to <4 x i32>**                                                                              
		<%ID> = load i32, i32* <%ID>, align 8                                                                                   

<%ID> = bitcast double* <%ID> to i8*                                                                                    
<%ID> = bitcast i8* <%ID> to double*                                                                                    
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
		<%ID> = icmp ugt i16 <%ID>, <INT>                                                                                       
		<%ID> = inttoptr i64 <%ID> to i32*                                                                                      

<%ID> = bitcast double* <%ID> to i8*                                                                                    
<%ID> = bitcast i8* <%ID> to double*                                                                                    
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
		<%ID> = add i16 <%ID>, <INT>                                                                                            
		<%ID> = icmp ugt i16 <%ID>, <INT>                                                                                       

<%ID> = bitcast double* <%ID> to i8*                                                                                    
<%ID> = bitcast i8* <%ID> to double*                                                                                    
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<@ID> = internal constant [3 x i32] [i32 <INT>, i32 <INT>, i32 <INT>], align 4                                          
		<@ID> = linkonce_odr global { i64, i64, i64 } zeroinitializer, align 8                                                  
		<%ID> = alloca i32, align 4                                                                                             

<%ID> = bitcast double* <%ID> to i8*                                                                                    
<%ID> = bitcast i8* <%ID> to double*                                                                                    
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
		<%ID> = bitcast i8* <%ID> to i8**                                                                                       
		<%ID> = getelementptr inbounds { i32, { { { { opaque* } } } }* }, { i32, { { { { opaque* } } } }* }* <%ID>, i64 <INT>, i32 <INT>

<%ID> = bitcast double* <%ID> to i8*                                                                                    
<%ID> = bitcast i8* <%ID> to double*                                                                                    
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
		<%ID> = phi i32* [ null, <%ID> ], [ <%ID>, <%ID> ], [ null, <%ID> ]                                                     
		<%ID> = bitcast i8* <%ID> to i8**                                                                                       
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       

<%ID> = bitcast float <%ID> to i32                                                                                      
<%ID> = bitcast i32 <%ID> to float                                                                                      
<%ID> = bitcast float* <%ID> to i8*                                                                                     
expected answer:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
Nearest neighbors:
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = bitcast { float }* <%ID> to i32*                                                                                
		<%ID> = getelementptr inbounds { <{ { { { float*, i64 } } }*, { { { float*, i64 } } }*, { i8 }, [7 x i8] }>, { { { float*, i64 } } }* }, { <{ { { { float*, i64 } } }*, { { { float*, i64 } } }*, { i8 }, [7 x i8] }>, { { { float*, i64 } } }* }* <%ID>, i64 <INT>, i32 <INT>
		<%ID> = getelementptr inbounds float, float* <%ID>, i64 <INT>                                                           

<%ID> = bitcast float <%ID> to i32                                                                                      
<%ID> = bitcast i32 <%ID> to float                                                                                      
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = phi i8* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                  
		<%ID> = zext i8 <%ID> to i64                                                                                            
		<%ID> = phi i16* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                     

<%ID> = bitcast float <%ID> to i32                                                                                      
<%ID> = bitcast i32 <%ID> to float                                                                                      
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = bitcast { float }* <%ID> to i32*                                                                                
		<%ID> = bitcast { { { float*, i64, i64 } } }* <%ID> to i64*                                                             
		<%ID> = inttoptr i64 <%ID> to float*                                                                                    
		<%ID> = getelementptr inbounds { { { i8 }, { { { { <{ float*, { i8 } }> }, { { { float*, i64 } } } } } }, { <{ { float }, { i8 } }>, [3 x i8] } } }, { { { i8 }, { { { { <{ float*, { i8 } }> }, { { { float*, i64 } } } } } }, { <{ { float }, { i8 } }>, [3 x i8] } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>

<%ID> = bitcast float <%ID> to i32                                                                                      
<%ID> = bitcast i32 <%ID> to float                                                                                      
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = load { { i32*, i64, i64 } }*, { { i32*, i64, i64 } }** <%ID>, align 8                                           
		<%ID> = bitcast { { { i32*, i64, i64 } } }** <%ID> to { { i32*, i64, i64 } }**                                          
		<%ID> = load <2 x i64>, <2 x i64>* <%ID>, align 16                                                                      

<%ID> = bitcast float <%ID> to i32                                                                                      
<%ID> = bitcast i32 <%ID> to float                                                                                      
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = bitcast { { i32*, i32*, { { i32* } } } }* <%ID> to i64*                                                         
		<%ID> = bitcast { i32, i16 }* <%ID> to i64*                                                                             
		<%ID> = getelementptr inbounds { i32, i32, i32, i32, i8*, i8*, i8*, i8*, { i32 (...)** }*, { { i32 (...)** }*, { i32 (...)** }*, i32, i32, i8*, i8*, i64, i32, i8*, i8*, i32, i32, opaque* }*, { i32* }, { i64*, [2 x i64] } }, { i32, i32, i32, i32, i8*, i8*, i8*, i8*, { i32 (...)** }*, { { i32 (...)** }*, { i32 (...)** }*, i32, i32, i8*, i8*, i64, i32, i8*, i8*, i32, i32, opaque* }*, { i32* }, { i64*, [2 x i64] } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>

<%ID> = bitcast float <%ID> to i32                                                                                      
<%ID> = bitcast i32 <%ID> to float                                                                                      
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = bitcast { float }* <%ID> to i32*                                                                                
		<%ID> = bitcast { i32, i16 }* <%ID> to i64*                                                                             
		<%ID> = inttoptr i64 <%ID> to { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }**

<%ID> = bitcast float <%ID> to i32                                                                                      
<%ID> = bitcast i32 <%ID> to float                                                                                      
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = load { { i32*, i64, i64 } }*, { { i32*, i64, i64 } }** <%ID>, align 8                                           
		<%ID> = bitcast { { { i32*, i64, i64 } } }** <%ID> to { { i32*, i64, i64 } }**                                          
		<%ID> = bitcast { float }* <%ID> to i32*                                                                                

<%ID> = bitcast float <%ID> to i32                                                                                      
<%ID> = bitcast i32 <%ID> to float                                                                                      
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i8*                                                    
		<%ID> = bitcast { float }* <%ID> to i32*                                                                                
		<%ID> = zext i8 <%ID> to i64                                                                                            

<%ID> = bitcast float <%ID> to i32                                                                                      
<%ID> = bitcast i32 <%ID> to float                                                                                      
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = bitcast { { { { i32*, i64 } } }* }* <%ID> to { { i32*, i64 } }**                                                
		<%ID> = load { { i32*, i64, i64 } }*, { { i32*, i64, i64 } }** <%ID>, align 8                                           
		<%ID> = load { { { i32*, i64 } } }*, { { { i32*, i64 } } }** <%ID>, align 8                                             

<%ID> = bitcast float <%ID> to i32                                                                                      
<%ID> = bitcast i32 <%ID> to float                                                                                      
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = getelementptr inbounds { { i32*, i64, i64 } }, { { i32*, i64, i64 } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>   
		<%ID> = load { { i32*, i64, i64 } }*, { { i32*, i64, i64 } }** <%ID>, align 8                                           
		<%ID> = bitcast { { { float*, i64, i64 } } }* <%ID> to i64*                                                             

<%ID> = bitcast double <%ID> to i64                                                                                     
<%ID> = bitcast i64 <%ID> to double                                                                                     
<%ID> = bitcast float* <%ID> to i8*                                                                                     
expected answer:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
Nearest neighbors:
		<%ID> = bitcast float* <%ID> to i8*                                                                                     
		<%ID> = bitcast i64 <%ID> to double                                                                                     
		<%ID> = getelementptr inbounds float, float* <%ID>, i64 <INT>                                                           
		store float* <%ID>, float** <%ID>, align 8                                                                              
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       

<%ID> = bitcast double <%ID> to i64                                                                                     
<%ID> = bitcast i64 <%ID> to double                                                                                     
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		<%ID> = bitcast i64 <%ID> to double                                                                                     
		<%ID> = getelementptr inbounds i16, i16* <%ID>, i64 <%ID>                                                               
		switch i16 <%ID>, label <%ID> [
 i16 <INT>, label <%ID>
 i16 <INT>, label <%ID>]                                        
		<%ID> = phi i16* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                     

<%ID> = bitcast double <%ID> to i64                                                                                     
<%ID> = bitcast i64 <%ID> to double                                                                                     
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = bitcast i64 <%ID> to double                                                                                     
		<%ID> = inttoptr i64 <%ID> to float*                                                                                    
		<%ID> = icmp ne i32 <%ID>, <INT>                                                                                        
		<%ID> = lshr i64 <%ID>, <INT>                                                                                           

<%ID> = bitcast double <%ID> to i64                                                                                     
<%ID> = bitcast i64 <%ID> to double                                                                                     
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = bitcast i64 <%ID> to double                                                                                     
		<%ID> = load { { i32*, i64, i64 } }*, { { i32*, i64, i64 } }** <%ID>, align 8                                           
		<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
		store <2 x i64> <%ID>, <2 x i64>* <%ID>, align 16                                                                       

<%ID> = bitcast double <%ID> to i64                                                                                     
<%ID> = bitcast i64 <%ID> to double                                                                                     
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = bitcast i64 <%ID> to double                                                                                     
		<%ID> = bitcast { { i32*, i32*, { { i32* } } } }* <%ID> to i64*                                                         
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = phi i32** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    

<%ID> = bitcast double <%ID> to i64                                                                                     
<%ID> = bitcast i64 <%ID> to double                                                                                     
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = bitcast i64 <%ID> to double                                                                                     
		<%ID> = or i64 <%ID>, <%ID>                                                                                             
		<%ID> = shl i64 <%ID>, <%ID>                                                                                            
		<%ID> = extractvalue { i64, i64 } <%ID>, 0                                                                              

<%ID> = bitcast double <%ID> to i64                                                                                     
<%ID> = bitcast i64 <%ID> to double                                                                                     
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<%ID> = bitcast i64 <%ID> to double                                                                                     
		<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
		<%ID> = load { { { i32*, i64 } } }*, { { { i32*, i64 } } }** <%ID>, align 8                                             
		switch i32 <%ID>, label <%ID> [
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>]                                        

<%ID> = bitcast double <%ID> to i64                                                                                     
<%ID> = bitcast i64 <%ID> to double                                                                                     
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<%ID> = bitcast i64 <%ID> to double                                                                                     
		switch i32 <%ID>, label <%ID> [
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>]                                        
		<%ID> = getelementptr inbounds { { { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }, { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } }, { { { opaque*, { { opaque } }, { { i64 } } } }, { { <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>**, <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>**, { { <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>** } } } } }, i8, { { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } } }*, i32, i32 }, { { { opaque*, { { opaque } }, { { i64 } } } }, { { { { { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }, { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } }, { { { opaque*, { { opaque } }, { { i64 } } } }, { { <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>**, <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>**, { { <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>** } } } } }, i8, { { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } } }*, i32, i32 }, <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>, i8, i8, i8, i8, i8, opaque*, i64 }**, { { { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }, { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } }, { { { opaque*, { { opaque } }, { { i64 } } } }, { { <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>**, <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>**, { { <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>** } } } } }, i8, { { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } } }*, i32, i32 }, <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>, i8, i8, i8, i8, i8, opaque*, i64 }**, { { { { { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }, { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } }, { { { opaque*, { { opaque } }, { { i64 } } } }, { { <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>**, <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>**, { { <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>** } } } } }, i8, { { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } } }*, i32, i32 }, <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>, i8, i8, i8, i8, i8, opaque*, i64 }** } } } } }, i8, i8, i8, i8, i64, i64 }, { { { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }, { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } }, { { { opaque*, { { opaque } }, { { i64 } } } }, { { <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>**, <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>**, { { <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>** } } } } }, i8, { { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } } }*, i32, i32 }, { { { opaque*, { { opaque } }, { { i64 } } } }, { { { { { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }, { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } }, { { { opaque*, { { opaque } }, { { i64 } } } }, { { <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>**, <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>**, { { <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>** } } } } }, i8, { { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } } }*, i32, i32 }, <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>, i8, i8, i8, i8, i8, opaque*, i64 }**, { { { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }, { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } }, { { { opaque*, { { opaque } }, { { i64 } } } }, { { <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>**, <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>**, { { <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>** } } } } }, i8, { { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } } }*, i32, i32 }, <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>, i8, i8, i8, i8, i8, opaque*, i64 }**, { { { { { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }, { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } }, { { { opaque*, { { opaque } }, { { i64 } } } }, { { <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>**, <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>**, { { <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>** } } } } }, i8, { { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } } }*, i32, i32 }, <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>, i8, i8, i8, i8, i8, opaque*, i64 }** } } } } }, i8, i8, i8, i8, i64, i64 }* <%ID>, i64 <INT>, i32 <INT>
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }* <%ID> to i8*                                                     

<%ID> = bitcast double <%ID> to i64                                                                                     
<%ID> = bitcast i64 <%ID> to double                                                                                     
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = load { { { i32*, i64 } } }*, { { { i32*, i64 } } }** <%ID>, align 8                                             
		<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
		<%ID> = phi i32** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    
		<%ID> = bitcast i64 <%ID> to double                                                                                     

<%ID> = bitcast double <%ID> to i64                                                                                     
<%ID> = bitcast i64 <%ID> to double                                                                                     
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = bitcast { { i32*, i64, i64 } }* <%ID> to { { { i32*, i64, i64 } } }*                                            
		<%ID> = bitcast i64 <%ID> to double                                                                                     
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to i8**                                                               

<%ID> = bitcast float* <%ID> to i8*                                                                                     
<%ID> = bitcast i8* <%ID> to float*                                                                                     
<%ID> = bitcast i16* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i16* <%ID> to i8*                                                                                       
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
		<%ID> = getelementptr inbounds i16, i16* <%ID>, i64 <INT>                                                               
		<%ID> = load i16, i16* <%ID>, align 8                                                                                   
		<%ID> = getelementptr inbounds i16, i16* <%ID>, i64 <%ID>                                                               

<%ID> = bitcast float* <%ID> to i8*                                                                                     
<%ID> = bitcast i8* <%ID> to float*                                                                                     
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
		<%ID> = bitcast { <{ { float }, { i8 } }>, [3 x i8] }* <%ID> to i32*                                                    
		<%ID> = inttoptr i64 <%ID> to i32*                                                                                      

<%ID> = bitcast float* <%ID> to i8*                                                                                     
<%ID> = bitcast i8* <%ID> to float*                                                                                     
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
		<%ID> = bitcast <4 x i32> <%ID> to <2 x i64>                                                                            
		<%ID> = bitcast i32** <%ID> to <4 x i32>**                                                                              
		<%ID> = load <2 x i64>, <2 x i64>* <%ID>, align 16                                                                      

<%ID> = bitcast float* <%ID> to i8*                                                                                     
<%ID> = bitcast i8* <%ID> to float*                                                                                     
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
		call void <@ID>({ { i32*, i32*, { { i32* } } } }* nonnull <%ID>, i32* nonnull dereferenceable(4) <%ID>)                 
		<%ID> = icmp ult i16 <%ID>, <%ID>                                                                                       
		<%ID> = bitcast i8* <%ID> to double*                                                                                    

<%ID> = bitcast float* <%ID> to i8*                                                                                     
<%ID> = bitcast i8* <%ID> to float*                                                                                     
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
		<%ID> = select i1 <%ID>, i16 <%ID>, i16 <INT>                                                                           
		<%ID> = add i16 <%ID>, <INT>                                                                                            
		<%ID> = trunc i64 <%ID> to i32                                                                                          

<%ID> = bitcast float* <%ID> to i8*                                                                                     
<%ID> = bitcast i8* <%ID> to float*                                                                                     
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		call void <@ID>({ { i32*, i32*, { { i32* } } } }* nonnull <%ID>, i32* nonnull dereferenceable(4) <%ID>)                 
		tail call void <@ID>(i64* nonnull <@ID>)                                                                                
		<%ID> = select i1 <%ID>, i8* <%ID>, i8* null                                                                            

<%ID> = bitcast float* <%ID> to i8*                                                                                     
<%ID> = bitcast i8* <%ID> to float*                                                                                     
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
		store volatile i32 <INT>, i32* <%ID>, align 4                                                                           
		<%ID> = alloca [100 x i8], align 16                                                                                     
		<%ID> = select i1 <%ID>, i16 <%ID>, i16 <%ID>                                                                           

<%ID> = bitcast float* <%ID> to i8*                                                                                     
<%ID> = bitcast i8* <%ID> to float*                                                                                     
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
		store i32* null, i32** <%ID>, align 8                                                                                   
		store i32* <%ID>, i32** <%ID>, align 8                                                                                  

<%ID> = bitcast float* <%ID> to i8*                                                                                     
<%ID> = bitcast i8* <%ID> to float*                                                                                     
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = bitcast i8* <%ID> to float*                                                                                     
		<%ID> = phi i32* [ null, <%ID> ], [ <%ID>, <%ID> ], [ null, <%ID> ]                                                     
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
		<%ID> = select i1 <%ID>, i8* <%ID>, i8* null                                                                            

<%ID> = bitcast i16* <%ID> to i8*                                                                                       
<%ID> = bitcast i8* <%ID> to i16*                                                                                       
<%ID> = bitcast i32 <%ID> to float                                                                                      
expected answer:
		<%ID> = bitcast float <%ID> to i32                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32 <%ID> to float                                                                                      
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
		<%ID> = inttoptr i64 <%ID> to i32*                                                                                      
		<%ID> = insertelement <8 x float> undef, float <%ID>, <TYP> 0                                                           
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       

<%ID> = bitcast i16* <%ID> to i8*                                                                                       
<%ID> = bitcast i8* <%ID> to i16*                                                                                       
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
		<%ID> = load <2 x i64>, <2 x i64>* <%ID>, align 16                                                                      
		<%ID> = load { { { i32*, i64 } } }*, { { { i32*, i64 } } }** <%ID>, align 8                                             
		store <4 x i32> <%ID>, <4 x i32>* <%ID>, align 16                                                                       

<%ID> = bitcast i16* <%ID> to i8*                                                                                       
<%ID> = bitcast i8* <%ID> to i16*                                                                                       
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
		<%ID> = inttoptr i64 <%ID> to i32*                                                                                      
		call void <@ID>({ { i32*, i32*, { { i32* } } } }* nonnull <%ID>, i32* nonnull dereferenceable(4) <%ID>)                 
		<%ID> = phi i32** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    

<%ID> = bitcast i16* <%ID> to i8*                                                                                       
<%ID> = bitcast i8* <%ID> to i16*                                                                                       
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
		store <2 x i64> <i64 <INT>, i64 <INT>>, <2 x i64>* <%ID>, align 8                                                       
		<%ID> = load { opaque*, opaque* }*, { opaque*, opaque* }** <%ID>, align 8                                               
		<%ID> = getelementptr inbounds { opaque*, opaque* }, { opaque*, opaque* }* <%ID>, i64 <INT>, i32 <INT>                  

<%ID> = bitcast i16* <%ID> to i8*                                                                                       
<%ID> = bitcast i8* <%ID> to i16*                                                                                       
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
		<%ID> = load { { { i32*, i64 } } }*, { { { i32*, i64 } } }** <%ID>, align 8                                             
		define i32 <@ID>({ { { double*, i64, i64 } } }* dereferenceable(24), { { { double*, i64 } } }* dereferenceable(16), { { { double*, i64 } } }* dereferenceable(16)) local_unnamed_addr
		<%ID> = alloca i32, align 4                                                                                             

<%ID> = bitcast i16* <%ID> to i8*                                                                                       
<%ID> = bitcast i8* <%ID> to i16*                                                                                       
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
		<%ID> = getelementptr inbounds { { [32 x i8] }, { i32 (...)** }*, [8 x i8] }, { { [32 x i8] }, { i32 (...)** }*, [8 x i8] }* <%ID>, i64 <INT>, i32 <INT>
		<%ID> = alloca i32*, align 8                                                                                            
		<%ID> = alloca [100 x i8], align 16                                                                                     

<%ID> = bitcast i16* <%ID> to i8*                                                                                       
<%ID> = bitcast i8* <%ID> to i16*                                                                                       
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
		<%ID> = load { { { i32*, i64 } } }*, { { { i32*, i64 } } }** <%ID>, align 8                                             
		<%ID> = phi i32** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    
		<%ID> = inttoptr i64 <%ID> to i32*                                                                                      

<%ID> = bitcast i16* <%ID> to i8*                                                                                       
<%ID> = bitcast i8* <%ID> to i16*                                                                                       
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = bitcast i8* <%ID> to i16*                                                                                       
		<%ID> = inttoptr i64 <%ID> to i32*                                                                                      
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ null, <%ID> ], [ null, <%ID> ]                                                     
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       

<%ID> = bitcast i32 <%ID> to float                                                                                      
<%ID> = bitcast float <%ID> to i32                                                                                      
<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
expected answer:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = bitcast i32* <%ID> to <4 x i32>*                                                                                
		<%ID> = load <4 x i32>, <4 x i32>* <%ID>, align 1                                                                       
		<%ID> = sub <4 x i32> <%ID>, <%ID>                                                                                      

<%ID> = bitcast i32 <%ID> to float                                                                                      
<%ID> = bitcast float <%ID> to i32                                                                                      
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = phi i64 [ <%ID>, <%ID> ], [ 1152921504606846975, <%ID> ]                                                        
		<%ID> = phi i32** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    
		<%ID> = shl i64 <INT>, <%ID>                                                                                            

<%ID> = bitcast i32 <%ID> to float                                                                                      
<%ID> = bitcast float <%ID> to i32                                                                                      
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = shl i64 <INT>, <%ID>                                                                                            
		<%ID> = load i64, i64* <%ID>, align 4                                                                                   
		<%ID> = phi i64 [ <%ID>, <%ID> ], [ 1, <%ID> ]                                                                          

<%ID> = bitcast i32 <%ID> to float                                                                                      
<%ID> = bitcast float <%ID> to i32                                                                                      
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = add nsw i32 <%ID>, <%ID>                                                                                        
		<%ID> = sub nsw i32 <INT>, <%ID>                                                                                        
		<%ID> = select i1 <%ID>, i32 <%ID>, i32 <%ID>                                                                           

<%ID> = bitcast i32 <%ID> to float                                                                                      
<%ID> = bitcast float <%ID> to i32                                                                                      
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = shl i64 <INT>, <%ID>                                                                                            
		<%ID> = bitcast { i64, opaque*, opaque* }** <%ID> to i64*                                                               
		<%ID> = icmp eq { opaque* }* <%ID>, <%ID>                                                                               

<%ID> = bitcast i32 <%ID> to float                                                                                      
<%ID> = bitcast float <%ID> to i32                                                                                      
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = phi i32** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
		store i32* null, i32** <%ID>, align 8                                                                                   

<%ID> = bitcast i32 <%ID> to float                                                                                      
<%ID> = bitcast float <%ID> to i32                                                                                      
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = bitcast float <%ID> to i32                                                                                      
		<%ID> = phi i64 [ <%ID>, <%ID> ], [ undef, <%ID> ]                                                                      
		<%ID> = phi i32* [ null, <%ID> ], [ <%ID>, <%ID> ], [ null, <%ID> ]                                                     
		<%ID> = add <8 x i32> <%ID>, <i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>>   

<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
<%ID> = bitcast i32** <%ID> to i64*                                                                                     
expected answer:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = phi i32** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    
		<%ID> = bitcast { { i32*, i32*, { { i32* } } } }* <%ID> to i64*                                                         
		<%ID> = inttoptr i64 <%ID> to i32*                                                                                      

<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		<%ID> = tail call i32 <@ID>(i32 <%ID>)                                                                                  
		<%ID> = tail call i8* <@ID>(i8* nonnull <%ID>, i8* <%ID>, i64 <%ID>, i64 <%ID>)                                         
		<%ID> = icmp sgt i8 <%ID>, <INT>                                                                                        

<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<%ID> = tail call i32 <@ID>(i32 <%ID>)                                                                                  
		<%ID> = alloca i32, align 4                                                                                             
		<%ID> = call i32 <@ID>(i32 <%ID>)                                                                                       

<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<%ID> = tail call i8* <@ID>(i8* nonnull <%ID>, i8* <%ID>, i64 <%ID>, i64 <%ID>)                                         
		<%ID> = phi <{ { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }*, { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }*, i32, i32, i32, [4 x i8] }>** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]
		<%ID> = tail call i32 <@ID>(i32 <%ID>)                                                                                  

<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = phi i32** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    
		<%ID> = tail call i32 <@ID>(i32 <%ID>)                                                                                  
		<%ID> = tail call i8* <@ID>(i8* nonnull <%ID>, i8* <%ID>, i64 <%ID>, i64 <%ID>)                                         

<%ID> = bitcast i32* <%ID> to <2 x i64>*                                                                                
<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast <2 x i64>* <%ID> to i32*                                                                                
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = getelementptr inbounds { { { { { i32*, i64 } } }*, { { { i32*, i64, i64 } } }* }, { { { { i32*, i64 } } }* } }, { { { { { i32*, i64 } } }*, { { { i32*, i64, i64 } } }* }, { { { { i32*, i64 } } }* } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>
		<%ID> = tail call i8* <@ID>(i8* nonnull <%ID>, i8* <%ID>, i64 <%ID>, i64 <%ID>)                                         
		<%ID> = tail call i32 <@ID>(i32 <%ID>)                                                                                  

<%ID> = bitcast i32** <%ID> to i64*                                                                                     
<%ID> = bitcast i64* <%ID> to i32**                                                                                     
<%ID> = bitcast i32* <%ID> to i64*                                                                                      
expected answer:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
		<%ID> = bitcast i32* <%ID> to i64*                                                                                      
		call void <@ID>(i8* <%ID>, i8* nonnull <%ID>, i64 <INT>, i32 <INT>, i1 false)                                           
		<%ID> = getelementptr inbounds { { i8 } }, { { i8 } }* <%ID>, i64 <INT>                                                 
		<%ID> = getelementptr inbounds { { { { { { float*, { i8 }, { i64 } } }, { { { { { float*, { i8 }, { i64 } } }, { { { float*, i64, i64 } } }*, { i64 }, { i64 }, i64 } } }, { i8 }, { i64 }, i64 } } } }, { { { { { { float*, { i8 }, { i64 } } }, { { { { { float*, { i8 }, { i64 } } }, { { { float*, i64, i64 } } }*, { i64 }, { i64 }, i64 } } }, { i8 }, { i64 }, i64 } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>

<%ID> = bitcast i32** <%ID> to i64*                                                                                     
<%ID> = bitcast i64* <%ID> to i32**                                                                                     
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<%ID> = bitcast i64* <%ID> to i8*                                                                                       
		<%ID> = alloca i32, align 4                                                                                             
		<%ID> = bitcast { { { i32*, i64 } } }* <%ID> to i8*                                                                     

<%ID> = bitcast i32** <%ID> to i64*                                                                                     
<%ID> = bitcast i64* <%ID> to i32**                                                                                     
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		call void <@ID>(i8* <%ID>, i8* nonnull <%ID>, i64 <INT>, i32 <INT>, i1 false)                                           
		<%ID> = load i8, i8* <%ID>, align 8                                                                                     
		call void <@ID>(i8* nonnull <%ID>, i8* nonnull <%ID>, i64 <INT>, i32 <INT>, i1 false)                                   

<%ID> = bitcast i32** <%ID> to i64*                                                                                     
<%ID> = bitcast i64* <%ID> to i32**                                                                                     
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = getelementptr inbounds { { { i8 } }, i64, i64, i32*, i32*, { float*, i32*, i64, i64 } }, { { { i8 } }, i64, i64, i32*, i32*, { float*, i32*, i64, i64 } }* <%ID>, i64 <INT>, i32 <INT>
		<%ID> = getelementptr inbounds { { i8 } }, { { i8 } }* <%ID>, i64 <INT>                                                 
		<%ID> = getelementptr inbounds { { { i8 } }, i64, i64, i32*, i32*, { float*, i32*, i64, i64 } }, { { { i8 } }, i64, i64, i32*, i32*, { float*, i32*, i64, i64 } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>

<%ID> = bitcast i32** <%ID> to i64*                                                                                     
<%ID> = bitcast i64* <%ID> to i32**                                                                                     
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = bitcast i64* <%ID> to i32**                                                                                     
		<%ID> = getelementptr inbounds { { i8 } }, { { i8 } }* <%ID>, i64 <INT>                                                 
		<%ID> = getelementptr inbounds { { { i32*, i64 } } }, { { { i32*, i64 } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = getelementptr inbounds { float*, i32*, i64, i64 }, { float*, i32*, i64, i64 }* <%ID>, i64 <INT>, i32 <INT>      

<%ID> = bitcast i32* <%ID> to i64*                                                                                      
<%ID> = bitcast i64* <%ID> to i32*                                                                                      
<%ID> = bitcast i32* <%ID> to i8*                                                                                       
expected answer:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8*                                                                                       
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
		call void <@ID>({ { i32*, i32*, { { i32* } } } }* nonnull <%ID>, i32* nonnull dereferenceable(4) <%ID>)                 
		<%ID> = alloca i32, align 4                                                                                             
		store i32 <%ID>, i32* <%ID>, align 4                                                                                    

<%ID> = bitcast i32* <%ID> to i64*                                                                                      
<%ID> = bitcast i64* <%ID> to i32*                                                                                      
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		store i16 <INT>, i16* <%ID>, align 8                                                                                    
		<%ID> = getelementptr inbounds { { { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }, { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } }, { { { opaque*, { { opaque } }, { { i64 } } } }, { { <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>**, <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>**, { { <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>** } } } } }, i8, { { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } } }*, i32, i32 }, { { { opaque*, { { opaque } }, { { i64 } } } }, { { { { { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }, { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } }, { { { opaque*, { { opaque } }, { { i64 } } } }, { { <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>**, <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>**, { { <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>** } } } } }, i8, { { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } } }*, i32, i32 }, <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>, i8, i8, i8, i8, i8, opaque*, i64 }**, { { { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }, { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } }, { { { opaque*, { { opaque } }, { { i64 } } } }, { { <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>**, <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>**, { { <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>** } } } } }, i8, { { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } } }*, i32, i32 }, <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>, i8, i8, i8, i8, i8, opaque*, i64 }**, { { { { { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }, { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } }, { { { opaque*, { { opaque } }, { { i64 } } } }, { { <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>**, <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>**, { { <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>** } } } } }, i8, { { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } } }*, i32, i32 }, <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>, i8, i8, i8, i8, i8, opaque*, i64 }** } } } } }, i8, i8, i8, i8, i64, i64 }, { { { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }, { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } }, { { { opaque*, { { opaque } }, { { i64 } } } }, { { <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>**, <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>**, { { <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>** } } } } }, i8, { { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } } }*, i32, i32 }, { { { opaque*, { { opaque } }, { { i64 } } } }, { { { { { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }, { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } }, { { { opaque*, { { opaque } }, { { i64 } } } }, { { <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>**, <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>**, { { <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>** } } } } }, i8, { { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } } }*, i32, i32 }, <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>, i8, i8, i8, i8, i8, opaque*, i64 }**, { { { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }, { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } }, { { { opaque*, { { opaque } }, { { i64 } } } }, { { <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>**, <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>**, { { <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>** } } } } }, i8, { { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } } }*, i32, i32 }, <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>, i8, i8, i8, i8, i8, opaque*, i64 }**, { { { { { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }, { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } }, { { { opaque*, { { opaque } }, { { i64 } } } }, { { <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>**, <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>**, { { <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>** } } } } }, i8, { { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } } }*, i32, i32 }, <{ opaque, { { { { { { i64, i64, i8* } } } } } }, i16, [6 x i8] }>, i8, i8, i8, i8, i8, opaque*, i64 }** } } } } }, i8, i8, i8, i8, i64, i64 }* <%ID>, i64 <INT>, i32 <INT>
		<%ID> = icmp eq i32* <%ID>, null                                                                                        

<%ID> = bitcast i32* <%ID> to i64*                                                                                      
<%ID> = bitcast i64* <%ID> to i32*                                                                                      
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
		<%ID> = icmp eq i32* <%ID>, null                                                                                        
		<%ID> = load { { { i32*, i64 } } }*, { { { i32*, i64 } } }** <%ID>, align 8                                             
		<%ID> = phi i32** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    

<%ID> = bitcast i32* <%ID> to i64*                                                                                      
<%ID> = bitcast i64* <%ID> to i32*                                                                                      
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = bitcast i64* <%ID> to i32*                                                                                      
		<%ID> = icmp eq i32* <%ID>, null                                                                                        
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ null, <%ID> ], [ null, <%ID> ]                                                     
		<%ID> = getelementptr inbounds { <{ { { { i32*, i64 } } }*, { { { i32*, i64 } } }*, { i8 }, [7 x i8] }>, { { { i32*, i64, i64 } } }* }, { <{ { { { i32*, i64 } } }*, { { { i32*, i64 } } }*, { i8 }, [7 x i8] }>, { { { i32*, i64, i64 } } }* }* <%ID>, i64 <INT>, i32 <INT>

<%ID> = bitcast i32* <%ID> to i8*                                                                                       
<%ID> = bitcast i8* <%ID> to i32*                                                                                       
<%ID> = bitcast i32** <%ID> to i8*                                                                                      
expected answer:
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
		<%ID> = bitcast i32** <%ID> to i8*                                                                                      
		<%ID> = trunc i64 <%ID> to i8                                                                                           
		<%ID> = phi i8* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      
		<%ID> = zext i8 <%ID> to i64                                                                                            

<%ID> = bitcast i32* <%ID> to i8*                                                                                       
<%ID> = bitcast i8* <%ID> to i32*                                                                                       
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = bitcast i8* <%ID> to i8**                                                                                       
		<%ID> = bitcast i8* <%ID> to i64*                                                                                       
		<%ID> = load { i32 (...)** }*, { i32 (...)** }** <%ID>, align 8                                                         

<%ID> = bitcast i32* <%ID> to i8*                                                                                       
<%ID> = bitcast i8* <%ID> to i32*                                                                                       
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
		<%ID> = phi i8* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      
		<%ID> = bitcast i8* <%ID> to i64*                                                                                       
		<%ID> = trunc i64 <%ID> to i8                                                                                           

<%ID> = bitcast i32** <%ID> to i8*                                                                                      
<%ID> = bitcast i8* <%ID> to i32**                                                                                      
<%ID> = bitcast i32** <%ID> to i8**                                                                                     
expected answer:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
Nearest neighbors:
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
		<%ID> = phi i32** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    
		call void <@ID>(i8* nonnull <%ID>)                                                                                      
		store i32* null, i32** <%ID>, align 8                                                                                   

<%ID> = bitcast i32** <%ID> to i8*                                                                                      
<%ID> = bitcast i8* <%ID> to i32**                                                                                      
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		<%ID> = bitcast i8* <%ID> to i32**                                                                                      
		<%ID> = bitcast i32** <%ID> to i8**                                                                                     
		<%ID> = phi i32* [ null, <%ID> ], [ <%ID>, <%ID> ], [ null, <%ID> ]                                                     
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ null, <%ID> ], [ null, <%ID> ]                                                     

<%ID> = bitcast i32** <%ID> to i8**                                                                                     
<%ID> = bitcast i8** <%ID> to i32**                                                                                     
<%ID> = bitcast i32* <%ID> to i8**                                                                                      
expected answer:
		<%ID> = bitcast i8** <%ID> to i32*                                                                                      
Nearest neighbors:
		<%ID> = bitcast i8** <%ID> to i32**                                                                                     
		<%ID> = bitcast i32* <%ID> to i8**                                                                                      
		invoke void <@ID>({ { { { { { i64, i64, i8* } } } } } }* nonnull sret <%ID>, { { i8*, i64 }, [32 x i8] }* nonnull dereferenceable(48) <%ID>, { { i8*, i64 }, [32 x i8] }* nonnull dereferenceable(48) <%ID>, { { i8*, i64 }, [32 x i8] }* nonnull dereferenceable(48) <%ID>)
 to label <%ID> unwind label <%ID>
		<%ID> = tail call i64 <@ID>(i8* nonnull <%ID>)                                                                          
		<%ID> = bitcast i64* <%ID> to i8**                                                                                      
------------------------------------------------------------------------------------------------------------------------
Arithmetic integer binary operations (inverse operations analogy): 168
------------------------------------------------------------------------------------------------------------------------
--- Correct predictions:None
--- Incorrect predictions:

<%ID> = add i32 <%ID>, <%ID>                                                                                            
<%ID> = sub i32 <%ID>, <%ID>                                                                                            
<%ID> = mul i32 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = udiv i32 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = mul i32 <%ID>, <%ID>                                                                                            
		<%ID> = sub i32 <%ID>, <%ID>                                                                                            
		<%ID> = add nsw i32 <%ID>, <INT>                                                                                        
		<%ID> = icmp ne i32 <%ID>, <INT>                                                                                        
		<%ID> = or i32 <%ID>, <INT>                                                                                             

<%ID> = add i32 <%ID>, <%ID>                                                                                            
<%ID> = sub i32 <%ID>, <%ID>                                                                                            
<%ID> = mul i32 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = udiv i32 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = mul i32 <%ID>, <%ID>                                                                                            
		<%ID> = sub i32 <%ID>, <%ID>                                                                                            
		<%ID> = add nsw i32 <%ID>, <INT>                                                                                        
		<%ID> = icmp ne i32 <%ID>, <INT>                                                                                        
		<%ID> = or i32 <%ID>, <INT>                                                                                             

<%ID> = add i64 <%ID>, <%ID>                                                                                            
<%ID> = sub i64 <%ID>, <%ID>                                                                                            
<%ID> = mul i64 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = udiv i64 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = mul i64 <%ID>, <%ID>                                                                                            
		<%ID> = sub i64 <%ID>, <%ID>                                                                                            
		<%ID> = lshr i64 <%ID>, <INT>                                                                                           
		<%ID> = getelementptr inbounds { i32, i32, i32, i32, i8*, i8*, i8*, i8*, { i32 (...)** }*, { { i32 (...)** }*, { i32 (...)** }*, i32, i32, i8*, i8*, i64, i32, i8*, i8*, i32, i32, opaque* }*, { i32* }, { i64*, [2 x i64] } }, { i32, i32, i32, i32, i8*, i8*, i8*, i8*, { i32 (...)** }*, { { i32 (...)** }*, { i32 (...)** }*, i32, i32, i8*, i8*, i64, i32, i8*, i8*, i32, i32, opaque* }*, { i32* }, { i64*, [2 x i64] } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i64 <INT>
		<%ID> = or i1 <%ID>, <%ID>                                                                                              

<%ID> = add i64 <%ID>, <%ID>                                                                                            
<%ID> = sub i64 <%ID>, <%ID>                                                                                            
<%ID> = mul i64 <%ID>, <%ID>                                                                                            
expected answer:
		<%ID> = udiv i64 <%ID>, <%ID>                                                                                           
Nearest neighbors:
		<%ID> = mul i64 <%ID>, <%ID>                                                                                            
		<%ID> = sub i64 <%ID>, <%ID>                                                                                            
		<%ID> = lshr i64 <%ID>, <INT>                                                                                           
		<%ID> = getelementptr inbounds { i32, i32, i32, i32, i8*, i8*, i8*, i8*, { i32 (...)** }*, { { i32 (...)** }*, { i32 (...)** }*, i32, i32, i8*, i8*, i64, i32, i8*, i8*, i32, i32, opaque* }*, { i32* }, { i64*, [2 x i64] } }, { i32, i32, i32, i32, i8*, i8*, i8*, i8*, { i32 (...)** }*, { { i32 (...)** }*, { i32 (...)** }*, i32, i32, i8*, i8*, i64, i32, i8*, i8*, i32, i32, opaque* }*, { i32* }, { i64*, [2 x i64] } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i64 <INT>
		<%ID> = or i1 <%ID>, <%ID>                                                                                              
------------------------------------------------------------------------------------------------------------------------
Arithmetic flpt binary operations (inverse operations analogy): 288
------------------------------------------------------------------------------------------------------------------------
--- Correct predictions:

<%ID> = fadd float <%ID>, <%ID>                                                                                         
<%ID> = fsub float <%ID>, <%ID>                                                                                         
<%ID> = fmul float <%ID>, <%ID>                                                                                         
expected answer:
		<%ID> = fdiv float <%ID>, <%ID>                                                                                         
Nearest neighbors:
		<%ID> = fmul float <%ID>, <%ID>                                                                                         
		<%ID> = fsub float <%ID>, <%ID>                                                                                         
		<%ID> = tail call float <@ID>(float <%ID>)                                                                              
		<%ID> = fdiv float <%ID>, <%ID>                                                                                         
		<%ID> = fcmp ogt float <%ID>, <%ID>                                                                                     

--- Incorrect predictions:

<%ID> = fadd fast float <%ID>, <%ID>                                                                                    
<%ID> = fsub fast float <%ID>, <%ID>                                                                                    
<%ID> = fmul fast float <%ID>, <%ID>                                                                                    
expected answer:
		<%ID> = fdiv fast float <%ID>, <%ID>                                                                                    
Nearest neighbors:
		<%ID> = fmul fast float <%ID>, <%ID>                                                                                    
		<%ID> = fsub fast float <%ID>, <%ID>                                                                                    
		<%ID> = shufflevector <8 x float> <%ID>, <8 x float> undef, <8 x i32> zeroinitializer                                   
		<%ID> = insertelement <8 x float> undef, float <%ID>, <TYP> 0                                                           
		<%ID> = phi i64 [ 0, <%ID> ], [ <%ID>, <%ID> ]                                                                          

<%ID> = fadd <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = fsub <4 x float> <%ID>, <%ID>                                                                                   
<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fdiv <4 x float> <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fsub <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   
		store <4 x float> <%ID>, <4 x float>* <%ID>, align 4                                                                    
		store <4 x float> <%ID>, <4 x float>* <%ID>, align 16                                                                   
		<%ID> = inttoptr i64 <%ID> to <4 x float>*                                                                              

<%ID> = fadd fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fsub fast <4 x float> <%ID>, <%ID>                                                                              
<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fdiv fast <4 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fsub fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul fast <4 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul <4 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fsub <4 x float> <%ID>, <%ID>                                                                                   
		store <4 x float> <%ID>, <4 x float>* <%ID>, align 16                                                                   

<%ID> = fadd <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   
<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fdiv <8 x float> <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fmul <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
		store <8 x float> <%ID>, <8 x float>* <%ID>, align 4                                                                    
		<%ID> = shufflevector <8 x float> <%ID>, <8 x float> undef, <8 x i32> zeroinitializer                                   

<%ID> = fadd fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fsub fast <8 x float> <%ID>, <%ID>                                                                              
<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
expected answer:
		<%ID> = fdiv fast <8 x float> <%ID>, <%ID>                                                                              
Nearest neighbors:
		<%ID> = fsub fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = fmul fast <8 x float> <%ID>, <%ID>                                                                              
		<%ID> = shufflevector <8 x float> <%ID>, <8 x float> undef, <8 x i32> zeroinitializer                                   
		<%ID> = fsub <8 x float> <%ID>, <%ID>                                                                                   
		<%ID> = insertelement <8 x float> undef, float <%ID>, <TYP> 0                                                           

<%ID> = fadd double <%ID>, <%ID>                                                                                        
<%ID> = fsub double <%ID>, <%ID>                                                                                        
<%ID> = fmul double <%ID>, <%ID>                                                                                        
expected answer:
		<%ID> = fdiv double <%ID>, <%ID>                                                                                        
Nearest neighbors:
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
		<%ID> = fsub double <%ID>, <%ID>                                                                                        
		<%ID> = tail call double <@ID>(double <%ID>)                                                                            
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         

<%ID> = fadd fast double <%ID>, <%ID>                                                                                   
<%ID> = fsub fast double <%ID>, <%ID>                                                                                   
<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
expected answer:
		<%ID> = fdiv fast double <%ID>, <%ID>                                                                                   
Nearest neighbors:
		<%ID> = fsub fast double <%ID>, <%ID>                                                                                   
		<%ID> = fmul fast double <%ID>, <%ID>                                                                                   
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         
		<%ID> = fsub double <%ID>, <%ID>                                                                                        
		<%ID> = fmul double <%ID>, <%ID>                                                                                        

<%ID> = fadd <2 x double> <%ID>, <%ID>                                                                                  
<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  
<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
expected answer:
		<%ID> = fdiv <2 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
		store <2 x double> <%ID>, <2 x double>* <%ID>, align 8                                                                  
		<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             

<%ID> = fadd fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
expected answer:
		<%ID> = fdiv fast <2 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fsub fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul fast <2 x double> <%ID>, <%ID>                                                                             
		<%ID> = fsub <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = shufflevector <2 x double> <%ID>, <2 x double> undef, <2 x i32> zeroinitializer                                 

<%ID> = fadd <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
expected answer:
		<%ID> = fdiv <4 x double> <%ID>, <%ID>                                                                                  
Nearest neighbors:
		<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = shufflevector <4 x double> <%ID>, <4 x double> undef, <4 x i32> zeroinitializer                                 

<%ID> = fadd fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
expected answer:
		<%ID> = fdiv fast <4 x double> <%ID>, <%ID>                                                                             
Nearest neighbors:
		<%ID> = fsub fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fmul fast <4 x double> <%ID>, <%ID>                                                                             
		<%ID> = fsub <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul <4 x double> <%ID>, <%ID>                                                                                  
		<%ID> = shufflevector <4 x double> <%ID>, <4 x double> undef, <4 x i32> zeroinitializer                                 
------------------------------------------------------------------------------------------------------------------------
Trunc - s/zext (inverse operations analogy): 91
------------------------------------------------------------------------------------------------------------------------
--- Correct predictions:

<%ID> = trunc <4 x i64> <%ID> to <4 x i32>                                                                              
<%ID> = sext <4 x i32> <%ID> to <4 x i64>                                                                               
<%ID> = trunc i128 <%ID> to i64                                                                                         
expected answer:
		<%ID> = sext i64 <%ID> to i128                                                                                          
Nearest neighbors:
		<%ID> = trunc i128 <%ID> to i64                                                                                         
		<%ID> = sext <4 x i32> <%ID> to <4 x i64>                                                                               
		<%ID> = sext i64 <%ID> to i128                                                                                          
		<%ID> = add i128 <%ID>, <INT>                                                                                           
		<%ID> = lshr i128 <%ID>, <INT>                                                                                          

<%ID> = trunc <4 x i64> <%ID> to <4 x i32>                                                                              
<%ID> = sext <4 x i32> <%ID> to <4 x i64>                                                                               
<%ID> = trunc i64 <%ID> to i32                                                                                          
expected answer:
		<%ID> = sext i32 <%ID> to i64                                                                                           
Nearest neighbors:
		<%ID> = trunc i64 <%ID> to i32                                                                                          
		<%ID> = add nuw i64 <%ID>, <INT>                                                                                        
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
		<%ID> = sext i32 <%ID> to i64                                                                                           
		<%ID> = add nsw i32 <%ID>, <INT>                                                                                        

<%ID> = trunc i128 <%ID> to i64                                                                                         
<%ID> = sext i64 <%ID> to i128                                                                                          
<%ID> = trunc i128 <%ID> to i64                                                                                         
expected answer:
		<%ID> = zext i64 <%ID> to i128                                                                                          
Nearest neighbors:
		<%ID> = sext i64 <%ID> to i128                                                                                          
		<%ID> = mul nsw i128 <%ID>, <%ID>                                                                                       
		<%ID> = trunc i128 <%ID> to i64                                                                                         
		<%ID> = zext i64 <%ID> to i128                                                                                          
		<%ID> = shl i64 <%ID>, <%ID>                                                                                            

<%ID> = trunc i128 <%ID> to i64                                                                                         
<%ID> = sext i64 <%ID> to i128                                                                                          
<%ID> = trunc i32 <%ID> to i16                                                                                          
expected answer:
		<%ID> = zext i16 <%ID> to i32                                                                                           
Nearest neighbors:
		<%ID> = trunc i32 <%ID> to i16                                                                                          
		<%ID> = sext i64 <%ID> to i128                                                                                          
		<%ID> = zext i16 <%ID> to i32                                                                                           
		<%ID> = phi i16 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                    
		<%ID> = icmp sle i32 <%ID>, <%ID>                                                                                       

<%ID> = trunc i128 <%ID> to i64                                                                                         
<%ID> = zext i64 <%ID> to i128                                                                                          
<%ID> = trunc i32 <%ID> to i16                                                                                          
expected answer:
		<%ID> = zext i16 <%ID> to i32                                                                                           
Nearest neighbors:
		<%ID> = trunc i32 <%ID> to i16                                                                                          
		<%ID> = zext i64 <%ID> to i128                                                                                          
		<%ID> = phi i16 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                    
		<%ID> = zext i16 <%ID> to i32                                                                                           
		store i16 <%ID>, i16* <%ID>, align 2                                                                                    

<%ID> = trunc i16 <%ID> to i8                                                                                           
<%ID> = zext i8 <%ID> to i16                                                                                            
<%ID> = trunc i32 <%ID> to i16                                                                                          
expected answer:
		<%ID> = sext i16 <%ID> to i32                                                                                           
Nearest neighbors:
		<%ID> = trunc i32 <%ID> to i16                                                                                          
		<%ID> = zext i8 <%ID> to i16                                                                                            
		<%ID> = getelementptr inbounds { i32, i8* }, { i32, i8* }* <%ID>, i64 <INT>, i32 <INT>                                  
		<%ID> = sext i16 <%ID> to i32                                                                                           
		<%ID> = or i16 <%ID>, <%ID>                                                                                             

<%ID> = trunc i32 <%ID> to i16                                                                                          
<%ID> = sext i16 <%ID> to i32                                                                                           
<%ID> = trunc i32 <%ID> to i16                                                                                          
expected answer:
		<%ID> = zext i16 <%ID> to i32                                                                                           
Nearest neighbors:
		<%ID> = sext i16 <%ID> to i32                                                                                           
		<%ID> = zext i16 <%ID> to i32                                                                                           
		<%ID> = trunc i32 <%ID> to i16                                                                                          
		<%ID> = icmp slt i16 <%ID>, <INT>                                                                                       
		<%ID> = select i1 <%ID>, i16* <%ID>, i16* <%ID>                                                                         

<%ID> = trunc i32 <%ID> to i8                                                                                           
<%ID> = sext i8 <%ID> to i32                                                                                            
<%ID> = trunc i32 <%ID> to i8                                                                                           
expected answer:
		<%ID> = zext i8 <%ID> to i32                                                                                            
Nearest neighbors:
		<%ID> = sext i8 <%ID> to i32                                                                                            
		<%ID> = icmp slt i8 <%ID>, <INT>                                                                                        
		<%ID> = zext i8 <%ID> to i32                                                                                            
		switch i8 <%ID>, label <%ID> [
 i8 <INT>, label <%ID>
 i8 <INT>, label <%ID>
 i8 <INT>, label <%ID>
 i8 <INT>, label <%ID>]
		<%ID> = select i1 <%ID>, i8 <INT>, i8 <INT>                                                                             

<%ID> = trunc i64 <%ID> to i16                                                                                          
<%ID> = sext i16 <%ID> to i64                                                                                           
<%ID> = trunc i64 <%ID> to i32                                                                                          
expected answer:
		<%ID> = sext i32 <%ID> to i64                                                                                           
Nearest neighbors:
		<%ID> = sext i16 <%ID> to i64                                                                                           
		<%ID> = trunc i64 <%ID> to i32                                                                                          
		<%ID> = sext i32 <%ID> to i64                                                                                           
		<%ID> = icmp ugt i8 <%ID>, <INT>                                                                                        
		<%ID> = bitcast { i64, opaque*, opaque* }** <%ID> to i64*                                                               

<%ID> = trunc i64 <%ID> to i16                                                                                          
<%ID> = zext i16 <%ID> to i64                                                                                           
<%ID> = trunc i64 <%ID> to i32                                                                                          
expected answer:
		<%ID> = sext i32 <%ID> to i64                                                                                           
Nearest neighbors:
		<%ID> = zext i16 <%ID> to i64                                                                                           
		<%ID> = trunc i64 <%ID> to i32                                                                                          
		<%ID> = sext i32 <%ID> to i64                                                                                           
		<%ID> = add i32 <%ID>, <%ID>                                                                                            
		<%ID> = icmp ugt i16 <%ID>, <%ID>                                                                                       

<%ID> = trunc i64 <%ID> to i32                                                                                          
<%ID> = sext i32 <%ID> to i64                                                                                           
<%ID> = trunc i64 <%ID> to i32                                                                                          
expected answer:
		<%ID> = zext i32 <%ID> to i64                                                                                           
Nearest neighbors:
		<%ID> = sext i32 <%ID> to i64                                                                                           
		<%ID> = add nsw i32 <%ID>, <INT>                                                                                        
		<%ID> = zext i32 <%ID> to i64                                                                                           
		<%ID> = icmp sgt i32 <%ID>, <INT>                                                                                       
		<%ID> = trunc i64 <%ID> to i32                                                                                          

--- Incorrect predictions:

<%ID> = trunc <4 x i64> <%ID> to <4 x i32>                                                                              
<%ID> = sext <4 x i32> <%ID> to <4 x i64>                                                                               
<%ID> = trunc i128 <%ID> to i64                                                                                         
expected answer:
		<%ID> = zext i64 <%ID> to i128                                                                                          
Nearest neighbors:
		<%ID> = trunc i128 <%ID> to i64                                                                                         
		<%ID> = sext <4 x i32> <%ID> to <4 x i64>                                                                               
		<%ID> = sext i64 <%ID> to i128                                                                                          
		<%ID> = add i128 <%ID>, <INT>                                                                                           
		<%ID> = lshr i128 <%ID>, <INT>                                                                                          

<%ID> = trunc <4 x i64> <%ID> to <4 x i32>                                                                              
<%ID> = sext <4 x i32> <%ID> to <4 x i64>                                                                               
<%ID> = trunc i16 <%ID> to i8                                                                                           
expected answer:
		<%ID> = zext i8 <%ID> to i16                                                                                            
Nearest neighbors:
		<%ID> = trunc i16 <%ID> to i8                                                                                           
		<%ID> = icmp ult i16 <%ID>, <INT>                                                                                       
		<%ID> = icmp eq i16 <%ID>, <%ID>                                                                                        
		<%ID> = sext <4 x i32> <%ID> to <4 x i64>                                                                               
		<%ID> = icmp ugt i16 <%ID>, <%ID>                                                                                       

<%ID> = trunc <4 x i64> <%ID> to <4 x i32>                                                                              
<%ID> = sext <4 x i32> <%ID> to <4 x i64>                                                                               
<%ID> = trunc i32 <%ID> to i16                                                                                          
expected answer:
		<%ID> = sext i16 <%ID> to i32                                                                                           
Nearest neighbors:
		<%ID> = trunc i32 <%ID> to i16                                                                                          
		<%ID> = sext <4 x i32> <%ID> to <4 x i64>                                                                               
		<%ID> = phi i16 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                    
		<%ID> = icmp eq i16 <%ID>, <%ID>                                                                                        
		<%ID> = sext i16 <%ID> to i64                                                                                           

<%ID> = trunc <4 x i64> <%ID> to <4 x i32>                                                                              
<%ID> = sext <4 x i32> <%ID> to <4 x i64>                                                                               
<%ID> = trunc i32 <%ID> to i16                                                                                          
expected answer:
		<%ID> = zext i16 <%ID> to i32                                                                                           
Nearest neighbors:
		<%ID> = trunc i32 <%ID> to i16                                                                                          
		<%ID> = sext <4 x i32> <%ID> to <4 x i64>                                                                               
		<%ID> = phi i16 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                    
		<%ID> = icmp eq i16 <%ID>, <%ID>                                                                                        
		<%ID> = sext i16 <%ID> to i64                                                                                           

<%ID> = trunc <4 x i64> <%ID> to <4 x i32>                                                                              
<%ID> = sext <4 x i32> <%ID> to <4 x i64>                                                                               
<%ID> = trunc i32 <%ID> to i8                                                                                           
expected answer:
		<%ID> = sext i8 <%ID> to i32                                                                                            
Nearest neighbors:
		<%ID> = trunc i32 <%ID> to i8                                                                                           
		<%ID> = load i32, i32* <%ID>, align 8                                                                                   
		<%ID> = trunc i64 <%ID> to i8                                                                                           
		<%ID> = sext <4 x i32> <%ID> to <4 x i64>                                                                               
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       

<%ID> = trunc <4 x i64> <%ID> to <4 x i32>                                                                              
<%ID> = sext <4 x i32> <%ID> to <4 x i64>                                                                               
<%ID> = trunc i32 <%ID> to i8                                                                                           
expected answer:
		<%ID> = zext i8 <%ID> to i32                                                                                            
Nearest neighbors:
		<%ID> = trunc i32 <%ID> to i8                                                                                           
		<%ID> = load i32, i32* <%ID>, align 8                                                                                   
		<%ID> = trunc i64 <%ID> to i8                                                                                           
		<%ID> = sext <4 x i32> <%ID> to <4 x i64>                                                                               
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       

<%ID> = trunc <4 x i64> <%ID> to <4 x i32>                                                                              
<%ID> = sext <4 x i32> <%ID> to <4 x i64>                                                                               
<%ID> = trunc i64 <%ID> to i16                                                                                          
expected answer:
		<%ID> = sext i16 <%ID> to i64                                                                                           
Nearest neighbors:
		<%ID> = trunc i64 <%ID> to i16                                                                                          
		<%ID> = sext <4 x i32> <%ID> to <4 x i64>                                                                               
		<%ID> = icmp eq i16 <%ID>, <%ID>                                                                                        
		<%ID> = trunc i64 <%ID> to i8                                                                                           
		<%ID> = icmp ne i16 <%ID>, <INT>                                                                                        

<%ID> = trunc <4 x i64> <%ID> to <4 x i32>                                                                              
<%ID> = sext <4 x i32> <%ID> to <4 x i64>                                                                               
<%ID> = trunc i64 <%ID> to i16                                                                                          
expected answer:
		<%ID> = zext i16 <%ID> to i64                                                                                           
Nearest neighbors:
		<%ID> = trunc i64 <%ID> to i16                                                                                          
		<%ID> = sext <4 x i32> <%ID> to <4 x i64>                                                                               
		<%ID> = icmp eq i16 <%ID>, <%ID>                                                                                        
		<%ID> = trunc i64 <%ID> to i8                                                                                           
		<%ID> = icmp ne i16 <%ID>, <INT>                                                                                        

<%ID> = trunc <4 x i64> <%ID> to <4 x i32>                                                                              
<%ID> = sext <4 x i32> <%ID> to <4 x i64>                                                                               
<%ID> = trunc i64 <%ID> to i32                                                                                          
expected answer:
		<%ID> = zext i32 <%ID> to i64                                                                                           
Nearest neighbors:
		<%ID> = trunc i64 <%ID> to i32                                                                                          
		<%ID> = add nuw i64 <%ID>, <INT>                                                                                        
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
		<%ID> = sext i32 <%ID> to i64                                                                                           
		<%ID> = add nsw i32 <%ID>, <INT>                                                                                        

<%ID> = trunc <4 x i64> <%ID> to <4 x i32>                                                                              
<%ID> = sext <4 x i32> <%ID> to <4 x i64>                                                                               
<%ID> = trunc i64 <%ID> to i8                                                                                           
expected answer:
		<%ID> = sext i8 <%ID> to i64                                                                                            
Nearest neighbors:
		<%ID> = trunc i64 <%ID> to i8                                                                                           
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
		<%ID> = phi i8* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      
		<%ID> = icmp ugt i32 <%ID>, <INT>                                                                                       
		<%ID> = load i32, i32* <%ID>, align 8                                                                                   

<%ID> = trunc <4 x i64> <%ID> to <4 x i32>                                                                              
<%ID> = sext <4 x i32> <%ID> to <4 x i64>                                                                               
<%ID> = trunc i8 <%ID> to i1                                                                                            
expected answer:
		<%ID> = zext i1 <%ID> to i8                                                                                             
Nearest neighbors:
		<%ID> = trunc i8 <%ID> to i1                                                                                            
		<%ID> = alloca { float, float }*, align 8                                                                               
		<%ID> = alloca i8, align 1                                                                                              
		<%ID> = extractvalue { i8*, i32 } <%ID>, 1                                                                              
		<%ID> = icmp slt i32 <%ID>, <%ID>                                                                                       

<%ID> = trunc i128 <%ID> to i64                                                                                         
<%ID> = sext i64 <%ID> to i128                                                                                          
<%ID> = trunc i16 <%ID> to i8                                                                                           
expected answer:
		<%ID> = zext i8 <%ID> to i16                                                                                            
Nearest neighbors:
		<%ID> = trunc i16 <%ID> to i8                                                                                           
		<%ID> = sext i64 <%ID> to i128                                                                                          
		<%ID> = or i16 <%ID>, <%ID>                                                                                             
		<%ID> = icmp ugt i16 <%ID>, <%ID>                                                                                       
		<%ID> = getelementptr inbounds { i64, opaque*, opaque* }, { i64, opaque*, opaque* }* <%ID>, i64 <INT>, i32 <INT>        

<%ID> = trunc i128 <%ID> to i64                                                                                         
<%ID> = sext i64 <%ID> to i128                                                                                          
<%ID> = trunc i32 <%ID> to i16                                                                                          
expected answer:
		<%ID> = sext i16 <%ID> to i32                                                                                           
Nearest neighbors:
		<%ID> = trunc i32 <%ID> to i16                                                                                          
		<%ID> = sext i64 <%ID> to i128                                                                                          
		<%ID> = zext i16 <%ID> to i32                                                                                           
		<%ID> = phi i16 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                    
		<%ID> = icmp sle i32 <%ID>, <%ID>                                                                                       

<%ID> = trunc i128 <%ID> to i64                                                                                         
<%ID> = sext i64 <%ID> to i128                                                                                          
<%ID> = trunc i32 <%ID> to i8                                                                                           
expected answer:
		<%ID> = sext i8 <%ID> to i32                                                                                            
Nearest neighbors:
		<%ID> = trunc i32 <%ID> to i8                                                                                           
		<%ID> = sext i64 <%ID> to i128                                                                                          
		store i8 <%ID>, i8* <%ID>, align 1                                                                                      
		<%ID> = getelementptr inbounds { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x double] }, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x double] }* <%ID>, i64 <INT>, i32 <INT>, i64 <%ID>
		<%ID> = trunc i64 <%ID> to i8                                                                                           

<%ID> = trunc i128 <%ID> to i64                                                                                         
<%ID> = sext i64 <%ID> to i128                                                                                          
<%ID> = trunc i32 <%ID> to i8                                                                                           
expected answer:
		<%ID> = zext i8 <%ID> to i32                                                                                            
Nearest neighbors:
		<%ID> = trunc i32 <%ID> to i8                                                                                           
		<%ID> = sext i64 <%ID> to i128                                                                                          
		store i8 <%ID>, i8* <%ID>, align 1                                                                                      
		<%ID> = getelementptr inbounds { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x double] }, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x double] }* <%ID>, i64 <INT>, i32 <INT>, i64 <%ID>
		<%ID> = trunc i64 <%ID> to i8                                                                                           

<%ID> = trunc i128 <%ID> to i64                                                                                         
<%ID> = sext i64 <%ID> to i128                                                                                          
<%ID> = trunc i64 <%ID> to i16                                                                                          
expected answer:
		<%ID> = sext i16 <%ID> to i64                                                                                           
Nearest neighbors:
		<%ID> = trunc i64 <%ID> to i16                                                                                          
		<%ID> = sext i64 <%ID> to i128                                                                                          
		<%ID> = or i16 <%ID>, <%ID>                                                                                             
		<%ID> = trunc i16 <%ID> to i8                                                                                           
		<%ID> = shl i64 <%ID>, <%ID>                                                                                            

<%ID> = trunc i128 <%ID> to i64                                                                                         
<%ID> = sext i64 <%ID> to i128                                                                                          
<%ID> = trunc i64 <%ID> to i16                                                                                          
expected answer:
		<%ID> = zext i16 <%ID> to i64                                                                                           
Nearest neighbors:
		<%ID> = trunc i64 <%ID> to i16                                                                                          
		<%ID> = sext i64 <%ID> to i128                                                                                          
		<%ID> = or i16 <%ID>, <%ID>                                                                                             
		<%ID> = trunc i16 <%ID> to i8                                                                                           
		<%ID> = shl i64 <%ID>, <%ID>                                                                                            

<%ID> = trunc i128 <%ID> to i64                                                                                         
<%ID> = sext i64 <%ID> to i128                                                                                          
<%ID> = trunc i64 <%ID> to i32                                                                                          
expected answer:
		<%ID> = sext i32 <%ID> to i64                                                                                           
Nearest neighbors:
		<%ID> = trunc i64 <%ID> to i32                                                                                          
		<%ID> = sext i64 <%ID> to i128                                                                                          
		<%ID> = phi i64 [ 0, <%ID> ], [ <%ID>, <%ID> ], [ 0, <%ID> ], [ 0, <%ID> ], [ 0, <%ID> ]                                
		<%ID> = shl i64 <%ID>, <%ID>                                                                                            
		<%ID> = load double, double* <%ID>, align 8                                                                             

<%ID> = trunc i128 <%ID> to i64                                                                                         
<%ID> = sext i64 <%ID> to i128                                                                                          
<%ID> = trunc i64 <%ID> to i32                                                                                          
expected answer:
		<%ID> = zext i32 <%ID> to i64                                                                                           
Nearest neighbors:
		<%ID> = trunc i64 <%ID> to i32                                                                                          
		<%ID> = sext i64 <%ID> to i128                                                                                          
		<%ID> = phi i64 [ 0, <%ID> ], [ <%ID>, <%ID> ], [ 0, <%ID> ], [ 0, <%ID> ], [ 0, <%ID> ]                                
		<%ID> = shl i64 <%ID>, <%ID>                                                                                            
		<%ID> = load double, double* <%ID>, align 8                                                                             

<%ID> = trunc i128 <%ID> to i64                                                                                         
<%ID> = sext i64 <%ID> to i128                                                                                          
<%ID> = trunc i64 <%ID> to i8                                                                                           
expected answer:
		<%ID> = sext i8 <%ID> to i64                                                                                            
Nearest neighbors:
		<%ID> = trunc i64 <%ID> to i8                                                                                           
		<%ID> = sext i64 <%ID> to i128                                                                                          
		<%ID> = phi i8* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      
		<%ID> = getelementptr inbounds { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x double] }, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x double] }* <%ID>, i64 <INT>, i32 <INT>, i64 <%ID>
		<%ID> = icmp ugt i32 <%ID>, <INT>                                                                                       

<%ID> = trunc i128 <%ID> to i64                                                                                         
<%ID> = sext i64 <%ID> to i128                                                                                          
<%ID> = trunc i8 <%ID> to i1                                                                                            
expected answer:
		<%ID> = zext i1 <%ID> to i8                                                                                             
Nearest neighbors:
		<%ID> = trunc i8 <%ID> to i1                                                                                            
		store volatile i32 <INT>, i32* <%ID>, align 4                                                                           
		<%ID> = shl i64 <%ID>, <%ID>                                                                                            
		<%ID> = invoke i8* <@ID>({ i8*, i64 }* nonnull <%ID>, i64 <INT>)
 to label <%ID> unwind label <%ID>                     
		<%ID> = icmp slt i32 <%ID>, <%ID>                                                                                       

<%ID> = trunc i128 <%ID> to i64                                                                                         
<%ID> = zext i64 <%ID> to i128                                                                                          
<%ID> = trunc i16 <%ID> to i8                                                                                           
expected answer:
		<%ID> = zext i8 <%ID> to i16                                                                                            
Nearest neighbors:
		<%ID> = trunc i16 <%ID> to i8                                                                                           
		<%ID> = zext i64 <%ID> to i128                                                                                          
		<%ID> = select i1 <%ID>, i16 <%ID>, i16 <INT>                                                                           
		<%ID> = zext i16 <%ID> to i64                                                                                           
		<%ID> = phi i16 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                    

<%ID> = trunc i128 <%ID> to i64                                                                                         
<%ID> = zext i64 <%ID> to i128                                                                                          
<%ID> = trunc i32 <%ID> to i16                                                                                          
expected answer:
		<%ID> = sext i16 <%ID> to i32                                                                                           
Nearest neighbors:
		<%ID> = trunc i32 <%ID> to i16                                                                                          
		<%ID> = zext i64 <%ID> to i128                                                                                          
		<%ID> = phi i16 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                    
		<%ID> = zext i16 <%ID> to i32                                                                                           
		store i16 <%ID>, i16* <%ID>, align 2                                                                                    

<%ID> = trunc i128 <%ID> to i64                                                                                         
<%ID> = zext i64 <%ID> to i128                                                                                          
<%ID> = trunc i32 <%ID> to i8                                                                                           
expected answer:
		<%ID> = sext i8 <%ID> to i32                                                                                            
Nearest neighbors:
		<%ID> = trunc i32 <%ID> to i8                                                                                           
		<%ID> = zext i64 <%ID> to i128                                                                                          
		<%ID> = trunc i64 <%ID> to i8                                                                                           
		store i8 <%ID>, i8* <%ID>, align 1                                                                                      
		<%ID> = load i32, i32* <%ID>, align 8                                                                                   

<%ID> = trunc i128 <%ID> to i64                                                                                         
<%ID> = zext i64 <%ID> to i128                                                                                          
<%ID> = trunc i32 <%ID> to i8                                                                                           
expected answer:
		<%ID> = zext i8 <%ID> to i32                                                                                            
Nearest neighbors:
		<%ID> = trunc i32 <%ID> to i8                                                                                           
		<%ID> = zext i64 <%ID> to i128                                                                                          
		<%ID> = trunc i64 <%ID> to i8                                                                                           
		store i8 <%ID>, i8* <%ID>, align 1                                                                                      
		<%ID> = load i32, i32* <%ID>, align 8                                                                                   

<%ID> = trunc i128 <%ID> to i64                                                                                         
<%ID> = zext i64 <%ID> to i128                                                                                          
<%ID> = trunc i64 <%ID> to i16                                                                                          
expected answer:
		<%ID> = sext i16 <%ID> to i64                                                                                           
Nearest neighbors:
		<%ID> = trunc i64 <%ID> to i16                                                                                          
		<%ID> = zext i64 <%ID> to i128                                                                                          
		<%ID> = trunc i64 <%ID> to i8                                                                                           
		<%ID> = sext i8 <%ID> to i64                                                                                            
		<%ID> = tail call i8* <%ID>({ i32 (...)** }* <%ID>, i8* nonnull <%ID>, i64 <%ID>, i64 <%ID>)                            

<%ID> = trunc i128 <%ID> to i64                                                                                         
<%ID> = zext i64 <%ID> to i128                                                                                          
<%ID> = trunc i64 <%ID> to i16                                                                                          
expected answer:
		<%ID> = zext i16 <%ID> to i64                                                                                           
Nearest neighbors:
		<%ID> = trunc i64 <%ID> to i16                                                                                          
		<%ID> = zext i64 <%ID> to i128                                                                                          
		<%ID> = trunc i64 <%ID> to i8                                                                                           
		<%ID> = sext i8 <%ID> to i64                                                                                            
		<%ID> = tail call i8* <%ID>({ i32 (...)** }* <%ID>, i8* nonnull <%ID>, i64 <%ID>, i64 <%ID>)                            

<%ID> = trunc i128 <%ID> to i64                                                                                         
<%ID> = zext i64 <%ID> to i128                                                                                          
<%ID> = trunc i64 <%ID> to i32                                                                                          
expected answer:
		<%ID> = sext i32 <%ID> to i64                                                                                           
Nearest neighbors:
		<%ID> = trunc i64 <%ID> to i32                                                                                          
		<%ID> = zext i64 <%ID> to i128                                                                                          
		<%ID> = phi i32 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      
		<%ID> = trunc i64 <%ID> to i8                                                                                           
		<%ID> = icmp ult i64 <%ID>, <INT>                                                                                       

<%ID> = trunc i128 <%ID> to i64                                                                                         
<%ID> = zext i64 <%ID> to i128                                                                                          
<%ID> = trunc i64 <%ID> to i32                                                                                          
expected answer:
		<%ID> = zext i32 <%ID> to i64                                                                                           
Nearest neighbors:
		<%ID> = trunc i64 <%ID> to i32                                                                                          
		<%ID> = zext i64 <%ID> to i128                                                                                          
		<%ID> = phi i32 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      
		<%ID> = trunc i64 <%ID> to i8                                                                                           
		<%ID> = icmp ult i64 <%ID>, <INT>                                                                                       

<%ID> = trunc i128 <%ID> to i64                                                                                         
<%ID> = zext i64 <%ID> to i128                                                                                          
<%ID> = trunc i64 <%ID> to i8                                                                                           
expected answer:
		<%ID> = sext i8 <%ID> to i64                                                                                            
Nearest neighbors:
		<%ID> = trunc i64 <%ID> to i8                                                                                           
		<%ID> = zext i64 <%ID> to i128                                                                                          
		<%ID> = icmp ugt i32 <%ID>, <INT>                                                                                       
		<%ID> = load { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x i32] }*, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, [1 x i32] }** <%ID>, align 8
		<%ID> = phi i8* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      

<%ID> = trunc i128 <%ID> to i64                                                                                         
<%ID> = zext i64 <%ID> to i128                                                                                          
<%ID> = trunc i8 <%ID> to i1                                                                                            
expected answer:
		<%ID> = zext i1 <%ID> to i8                                                                                             
Nearest neighbors:
		<%ID> = trunc i8 <%ID> to i1                                                                                            
		<%ID> = zext i64 <%ID> to i128                                                                                          
		<%ID> = icmp slt i32 <%ID>, <%ID>                                                                                       
		store volatile i32 <INT>, i32* <%ID>, align 4                                                                           
		<%ID> = tail call float <@ID>(float <FLOAT>, float <%ID>)                                                               

<%ID> = trunc i16 <%ID> to i8                                                                                           
<%ID> = zext i8 <%ID> to i16                                                                                            
<%ID> = trunc i32 <%ID> to i16                                                                                          
expected answer:
		<%ID> = zext i16 <%ID> to i32                                                                                           
Nearest neighbors:
		<%ID> = trunc i32 <%ID> to i16                                                                                          
		<%ID> = zext i8 <%ID> to i16                                                                                            
		<%ID> = getelementptr inbounds { i32, i8* }, { i32, i8* }* <%ID>, i64 <INT>, i32 <INT>                                  
		<%ID> = sext i16 <%ID> to i32                                                                                           
		<%ID> = or i16 <%ID>, <%ID>                                                                                             

<%ID> = trunc i16 <%ID> to i8                                                                                           
<%ID> = zext i8 <%ID> to i16                                                                                            
<%ID> = trunc i32 <%ID> to i8                                                                                           
expected answer:
		<%ID> = sext i8 <%ID> to i32                                                                                            
Nearest neighbors:
		<%ID> = trunc i32 <%ID> to i8                                                                                           
		<%ID> = zext i8 <%ID> to i16                                                                                            
		<%ID> = phi i8 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                       
		store i8 <%ID>, i8* <%ID>, align 1                                                                                      
		<%ID> = getelementptr inbounds i8, i8* <%ID>, i64 <%ID>                                                                 

<%ID> = trunc i16 <%ID> to i8                                                                                           
<%ID> = zext i8 <%ID> to i16                                                                                            
<%ID> = trunc i32 <%ID> to i8                                                                                           
expected answer:
		<%ID> = zext i8 <%ID> to i32                                                                                            
Nearest neighbors:
		<%ID> = trunc i32 <%ID> to i8                                                                                           
		<%ID> = zext i8 <%ID> to i16                                                                                            
		<%ID> = phi i8 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                       
		store i8 <%ID>, i8* <%ID>, align 1                                                                                      
		<%ID> = getelementptr inbounds i8, i8* <%ID>, i64 <%ID>                                                                 

<%ID> = trunc i16 <%ID> to i8                                                                                           
<%ID> = zext i8 <%ID> to i16                                                                                            
<%ID> = trunc i64 <%ID> to i16                                                                                          
expected answer:
		<%ID> = sext i16 <%ID> to i64                                                                                           
Nearest neighbors:
		<%ID> = trunc i64 <%ID> to i16                                                                                          
		<%ID> = zext i8 <%ID> to i16                                                                                            
		switch i8 <%ID>, label <%ID> [
 i8 <INT>, label <%ID>
 i8 <INT>, label <%ID>]                                           
		<%ID> = phi i8 [ <%ID>, <%ID> ], [ 0, <%ID> ]                                                                           
		<%ID> = trunc i64 <%ID> to i8                                                                                           

<%ID> = trunc i16 <%ID> to i8                                                                                           
<%ID> = zext i8 <%ID> to i16                                                                                            
<%ID> = trunc i64 <%ID> to i16                                                                                          
expected answer:
		<%ID> = zext i16 <%ID> to i64                                                                                           
Nearest neighbors:
		<%ID> = trunc i64 <%ID> to i16                                                                                          
		<%ID> = zext i8 <%ID> to i16                                                                                            
		switch i8 <%ID>, label <%ID> [
 i8 <INT>, label <%ID>
 i8 <INT>, label <%ID>]                                           
		<%ID> = phi i8 [ <%ID>, <%ID> ], [ 0, <%ID> ]                                                                           
		<%ID> = trunc i64 <%ID> to i8                                                                                           

<%ID> = trunc i16 <%ID> to i8                                                                                           
<%ID> = zext i8 <%ID> to i16                                                                                            
<%ID> = trunc i64 <%ID> to i32                                                                                          
expected answer:
		<%ID> = sext i32 <%ID> to i64                                                                                           
Nearest neighbors:
		<%ID> = trunc i64 <%ID> to i32                                                                                          
		<%ID> = zext i8 <%ID> to i16                                                                                            
		<%ID> = phi i64 [ 0, <%ID> ], [ <%ID>, <%ID> ]                                                                          
		<%ID> = icmp ugt i64 <%ID>, <INT>                                                                                       
		<%ID> = phi i32 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      

<%ID> = trunc i16 <%ID> to i8                                                                                           
<%ID> = zext i8 <%ID> to i16                                                                                            
<%ID> = trunc i64 <%ID> to i32                                                                                          
expected answer:
		<%ID> = zext i32 <%ID> to i64                                                                                           
Nearest neighbors:
		<%ID> = trunc i64 <%ID> to i32                                                                                          
		<%ID> = zext i8 <%ID> to i16                                                                                            
		<%ID> = phi i64 [ 0, <%ID> ], [ <%ID>, <%ID> ]                                                                          
		<%ID> = icmp ugt i64 <%ID>, <INT>                                                                                       
		<%ID> = phi i32 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      

<%ID> = trunc i16 <%ID> to i8                                                                                           
<%ID> = zext i8 <%ID> to i16                                                                                            
<%ID> = trunc i64 <%ID> to i8                                                                                           
expected answer:
		<%ID> = sext i8 <%ID> to i64                                                                                            
Nearest neighbors:
		<%ID> = trunc i64 <%ID> to i8                                                                                           
		<%ID> = zext i8 <%ID> to i16                                                                                            
		<%ID> = icmp ugt i64 <%ID>, <INT>                                                                                       
		<%ID> = phi i8* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      
		<%ID> = getelementptr inbounds i8, i8* <%ID>, i64 <%ID>                                                                 

<%ID> = trunc i16 <%ID> to i8                                                                                           
<%ID> = zext i8 <%ID> to i16                                                                                            
<%ID> = trunc i8 <%ID> to i1                                                                                            
expected answer:
		<%ID> = zext i1 <%ID> to i8                                                                                             
Nearest neighbors:
		<%ID> = trunc i8 <%ID> to i1                                                                                            
		<%ID> = zext i8 <%ID> to i16                                                                                            
		switch i32 <%ID>, label <%ID> [
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>]
		<%ID> = getelementptr inbounds { { { i32 (...)** } }, { { i8* } }, { { { i32 (...)** } }, { { i8* } }, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, i8, i32 }*, <{ { { i32 (...)** } }, { { i8* } }, { i32, i32, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }, i32, [4 x i8], { i32, i32, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }, i32, [4 x i8], { i32, i32, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }, i32, [4 x i8], { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, { i32, i32, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }, i32, [4 x i8], { i32, i32, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }, i32, [4 x i8], { i32, i32, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }, i32, [4 x i8], { i32, i32, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }, i32, [4 x i8], { i32, i32, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }, i32, [4 x i8], { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, { i32, i32, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }, i32, [4 x i8], { i32, i32, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }, i32, [4 x i8], { { { { { { { i64, i64, i8* } } } } } }* }, { { { i32 (...)** } }, { { i8* } }, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, i8, i32 }*, i32, i32, i32, [4 x i8] }>*, i32, i32 }, { { { i32 (...)** } }, { { i8* } }, { { { i32 (...)** } }, { { i8* } }, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, i8, i32 }*, <{ { { i32 (...)** } }, { { i8* } }, { i32, i32, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }, i32, [4 x i8], { i32, i32, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }, i32, [4 x i8], { i32, i32, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }, i32, [4 x i8], { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, { i32, i32, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }, i32, [4 x i8], { i32, i32, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }, i32, [4 x i8], { i32, i32, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }, i32, [4 x i8], { i32, i32, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }, i32, [4 x i8], { i32, i32, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }, i32, [4 x i8], { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, { i32, i32, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }, i32, [4 x i8], { i32, i32, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }, i32, [4 x i8], { { { { { { { i64, i64, i8* } } } } } }* }, { { { i32 (...)** } }, { { i8* } }, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, i8, i32 }*, i32, i32, i32, [4 x i8] }>*, i32, i32 }* <%ID>, i64 <INT>, i32 <INT>
		<%ID> = bitcast { { i32 (...)** }, { { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, { { i32, <{ i32 (...)**, i32, [4 x i8] }>**, i64, <{ i32 (...)**, i32, [4 x i8] }>**, i8** }* } }, i32, { { i8* }, i64, { i64, [8 x i8] } } }, opaque }* <%ID> to i8*

<%ID> = trunc i32 <%ID> to i16                                                                                          
<%ID> = sext i16 <%ID> to i32                                                                                           
<%ID> = trunc i32 <%ID> to i8                                                                                           
expected answer:
		<%ID> = sext i8 <%ID> to i32                                                                                            
Nearest neighbors:
		<%ID> = trunc i32 <%ID> to i8                                                                                           
		<%ID> = sext i16 <%ID> to i32                                                                                           
		<%ID> = phi i8 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                       
		store i8 <%ID>, i8* <%ID>, align 1                                                                                      
		<%ID> = load i32, i32* <%ID>, align 8                                                                                   

<%ID> = trunc i32 <%ID> to i16                                                                                          
<%ID> = sext i16 <%ID> to i32                                                                                           
<%ID> = trunc i32 <%ID> to i8                                                                                           
expected answer:
		<%ID> = zext i8 <%ID> to i32                                                                                            
Nearest neighbors:
		<%ID> = trunc i32 <%ID> to i8                                                                                           
		<%ID> = sext i16 <%ID> to i32                                                                                           
		<%ID> = phi i8 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                       
		store i8 <%ID>, i8* <%ID>, align 1                                                                                      
		<%ID> = load i32, i32* <%ID>, align 8                                                                                   

<%ID> = trunc i32 <%ID> to i16                                                                                          
<%ID> = sext i16 <%ID> to i32                                                                                           
<%ID> = trunc i64 <%ID> to i16                                                                                          
expected answer:
		<%ID> = sext i16 <%ID> to i64                                                                                           
Nearest neighbors:
		<%ID> = trunc i64 <%ID> to i16                                                                                          
		<%ID> = sext i16 <%ID> to i32                                                                                           
		<%ID> = select i1 <%ID>, i16* <%ID>, i16* <%ID>                                                                         
		<%ID> = icmp ult i16 <%ID>, <INT>                                                                                       
		<%ID> = tail call i32 <@ID>(i32 <%ID>)                                                                                  

<%ID> = trunc i32 <%ID> to i16                                                                                          
<%ID> = sext i16 <%ID> to i32                                                                                           
<%ID> = trunc i64 <%ID> to i16                                                                                          
expected answer:
		<%ID> = zext i16 <%ID> to i64                                                                                           
Nearest neighbors:
		<%ID> = trunc i64 <%ID> to i16                                                                                          
		<%ID> = sext i16 <%ID> to i32                                                                                           
		<%ID> = select i1 <%ID>, i16* <%ID>, i16* <%ID>                                                                         
		<%ID> = icmp ult i16 <%ID>, <INT>                                                                                       
		<%ID> = tail call i32 <@ID>(i32 <%ID>)                                                                                  

<%ID> = trunc i32 <%ID> to i16                                                                                          
<%ID> = sext i16 <%ID> to i32                                                                                           
<%ID> = trunc i64 <%ID> to i32                                                                                          
expected answer:
		<%ID> = sext i32 <%ID> to i64                                                                                           
Nearest neighbors:
		<%ID> = trunc i64 <%ID> to i32                                                                                          
		<%ID> = sext i16 <%ID> to i32                                                                                           
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([202 x i8], [202 x i8]* <@ID>, i64 <INT>, i64 <INT>))
		<%ID> = tail call i32 <@ID>(i32 <%ID>)                                                                                  
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([152 x i8], [152 x i8]* <@ID>, i64 <INT>, i64 <INT>))

<%ID> = trunc i32 <%ID> to i16                                                                                          
<%ID> = sext i16 <%ID> to i32                                                                                           
<%ID> = trunc i64 <%ID> to i32                                                                                          
expected answer:
		<%ID> = zext i32 <%ID> to i64                                                                                           
Nearest neighbors:
		<%ID> = trunc i64 <%ID> to i32                                                                                          
		<%ID> = sext i16 <%ID> to i32                                                                                           
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([202 x i8], [202 x i8]* <@ID>, i64 <INT>, i64 <INT>))
		<%ID> = tail call i32 <@ID>(i32 <%ID>)                                                                                  
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([152 x i8], [152 x i8]* <@ID>, i64 <INT>, i64 <INT>))

<%ID> = trunc i32 <%ID> to i16                                                                                          
<%ID> = sext i16 <%ID> to i32                                                                                           
<%ID> = trunc i64 <%ID> to i8                                                                                           
expected answer:
		<%ID> = sext i8 <%ID> to i64                                                                                            
Nearest neighbors:
		<%ID> = trunc i64 <%ID> to i8                                                                                           
		<%ID> = sext i16 <%ID> to i32                                                                                           
		<%ID> = icmp ugt i32 <%ID>, <INT>                                                                                       
		<%ID> = trunc i64 <%ID> to i32                                                                                          
		<%ID> = tail call i32 <@ID>(i32 <%ID>)                                                                                  

<%ID> = trunc i32 <%ID> to i16                                                                                          
<%ID> = sext i16 <%ID> to i32                                                                                           
<%ID> = trunc i8 <%ID> to i1                                                                                            
expected answer:
		<%ID> = zext i1 <%ID> to i8                                                                                             
Nearest neighbors:
		<%ID> = trunc i8 <%ID> to i1                                                                                            
		<%ID> = sext i16 <%ID> to i32                                                                                           
		switch i32 <%ID>, label <%ID> [
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>]
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([202 x i8], [202 x i8]* <@ID>, i64 <INT>, i64 <INT>))
		<%ID> = invoke i8* <@ID>({ i8*, i64 }* nonnull <%ID>, i64 <INT>)
 to label <%ID> unwind label <%ID>                     

<%ID> = trunc i32 <%ID> to i16                                                                                          
<%ID> = zext i16 <%ID> to i32                                                                                           
<%ID> = trunc i32 <%ID> to i8                                                                                           
expected answer:
		<%ID> = sext i8 <%ID> to i32                                                                                            
Nearest neighbors:
		<%ID> = trunc i32 <%ID> to i8                                                                                           
		<%ID> = zext i16 <%ID> to i32                                                                                           
		store i8 <%ID>, i8* <%ID>, align 1                                                                                      
		<%ID> = getelementptr inbounds i8, i8* <%ID>, i64 <%ID>                                                                 
		<%ID> = phi i8 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                       

<%ID> = trunc i32 <%ID> to i16                                                                                          
<%ID> = zext i16 <%ID> to i32                                                                                           
<%ID> = trunc i32 <%ID> to i8                                                                                           
expected answer:
		<%ID> = zext i8 <%ID> to i32                                                                                            
Nearest neighbors:
		<%ID> = trunc i32 <%ID> to i8                                                                                           
		<%ID> = zext i16 <%ID> to i32                                                                                           
		store i8 <%ID>, i8* <%ID>, align 1                                                                                      
		<%ID> = getelementptr inbounds i8, i8* <%ID>, i64 <%ID>                                                                 
		<%ID> = phi i8 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                       

<%ID> = trunc i32 <%ID> to i16                                                                                          
<%ID> = zext i16 <%ID> to i32                                                                                           
<%ID> = trunc i64 <%ID> to i16                                                                                          
expected answer:
		<%ID> = sext i16 <%ID> to i64                                                                                           
Nearest neighbors:
		<%ID> = trunc i64 <%ID> to i16                                                                                          
		<%ID> = zext i16 <%ID> to i32                                                                                           
		<%ID> = icmp ult i16 <%ID>, <INT>                                                                                       
		store i16 <%ID>, i16* <%ID>, align 8                                                                                    
		<%ID> = icmp ugt i32 <%ID>, <INT>                                                                                       

<%ID> = trunc i32 <%ID> to i16                                                                                          
<%ID> = zext i16 <%ID> to i32                                                                                           
<%ID> = trunc i64 <%ID> to i16                                                                                          
expected answer:
		<%ID> = zext i16 <%ID> to i64                                                                                           
Nearest neighbors:
		<%ID> = trunc i64 <%ID> to i16                                                                                          
		<%ID> = zext i16 <%ID> to i32                                                                                           
		<%ID> = icmp ult i16 <%ID>, <INT>                                                                                       
		store i16 <%ID>, i16* <%ID>, align 8                                                                                    
		<%ID> = icmp ugt i32 <%ID>, <INT>                                                                                       

<%ID> = trunc i32 <%ID> to i16                                                                                          
<%ID> = zext i16 <%ID> to i32                                                                                           
<%ID> = trunc i64 <%ID> to i32                                                                                          
expected answer:
		<%ID> = sext i32 <%ID> to i64                                                                                           
Nearest neighbors:
		<%ID> = trunc i64 <%ID> to i32                                                                                          
		<%ID> = zext i16 <%ID> to i32                                                                                           
		<%ID> = sub nsw i32 <%ID>, <%ID>                                                                                        
		<%ID> = ashr i64 <%ID>, <INT>                                                                                           
		<%ID> = icmp ugt i32 <%ID>, <INT>                                                                                       

<%ID> = trunc i32 <%ID> to i16                                                                                          
<%ID> = zext i16 <%ID> to i32                                                                                           
<%ID> = trunc i64 <%ID> to i32                                                                                          
expected answer:
		<%ID> = zext i32 <%ID> to i64                                                                                           
Nearest neighbors:
		<%ID> = trunc i64 <%ID> to i32                                                                                          
		<%ID> = zext i16 <%ID> to i32                                                                                           
		<%ID> = sub nsw i32 <%ID>, <%ID>                                                                                        
		<%ID> = ashr i64 <%ID>, <INT>                                                                                           
		<%ID> = icmp ugt i32 <%ID>, <INT>                                                                                       

<%ID> = trunc i32 <%ID> to i16                                                                                          
<%ID> = zext i16 <%ID> to i32                                                                                           
<%ID> = trunc i64 <%ID> to i8                                                                                           
expected answer:
		<%ID> = sext i8 <%ID> to i64                                                                                            
Nearest neighbors:
		<%ID> = trunc i64 <%ID> to i8                                                                                           
		<%ID> = zext i16 <%ID> to i32                                                                                           
		<%ID> = icmp ugt i32 <%ID>, <INT>                                                                                       
		<%ID> = phi i8* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      
		<%ID> = ashr i64 <%ID>, <INT>                                                                                           

<%ID> = trunc i32 <%ID> to i16                                                                                          
<%ID> = zext i16 <%ID> to i32                                                                                           
<%ID> = trunc i8 <%ID> to i1                                                                                            
expected answer:
		<%ID> = zext i1 <%ID> to i8                                                                                             
Nearest neighbors:
		<%ID> = trunc i8 <%ID> to i1                                                                                            
		<%ID> = zext i16 <%ID> to i32                                                                                           
		switch i32 <%ID>, label <%ID> [
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>]
		<%ID> = landingpad { i8*, i32 }
 catch i8* null                                                                         
		store volatile i32 <INT>, i32* <%ID>, align 4                                                                           

<%ID> = trunc i32 <%ID> to i8                                                                                           
<%ID> = sext i8 <%ID> to i32                                                                                            
<%ID> = trunc i64 <%ID> to i16                                                                                          
expected answer:
		<%ID> = sext i16 <%ID> to i64                                                                                           
Nearest neighbors:
		<%ID> = sext i8 <%ID> to i32                                                                                            
		<%ID> = trunc i64 <%ID> to i16                                                                                          
		switch i8 <%ID>, label <%ID> [
 i8 <INT>, label <%ID>
 i8 <INT>, label <%ID>
 i8 <INT>, label <%ID>
 i8 <INT>, label <%ID>]
		<%ID> = icmp ne i16 <%ID>, <INT>                                                                                        
		<%ID> = phi i16 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                    

<%ID> = trunc i32 <%ID> to i8                                                                                           
<%ID> = sext i8 <%ID> to i32                                                                                            
<%ID> = trunc i64 <%ID> to i16                                                                                          
expected answer:
		<%ID> = zext i16 <%ID> to i64                                                                                           
Nearest neighbors:
		<%ID> = sext i8 <%ID> to i32                                                                                            
		<%ID> = trunc i64 <%ID> to i16                                                                                          
		switch i8 <%ID>, label <%ID> [
 i8 <INT>, label <%ID>
 i8 <INT>, label <%ID>
 i8 <INT>, label <%ID>
 i8 <INT>, label <%ID>]
		<%ID> = icmp ne i16 <%ID>, <INT>                                                                                        
		<%ID> = phi i16 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                    

<%ID> = trunc i32 <%ID> to i8                                                                                           
<%ID> = sext i8 <%ID> to i32                                                                                            
<%ID> = trunc i64 <%ID> to i32                                                                                          
expected answer:
		<%ID> = sext i32 <%ID> to i64                                                                                           
Nearest neighbors:
		<%ID> = sext i8 <%ID> to i32                                                                                            
		<%ID> = trunc i64 <%ID> to i32                                                                                          
		switch i32 <%ID>, label <%ID> [
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>]
		<%ID> = icmp sle i32 <%ID>, <%ID>                                                                                       
		switch i8 <%ID>, label <%ID> [
 i8 <INT>, label <%ID>
 i8 <INT>, label <%ID>
 i8 <INT>, label <%ID>
 i8 <INT>, label <%ID>]

<%ID> = trunc i32 <%ID> to i8                                                                                           
<%ID> = sext i8 <%ID> to i32                                                                                            
<%ID> = trunc i64 <%ID> to i32                                                                                          
expected answer:
		<%ID> = zext i32 <%ID> to i64                                                                                           
Nearest neighbors:
		<%ID> = sext i8 <%ID> to i32                                                                                            
		<%ID> = trunc i64 <%ID> to i32                                                                                          
		switch i32 <%ID>, label <%ID> [
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>]
		<%ID> = icmp sle i32 <%ID>, <%ID>                                                                                       
		switch i8 <%ID>, label <%ID> [
 i8 <INT>, label <%ID>
 i8 <INT>, label <%ID>
 i8 <INT>, label <%ID>
 i8 <INT>, label <%ID>]

<%ID> = trunc i32 <%ID> to i8                                                                                           
<%ID> = sext i8 <%ID> to i32                                                                                            
<%ID> = trunc i64 <%ID> to i8                                                                                           
expected answer:
		<%ID> = sext i8 <%ID> to i64                                                                                            
Nearest neighbors:
		<%ID> = sext i8 <%ID> to i32                                                                                            
		<%ID> = trunc i64 <%ID> to i8                                                                                           
		switch i8 <%ID>, label <%ID> [
 i8 <INT>, label <%ID>
 i8 <INT>, label <%ID>
 i8 <INT>, label <%ID>
 i8 <INT>, label <%ID>]
		<%ID> = phi i8 [ <%ID>, <%ID> ], [ 0, <%ID> ]                                                                           
		<%ID> = phi i32 [ <%ID>, <%ID> ], [ 1, <%ID> ]                                                                          

<%ID> = trunc i32 <%ID> to i8                                                                                           
<%ID> = sext i8 <%ID> to i32                                                                                            
<%ID> = trunc i8 <%ID> to i1                                                                                            
expected answer:
		<%ID> = zext i1 <%ID> to i8                                                                                             
Nearest neighbors:
		<%ID> = trunc i8 <%ID> to i1                                                                                            
		<%ID> = sext i8 <%ID> to i32                                                                                            
		switch i32 <%ID>, label <%ID> [
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>]
		call void <@ID>({ opaque* }* nonnull sret <%ID>, { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, opaque*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }* <%ID>)
		store volatile i32 <INT>, i32* <%ID>, align 4                                                                           

<%ID> = trunc i32 <%ID> to i8                                                                                           
<%ID> = zext i8 <%ID> to i32                                                                                            
<%ID> = trunc i64 <%ID> to i16                                                                                          
expected answer:
		<%ID> = sext i16 <%ID> to i64                                                                                           
Nearest neighbors:
		<%ID> = trunc i64 <%ID> to i16                                                                                          
		<%ID> = zext i8 <%ID> to i32                                                                                            
		store i16 <%ID>, i16* <%ID>, align 8                                                                                    
		<%ID> = icmp ult i16 <%ID>, <INT>                                                                                       
		<%ID> = load i16, i16* <%ID>, align 8                                                                                   

<%ID> = trunc i32 <%ID> to i8                                                                                           
<%ID> = zext i8 <%ID> to i32                                                                                            
<%ID> = trunc i64 <%ID> to i16                                                                                          
expected answer:
		<%ID> = zext i16 <%ID> to i64                                                                                           
Nearest neighbors:
		<%ID> = trunc i64 <%ID> to i16                                                                                          
		<%ID> = zext i8 <%ID> to i32                                                                                            
		store i16 <%ID>, i16* <%ID>, align 8                                                                                    
		<%ID> = icmp ult i16 <%ID>, <INT>                                                                                       
		<%ID> = load i16, i16* <%ID>, align 8                                                                                   

<%ID> = trunc i32 <%ID> to i8                                                                                           
<%ID> = zext i8 <%ID> to i32                                                                                            
<%ID> = trunc i64 <%ID> to i32                                                                                          
expected answer:
		<%ID> = sext i32 <%ID> to i64                                                                                           
Nearest neighbors:
		<%ID> = trunc i64 <%ID> to i32                                                                                          
		<%ID> = zext i8 <%ID> to i32                                                                                            
		<%ID> = phi i64 [ 0, <%ID> ], [ <%ID>, <%ID> ]                                                                          
		<%ID> = add i32 <%ID>, <%ID>                                                                                            
		<%ID> = sub i32 <%ID>, <%ID>                                                                                            

<%ID> = trunc i32 <%ID> to i8                                                                                           
<%ID> = zext i8 <%ID> to i32                                                                                            
<%ID> = trunc i64 <%ID> to i32                                                                                          
expected answer:
		<%ID> = zext i32 <%ID> to i64                                                                                           
Nearest neighbors:
		<%ID> = trunc i64 <%ID> to i32                                                                                          
		<%ID> = zext i8 <%ID> to i32                                                                                            
		<%ID> = phi i64 [ 0, <%ID> ], [ <%ID>, <%ID> ]                                                                          
		<%ID> = add i32 <%ID>, <%ID>                                                                                            
		<%ID> = sub i32 <%ID>, <%ID>                                                                                            

<%ID> = trunc i32 <%ID> to i8                                                                                           
<%ID> = zext i8 <%ID> to i32                                                                                            
<%ID> = trunc i64 <%ID> to i8                                                                                           
expected answer:
		<%ID> = sext i8 <%ID> to i64                                                                                            
Nearest neighbors:
		<%ID> = zext i8 <%ID> to i32                                                                                            
		<%ID> = trunc i64 <%ID> to i8                                                                                           
		<%ID> = phi i8* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      
		<%ID> = trunc i64 <%ID> to i32                                                                                          
		<%ID> = icmp ugt i32 <%ID>, <INT>                                                                                       

<%ID> = trunc i32 <%ID> to i8                                                                                           
<%ID> = zext i8 <%ID> to i32                                                                                            
<%ID> = trunc i8 <%ID> to i1                                                                                            
expected answer:
		<%ID> = zext i1 <%ID> to i8                                                                                             
Nearest neighbors:
		<%ID> = trunc i8 <%ID> to i1                                                                                            
		<%ID> = zext i8 <%ID> to i32                                                                                            
		switch i32 <%ID>, label <%ID> [
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>]
		<%ID> = icmp slt i32 <%ID>, <%ID>                                                                                       
		switch i32 <%ID>, label <%ID> [
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>]                                        

<%ID> = trunc i64 <%ID> to i16                                                                                          
<%ID> = sext i16 <%ID> to i64                                                                                           
<%ID> = trunc i64 <%ID> to i16                                                                                          
expected answer:
		<%ID> = zext i16 <%ID> to i64                                                                                           
Nearest neighbors:
		<%ID> = sext i16 <%ID> to i64                                                                                           
		<%ID> = phi i16 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                    
		<%ID> = icmp ult i16 <%ID>, <INT>                                                                                       
		<%ID> = select i1 <%ID>, i16 <INT>, i16 <%ID>                                                                           
		<%ID> = icmp eq i16 <%ID>, <%ID>                                                                                        

<%ID> = trunc i64 <%ID> to i16                                                                                          
<%ID> = sext i16 <%ID> to i64                                                                                           
<%ID> = trunc i64 <%ID> to i32                                                                                          
expected answer:
		<%ID> = zext i32 <%ID> to i64                                                                                           
Nearest neighbors:
		<%ID> = sext i16 <%ID> to i64                                                                                           
		<%ID> = trunc i64 <%ID> to i32                                                                                          
		<%ID> = sext i32 <%ID> to i64                                                                                           
		<%ID> = icmp ugt i8 <%ID>, <INT>                                                                                        
		<%ID> = bitcast { i64, opaque*, opaque* }** <%ID> to i64*                                                               

<%ID> = trunc i64 <%ID> to i16                                                                                          
<%ID> = sext i16 <%ID> to i64                                                                                           
<%ID> = trunc i64 <%ID> to i8                                                                                           
expected answer:
		<%ID> = sext i8 <%ID> to i64                                                                                            
Nearest neighbors:
		<%ID> = sext i16 <%ID> to i64                                                                                           
		<%ID> = trunc i64 <%ID> to i8                                                                                           
		<%ID> = phi i8* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      
		<%ID> = load i32, i32* <%ID>, align 8                                                                                   
		<%ID> = ptrtoint i8* <%ID> to i64                                                                                       

<%ID> = trunc i64 <%ID> to i16                                                                                          
<%ID> = sext i16 <%ID> to i64                                                                                           
<%ID> = trunc i8 <%ID> to i1                                                                                            
expected answer:
		<%ID> = zext i1 <%ID> to i8                                                                                             
Nearest neighbors:
		<%ID> = trunc i8 <%ID> to i1                                                                                            
		<%ID> = sext i16 <%ID> to i64                                                                                           
		switch i32 <%ID>, label <%ID> [
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>]
		<%ID> = phi i32 [ <%ID>, <%ID> ], [ 0, <%ID> ], [ 0, <%ID> ], [ 0, <%ID> ]                                              
		<%ID> = invoke i8* <@ID>({ i8*, i64 }* nonnull <%ID>, i64 <INT>)
 to label <%ID> unwind label <%ID>                     

<%ID> = trunc i64 <%ID> to i16                                                                                          
<%ID> = zext i16 <%ID> to i64                                                                                           
<%ID> = trunc i64 <%ID> to i32                                                                                          
expected answer:
		<%ID> = zext i32 <%ID> to i64                                                                                           
Nearest neighbors:
		<%ID> = zext i16 <%ID> to i64                                                                                           
		<%ID> = trunc i64 <%ID> to i32                                                                                          
		<%ID> = sext i32 <%ID> to i64                                                                                           
		<%ID> = add i32 <%ID>, <%ID>                                                                                            
		<%ID> = icmp ugt i16 <%ID>, <%ID>                                                                                       

<%ID> = trunc i64 <%ID> to i16                                                                                          
<%ID> = zext i16 <%ID> to i64                                                                                           
<%ID> = trunc i64 <%ID> to i8                                                                                           
expected answer:
		<%ID> = sext i8 <%ID> to i64                                                                                            
Nearest neighbors:
		<%ID> = zext i16 <%ID> to i64                                                                                           
		<%ID> = trunc i64 <%ID> to i8                                                                                           
		<%ID> = bitcast i8* <%ID> to i32*                                                                                       
		<%ID> = phi i8* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      
		<%ID> = load i32, i32* <%ID>, align 8                                                                                   

<%ID> = trunc i64 <%ID> to i16                                                                                          
<%ID> = zext i16 <%ID> to i64                                                                                           
<%ID> = trunc i8 <%ID> to i1                                                                                            
expected answer:
		<%ID> = zext i1 <%ID> to i8                                                                                             
Nearest neighbors:
		<%ID> = trunc i8 <%ID> to i1                                                                                            
		<%ID> = zext i16 <%ID> to i64                                                                                           
		switch i32 <%ID>, label <%ID> [
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>]
		define linkonce_odr { double, double } <@ID>({ double, double }* dereferenceable(16), { double, double }* dereferenceable(16))
		<%ID> = icmp slt i32 <%ID>, <%ID>                                                                                       

<%ID> = trunc i64 <%ID> to i32                                                                                          
<%ID> = sext i32 <%ID> to i64                                                                                           
<%ID> = trunc i64 <%ID> to i8                                                                                           
expected answer:
		<%ID> = sext i8 <%ID> to i64                                                                                            
Nearest neighbors:
		<%ID> = sext i32 <%ID> to i64                                                                                           
		<%ID> = trunc i64 <%ID> to i8                                                                                           
		<%ID> = phi i8* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      
		<@ID> = private unnamed_addr constant [30 x i8]  <STRING>, align 1                                                      
		<%ID> = icmp ugt i32 <%ID>, <INT>                                                                                       

<%ID> = trunc i64 <%ID> to i32                                                                                          
<%ID> = sext i32 <%ID> to i64                                                                                           
<%ID> = trunc i8 <%ID> to i1                                                                                            
expected answer:
		<%ID> = zext i1 <%ID> to i8                                                                                             
Nearest neighbors:
		<%ID> = trunc i8 <%ID> to i1                                                                                            
		<%ID> = sext i32 <%ID> to i64                                                                                           
		<%ID> = alloca i8, align 1                                                                                              
		<%ID> = icmp slt i32 <%ID>, <%ID>                                                                                       
		switch i32 <%ID>, label <%ID> [
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>]

<%ID> = trunc i64 <%ID> to i32                                                                                          
<%ID> = zext i32 <%ID> to i64                                                                                           
<%ID> = trunc i64 <%ID> to i8                                                                                           
expected answer:
		<%ID> = sext i8 <%ID> to i64                                                                                            
Nearest neighbors:
		<%ID> = zext i32 <%ID> to i64                                                                                           
		<%ID> = trunc i64 <%ID> to i8                                                                                           
		<%ID> = phi i8* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      
		<%ID> = getelementptr inbounds { { { i32 (...)** } }, { { i8* } }, { i32, i32, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }, i32, i32 }, { { { i32 (...)** } }, { { i8* } }, { i32, i32, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }, i32, i32 }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>
		<%ID> = icmp ugt i32 <%ID>, <INT>                                                                                       

<%ID> = trunc i64 <%ID> to i32                                                                                          
<%ID> = zext i32 <%ID> to i64                                                                                           
<%ID> = trunc i8 <%ID> to i1                                                                                            
expected answer:
		<%ID> = zext i1 <%ID> to i8                                                                                             
Nearest neighbors:
		<%ID> = trunc i8 <%ID> to i1                                                                                            
		<%ID> = zext i32 <%ID> to i64                                                                                           
		<%ID> = icmp slt i32 <%ID>, <%ID>                                                                                       
		<%ID> = tail call i8* <@ID>(i8* <%ID>)                                                                                  
		<%ID> = extractvalue { i8*, i32 } <%ID>, 1                                                                              

<%ID> = trunc i64 <%ID> to i8                                                                                           
<%ID> = sext i8 <%ID> to i64                                                                                            
<%ID> = trunc i8 <%ID> to i1                                                                                            
expected answer:
		<%ID> = zext i1 <%ID> to i8                                                                                             
Nearest neighbors:
		<%ID> = trunc i8 <%ID> to i1                                                                                            
		<%ID> = sext i8 <%ID> to i64                                                                                            
		switch i32 <%ID>, label <%ID> [
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>
 i32 <INT>, label <%ID>]
		<%ID> = extractvalue { i8*, i32 } <%ID>, 1                                                                              
		<%ID> = invoke i64 <@ID>({ i8 }* nonnull <%ID>, i8* <%ID>, i64 <%ID>)
 to label <%ID> unwind label <%ID>                
------------------------------------------------------------------------------------------------------------------------
Fptou/si - s/uitofp (inverse operations analogy): 6
------------------------------------------------------------------------------------------------------------------------
--- Correct predictions:

<%ID> = fptoui float <%ID> to i64                                                                                       
<%ID> = uitofp i64 <%ID> to float                                                                                       
<%ID> = fptosi double <%ID> to i64                                                                                      
expected answer:
		<%ID> = sitofp i64 <%ID> to double                                                                                      
Nearest neighbors:
		<%ID> = fptosi double <%ID> to i64                                                                                      
		<%ID> = sitofp i64 <%ID> to double                                                                                      
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
		<%ID> = bitcast i8* <%ID> to double*                                                                                    
		<%ID> = load { float*, { { [4 x i64] } } }*, { float*, { { [4 x i64] } } }** <%ID>, align 8                             

<%ID> = fptosi double <%ID> to i32                                                                                      
<%ID> = sitofp i32 <%ID> to double                                                                                      
<%ID> = fptosi double <%ID> to i64                                                                                      
expected answer:
		<%ID> = sitofp i64 <%ID> to double                                                                                      
Nearest neighbors:
		<%ID> = fptosi double <%ID> to i64                                                                                      
		<%ID> = sitofp i32 <%ID> to double                                                                                      
		<%ID> = fmul fast double <%ID>, <FLOAT>                                                                                 
		<%ID> = sitofp i64 <%ID> to double                                                                                      
		<%ID> = select i1 <%ID>, i32 <INT>, i32 <%ID>                                                                           

--- Incorrect predictions:

<%ID> = fptoui float <%ID> to i64                                                                                       
<%ID> = uitofp i64 <%ID> to float                                                                                       
<%ID> = fptosi double <%ID> to i32                                                                                      
expected answer:
		<%ID> = sitofp i32 <%ID> to double                                                                                      
Nearest neighbors:
		<%ID> = fptosi double <%ID> to i32                                                                                      
		<%ID> = fmul double <%ID>, <%ID>                                                                                        
		<%ID> = phi double [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]             
		<%ID> = fcmp oeq double <%ID>, <FLOAT>                                                                                  
		<%ID> = bitcast { double }* <%ID> to i64*                                                                               

<%ID> = fptoui float <%ID> to i64                                                                                       
<%ID> = uitofp i64 <%ID> to float                                                                                       
<%ID> = fptosi float <%ID> to i32                                                                                       
expected answer:
		<%ID> = sitofp i32 <%ID> to float                                                                                       
Nearest neighbors:
		<%ID> = fptosi float <%ID> to i32                                                                                       
		<%ID> = uitofp i64 <%ID> to float                                                                                       
		call void <@ID>(metadata float <%ID>())                                                                                 
		<%ID> = icmp ne i16 <%ID>, <INT>                                                                                        
		<%ID> = fcmp une float <%ID>, <FLOAT>                                                                                   

<%ID> = fptosi double <%ID> to i32                                                                                      
<%ID> = sitofp i32 <%ID> to double                                                                                      
<%ID> = fptosi float <%ID> to i32                                                                                       
expected answer:
		<%ID> = sitofp i32 <%ID> to float                                                                                       
Nearest neighbors:
		<%ID> = sitofp i32 <%ID> to double                                                                                      
		<%ID> = fptosi float <%ID> to i32                                                                                       
		<%ID> = zext i1 <%ID> to i64                                                                                            
		<%ID> = fmul fast float <%ID>, <FLOAT>                                                                                  
		<%ID> = phi i64 [ <%ID>, <%ID> ], [ undef, <%ID> ]                                                                      

<%ID> = fptosi double <%ID> to i64                                                                                      
<%ID> = sitofp i64 <%ID> to double                                                                                      
<%ID> = fptosi float <%ID> to i32                                                                                       
expected answer:
		<%ID> = sitofp i32 <%ID> to float                                                                                       
Nearest neighbors:
		<%ID> = fptosi float <%ID> to i32                                                                                       
		<%ID> = sitofp i64 <%ID> to double                                                                                      
		<%ID> = fcmp ogt float <%ID>, <FLOAT>                                                                                   
		<%ID> = phi float [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]              
		<%ID> = tail call float <@ID>(float <%ID>, float <%ID>)                                                                 
------------------------------------------------------------------------------------------------------------------------
Inttoptr - ptrtoint (inverse operations analogy): 136
------------------------------------------------------------------------------------------------------------------------
--- Correct predictions:

<%ID> = inttoptr i64 <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }*                                        
<%ID> = ptrtoint { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }* <%ID> to i64                                        
<%ID> = inttoptr i64 <%ID> to { opaque*, opaque* }*                                                                     
expected answer:
		<%ID> = ptrtoint { opaque*, opaque* }* <%ID> to i64                                                                     
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { opaque*, opaque* }*                                                                     
		<%ID> = phi { opaque*, opaque* }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                    
		<%ID> = icmp eq { opaque*, opaque* }* <%ID>, <%ID>                                                                      
		<%ID> = getelementptr inbounds { opaque*, opaque* }, { opaque*, opaque* }* <%ID>, i64 <INT>, i32 <INT>                  
		<%ID> = ptrtoint { opaque*, opaque* }* <%ID> to i64                                                                     

<%ID> = inttoptr i64 <%ID> to { double, double }*                                                                       
<%ID> = ptrtoint { double, double }* <%ID> to i64                                                                       
<%ID> = inttoptr i64 <%ID> to { float, float }*                                                                         
expected answer:
		<%ID> = ptrtoint { float, float }* <%ID> to i64                                                                         
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { float, float }*                                                                         
		<%ID> = ptrtoint { double, double }* <%ID> to i64                                                                       
		<%ID> = ptrtoint { float, float }* <%ID> to i64                                                                         
		<%ID> = getelementptr inbounds { float, float }, { float, float }* <%ID>, i64 <%ID>, i32 <INT>                          
		<%ID> = getelementptr inbounds { float, float }, { float, float }* <%ID>, i64 <%ID>                                     

<%ID> = inttoptr i64 <%ID> to { double, double }*                                                                       
<%ID> = ptrtoint { double, double }* <%ID> to i64                                                                       
<%ID> = inttoptr i64 <%ID> to { opaque*, opaque* }*                                                                     
expected answer:
		<%ID> = ptrtoint { opaque*, opaque* }* <%ID> to i64                                                                     
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { opaque*, opaque* }*                                                                     
		<%ID> = ptrtoint { double, double }* <%ID> to i64                                                                       
		<%ID> = ptrtoint { opaque*, opaque* }* <%ID> to i64                                                                     
		<%ID> = getelementptr inbounds { opaque*, opaque* }, { opaque*, opaque* }* <%ID>, i64 <INT>                             
		<%ID> = getelementptr inbounds { opaque*, opaque* }, { opaque*, opaque* }* <%ID>, i64 <INT>, i32 <INT>                  

<%ID> = inttoptr i64 <%ID> to { double, double }*                                                                       
<%ID> = ptrtoint { double, double }* <%ID> to i64                                                                       
<%ID> = inttoptr i64 <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                    
expected answer:
		<%ID> = ptrtoint { { { { { { i64, i64, i8* } } } } } }* <%ID> to i64                                                    
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                    
		<%ID> = ptrtoint { double, double }* <%ID> to i64                                                                       
		<%ID> = getelementptr inbounds { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }* <%ID>, i64 <INT>
		<%ID> = ptrtoint { { { { { { i64, i64, i8* } } } } } }* <%ID> to i64                                                    
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i64*                                                   

<%ID> = inttoptr i64 <%ID> to { double, double }*                                                                       
<%ID> = ptrtoint { double, double }* <%ID> to i64                                                                       
<%ID> = inttoptr i64 <%ID> to float*                                                                                    
expected answer:
		<%ID> = ptrtoint float* <%ID> to i64                                                                                    
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to float*                                                                                    
		<%ID> = ptrtoint { double, double }* <%ID> to i64                                                                       
		<%ID> = getelementptr inbounds float, float* <%ID>, i64 <%ID>                                                           
		<%ID> = ptrtoint float* <%ID> to i64                                                                                    
		<%ID> = alloca { i8*, { { [1 x i64] } } }, align 8                                                                      

<%ID> = inttoptr i64 <%ID> to { float, float }*                                                                         
<%ID> = ptrtoint { float, float }* <%ID> to i64                                                                         
<%ID> = inttoptr i64 <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                    
expected answer:
		<%ID> = ptrtoint { { { { { { i64, i64, i8* } } } } } }* <%ID> to i64                                                    
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                    
		<%ID> = getelementptr inbounds { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }* <%ID>, i64 <INT>
		<%ID> = ptrtoint { { { { { { i64, i64, i8* } } } } } }* <%ID> to i64                                                    
		<%ID> = getelementptr inbounds { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }* <%ID>, i64 <%ID>
		<%ID> = icmp eq { { { { { { i64, i64, i8* } } } } } }* <%ID>, <%ID>                                                     

<%ID> = inttoptr i64 <%ID> to { float, float }*                                                                         
<%ID> = ptrtoint { float, float }* <%ID> to i64                                                                         
<%ID> = inttoptr i64 <%ID> to float*                                                                                    
expected answer:
		<%ID> = ptrtoint float* <%ID> to i64                                                                                    
Nearest neighbors:
		<%ID> = ptrtoint { float, float }* <%ID> to i64                                                                         
		<%ID> = inttoptr i64 <%ID> to float*                                                                                    
		<%ID> = ptrtoint float* <%ID> to i64                                                                                    
		<%ID> = invoke i8* <@ID>({ { { { { { i64, i64, i8* } } } } } }* nonnull dereferenceable(24) <%ID>, i8* <%ID>)
 to label <%ID> unwind label <%ID>
		<%ID> = alloca { i8*, { { [1 x i64] } } }, align 8                                                                      

<%ID> = inttoptr i64 <%ID> to { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }**
<%ID> = ptrtoint { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }** <%ID> to i64
<%ID> = inttoptr i64 <%ID> to { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }*           
expected answer:
		<%ID> = ptrtoint { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }* <%ID> to i64           
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }*           
		<%ID> = bitcast { { opaque*, opaque* } }* <%ID> to i64*                                                                 
		<%ID> = select i1 <%ID>, { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }* <%ID>, { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }* <%ID>
		<%ID> = icmp eq { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }* <%ID>, null             
		<%ID> = ptrtoint { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }* <%ID> to i64           

<%ID> = inttoptr i64 <%ID> to { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }**
<%ID> = ptrtoint { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }** <%ID> to i64
<%ID> = inttoptr i64 <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                    
expected answer:
		<%ID> = ptrtoint { { { { { { i64, i64, i8* } } } } } }* <%ID> to i64                                                    
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                    
		<%ID> = ptrtoint { { { { { { i64, i64, i8* } } } } } }* <%ID> to i64                                                    
		<%ID> = getelementptr inbounds { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }* <%ID>, i64 <INT>
		<%ID> = getelementptr inbounds { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }* <%ID>, i64 <%ID>
		<%ID> = ptrtoint { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }** <%ID> to i64

<%ID> = inttoptr i64 <%ID> to { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }*           
<%ID> = ptrtoint { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }* <%ID> to i64           
<%ID> = inttoptr i64 <%ID> to { opaque*, opaque* }*                                                                     
expected answer:
		<%ID> = ptrtoint { opaque*, opaque* }* <%ID> to i64                                                                     
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { opaque*, opaque* }*                                                                     
		<%ID> = phi { opaque*, opaque* }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                    
		<%ID> = ptrtoint { opaque*, opaque* }* <%ID> to i64                                                                     
		store { opaque*, opaque* }* <%ID>, { opaque*, opaque* }** <%ID>, align 8                                                
		<%ID> = load { opaque*, opaque* }*, { opaque*, opaque* }** <%ID>, align 8                                               

<%ID> = inttoptr i64 <%ID> to { { { double*, i64 } } }*                                                                 
<%ID> = ptrtoint { { { double*, i64 } } }* <%ID> to i64                                                                 
<%ID> = inttoptr i64 <%ID> to { { { double*, i64, i64 } } }*                                                            
expected answer:
		<%ID> = ptrtoint { { { double*, i64, i64 } } }* <%ID> to i64                                                            
Nearest neighbors:
		<%ID> = ptrtoint { { { double*, i64 } } }* <%ID> to i64                                                                 
		<%ID> = inttoptr i64 <%ID> to { { { double*, i64, i64 } } }*                                                            
		<%ID> = ptrtoint { { { double*, i64, i64 } } }* <%ID> to i64                                                            
		<%ID> = inttoptr i64 <%ID> to { { double*, i64, i64 } }*                                                                
		<%ID> = getelementptr inbounds { { { { double*, i64 } } }*, { { { double*, i64, i64 } } }* }, { { { { double*, i64 } } }*, { { { double*, i64, i64 } } }* }* <%ID>, i64 <INT>, i32 <INT>

--- Incorrect predictions:

<%ID> = inttoptr i64 <%ID> to <{ opaque, opaque*, opaque*, i8, [7 x i8] }>*                                             
<%ID> = ptrtoint <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* <%ID> to i64                                             
<%ID> = inttoptr i64 <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }*                                        
expected answer:
		<%ID> = ptrtoint { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }* <%ID> to i64                                        
Nearest neighbors:
		<%ID> = ptrtoint <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* <%ID> to i64                                             
		<%ID> = inttoptr i64 <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }*                                        
		<%ID> = icmp eq <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* <%ID>, null                                               
		call void <@ID>(<{ opaque, opaque*, opaque*, i8, [7 x i8] }>* <%ID>, <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* <%ID>)
		<%ID> = load <{ opaque, opaque*, opaque*, i8, [7 x i8] }>*, <{ opaque, opaque*, opaque*, i8, [7 x i8] }>** <%ID>, align 8

<%ID> = inttoptr i64 <%ID> to <{ opaque, opaque*, opaque*, i8, [7 x i8] }>*                                             
<%ID> = ptrtoint <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* <%ID> to i64                                             
<%ID> = inttoptr i64 <%ID> to { double, double }*                                                                       
expected answer:
		<%ID> = ptrtoint { double, double }* <%ID> to i64                                                                       
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { double, double }*                                                                       
		<%ID> = getelementptr { double, double }, { double, double }* <%ID>, i64 <%ID>                                          
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([152 x i8], [152 x i8]* <@ID>, i64 <INT>, i64 <INT>))
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([202 x i8], [202 x i8]* <@ID>, i64 <INT>, i64 <INT>))
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([146 x i8], [146 x i8]* <@ID>, i64 <INT>, i64 <INT>))

<%ID> = inttoptr i64 <%ID> to <{ opaque, opaque*, opaque*, i8, [7 x i8] }>*                                             
<%ID> = ptrtoint <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* <%ID> to i64                                             
<%ID> = inttoptr i64 <%ID> to { float, float }*                                                                         
expected answer:
		<%ID> = ptrtoint { float, float }* <%ID> to i64                                                                         
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { float, float }*                                                                         
		<%ID> = bitcast { float, float }* <%ID> to i8**                                                                         
		<%ID> = getelementptr { float, float }, { float, float }* <%ID>, i64 <%ID>                                              
		<%ID> = call <2 x float> <@ID>({ float, float }* nonnull dereferenceable(8) <%ID>, { float, float }* nonnull dereferenceable(8) <%ID>)
		<%ID> = icmp ult { float, float }* <%ID>, <%ID>                                                                         

<%ID> = inttoptr i64 <%ID> to <{ opaque, opaque*, opaque*, i8, [7 x i8] }>*                                             
<%ID> = ptrtoint <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* <%ID> to i64                                             
<%ID> = inttoptr i64 <%ID> to { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }**
expected answer:
		<%ID> = ptrtoint { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }** <%ID> to i64
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }**
		<%ID> = getelementptr inbounds { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }, { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }* <%ID>, i64 <INT>, i32 <INT>
		<%ID> = bitcast { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }** <%ID> to i64*
		<%ID> = phi { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]
		<%ID> = bitcast { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }** <%ID> to i8*

<%ID> = inttoptr i64 <%ID> to <{ opaque, opaque*, opaque*, i8, [7 x i8] }>*                                             
<%ID> = ptrtoint <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* <%ID> to i64                                             
<%ID> = inttoptr i64 <%ID> to { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }*           
expected answer:
		<%ID> = ptrtoint { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }* <%ID> to i64           
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }*           
		<%ID> = select i1 <%ID>, { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }* <%ID>, { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }* <%ID>
		<%ID> = bitcast { { opaque*, opaque* } }* <%ID> to i64*                                                                 
		<%ID> = icmp eq { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }* <%ID>, null             
		<%ID> = bitcast { i64 }* <%ID> to { { { i32 } }, { i32 } }*                                                             

<%ID> = inttoptr i64 <%ID> to <{ opaque, opaque*, opaque*, i8, [7 x i8] }>*                                             
<%ID> = ptrtoint <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* <%ID> to i64                                             
<%ID> = inttoptr i64 <%ID> to { opaque*, opaque* }*                                                                     
expected answer:
		<%ID> = ptrtoint { opaque*, opaque* }* <%ID> to i64                                                                     
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { opaque*, opaque* }*                                                                     
		<%ID> = load { opaque*, opaque* }*, { opaque*, opaque* }** <%ID>, align 8                                               
		<%ID> = bitcast { opaque*, opaque* }** <%ID> to i64*                                                                    
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }**                                                                     
		<%ID> = getelementptr inbounds { opaque*, opaque* }, { opaque*, opaque* }* <%ID>, i64 <INT>, i32 <INT>                  

<%ID> = inttoptr i64 <%ID> to <{ opaque, opaque*, opaque*, i8, [7 x i8] }>*                                             
<%ID> = ptrtoint <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* <%ID> to i64                                             
<%ID> = inttoptr i64 <%ID> to { { { double*, i64 } } }*                                                                 
expected answer:
		<%ID> = ptrtoint { { { double*, i64 } } }* <%ID> to i64                                                                 
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { { { double*, i64 } } }*                                                                 
		<%ID> = inttoptr i64 <%ID> to { { double*, i64 } }*                                                                     
		<%ID> = bitcast { { { double*, i64 } } }** <%ID> to i64*                                                                
		<%ID> = getelementptr inbounds { { { { { double*, i64, i64 } } }, { { { double*, i64 } } }*, { { double*, { i64 } } }, { { double*, { i64 } } }, i64 } }, { { { { { double*, i64, i64 } } }, { { { double*, i64 } } }*, { { double*, { i64 } } }, { { double*, { i64 } } }, i64 } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>
		<%ID> = bitcast { { { { double*, i64 } } }* }* <%ID> to { { double*, i64 } }**                                          

<%ID> = inttoptr i64 <%ID> to <{ opaque, opaque*, opaque*, i8, [7 x i8] }>*                                             
<%ID> = ptrtoint <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* <%ID> to i64                                             
<%ID> = inttoptr i64 <%ID> to { { { double*, i64, i64 } } }*                                                            
expected answer:
		<%ID> = ptrtoint { { { double*, i64, i64 } } }* <%ID> to i64                                                            
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { { { double*, i64, i64 } } }*                                                            
		<%ID> = inttoptr i64 <%ID> to { { double*, i64, i64 } }*                                                                
		<%ID> = inttoptr i64 <%ID> to { { { double*, i64 } } }*                                                                 
		<%ID> = inttoptr i64 <%ID> to { { double*, i64 } }*                                                                     
		<%ID> = bitcast { { double*, i64 } }* <%ID> to { { { double*, i64 } } }*                                                

<%ID> = inttoptr i64 <%ID> to <{ opaque, opaque*, opaque*, i8, [7 x i8] }>*                                             
<%ID> = ptrtoint <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* <%ID> to i64                                             
<%ID> = inttoptr i64 <%ID> to { { { i32*, i64 } } }*                                                                    
expected answer:
		<%ID> = ptrtoint { { { i32*, i64 } } }* <%ID> to i64                                                                    
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { { { i32*, i64 } } }*                                                                    
		<%ID> = getelementptr inbounds { { { { { i32*, i64 } } }, { { { i32*, i64 } } }*, { <{ i32*, { i8 } }>, [7 x i8] }, { { i32*, { i64 } } }, i64 } }, { { { { { i32*, i64 } } }, { { { i32*, i64 } } }*, { <{ i32*, { i8 } }>, [7 x i8] }, { { i32*, { i64 } } }, i64 } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = bitcast { { { i32*, i64 } } }** <%ID> to i64*                                                                   
		<%ID> = getelementptr inbounds { { { { { i32*, i64 } } }, { { { i32*, i64 } } }*, { <{ i32*, { i8 } }>, [7 x i8] }, { { i32*, { i64 } } }, i64 } }, { { { { { i32*, i64 } } }, { { { i32*, i64 } } }*, { <{ i32*, { i8 } }>, [7 x i8] }, { { i32*, { i64 } } }, i64 } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>
		<%ID> = inttoptr i64 <%ID> to { { i32*, i64 } }*                                                                        

<%ID> = inttoptr i64 <%ID> to <{ opaque, opaque*, opaque*, i8, [7 x i8] }>*                                             
<%ID> = ptrtoint <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* <%ID> to i64                                             
<%ID> = inttoptr i64 <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                    
expected answer:
		<%ID> = ptrtoint { { { { { { i64, i64, i8* } } } } } }* <%ID> to i64                                                    
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                    
		<%ID> = bitcast { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } }* <%ID> to i64*
		<%ID> = getelementptr inbounds { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }* <%ID>, i64 <INT>
		<%ID> = phi { { { { { { i64, i64, i8* } } } } } }** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                  
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i64*                                                   

<%ID> = inttoptr i64 <%ID> to <{ opaque, opaque*, opaque*, i8, [7 x i8] }>*                                             
<%ID> = ptrtoint <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* <%ID> to i64                                             
<%ID> = inttoptr i64 <%ID> to double*                                                                                   
expected answer:
		<%ID> = ptrtoint double* <%ID> to i64                                                                                   
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to double*                                                                                   
		<%ID> = bitcast { { { double*, i64 } } }* <%ID> to i64*                                                                 
		<%ID> = ptrtoint <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* <%ID> to i64                                             
		call void <@ID>({ { { double*, i64 } } }* nonnull dereferenceable(16) <%ID>, { { { double*, i64 } } }* nonnull dereferenceable(16) <%ID>, { i8 }* nonnull dereferenceable(1) <%ID>)
		<@ID> = private unnamed_addr constant [1 x i8] zeroinitializer, align 1                                                 

<%ID> = inttoptr i64 <%ID> to <{ opaque, opaque*, opaque*, i8, [7 x i8] }>*                                             
<%ID> = ptrtoint <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* <%ID> to i64                                             
<%ID> = inttoptr i64 <%ID> to float*                                                                                    
expected answer:
		<%ID> = ptrtoint float* <%ID> to i64                                                                                    
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to float*                                                                                    
		<%ID> = inttoptr i64 <%ID> to i8**                                                                                      
		<%ID> = alloca { { { float*, i64, i64 } } }, align 8                                                                    
		<%ID> = fadd fast float <%ID>, <%ID>                                                                                    
		<%ID> = and i64 <%ID>, <INT>                                                                                            

<%ID> = inttoptr i64 <%ID> to <{ opaque, opaque*, opaque*, i8, [7 x i8] }>*                                             
<%ID> = ptrtoint <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* <%ID> to i64                                             
<%ID> = inttoptr i64 <%ID> to i32*                                                                                      
expected answer:
		<%ID> = ptrtoint i32* <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i32*                                                                                      
		<%ID> = phi i32** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                    
		<%ID> = load { { { i32*, i64 } } }*, { { { i32*, i64 } } }** <%ID>, align 8                                             
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ null, <%ID> ], [ null, <%ID> ]                                                     
		call void <@ID>(i64 <%ID>, i64 <INT>, { { i32*, i64 } }* nonnull dereferenceable(16) <%ID>, { { i32*, i64 } }* nonnull dereferenceable(16) <%ID>, i32* <%ID>, i64 <INT>, i32 <INT>)

<%ID> = inttoptr i64 <%ID> to <{ opaque, opaque*, opaque*, i8, [7 x i8] }>*                                             
<%ID> = ptrtoint <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* <%ID> to i64                                             
<%ID> = inttoptr i64 <%ID> to i64*                                                                                      
expected answer:
		<%ID> = ptrtoint i64* <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i64*                                                                                      
		<%ID> = ptrtoint <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* <%ID> to i64                                             
		<%ID> = inttoptr i64 <%ID> to i32*                                                                                      
		define linkonce_odr void <@ID>({ { { float*, i64, i64 } } }* dereferenceable(24), <{ { i64 }, { i64 }, { i8 }, [7 x i8] }>* dereferenceable(24), { i8 }* dereferenceable(1)) local_unnamed_addr
		<%ID> = inttoptr i64 <%ID> to i8*                                                                                       

<%ID> = inttoptr i64 <%ID> to <{ opaque, opaque*, opaque*, i8, [7 x i8] }>*                                             
<%ID> = ptrtoint <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* <%ID> to i64                                             
<%ID> = inttoptr i64 <%ID> to i8**                                                                                      
expected answer:
		<%ID> = ptrtoint i8** <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i8**                                                                                      
		<%ID> = call noalias i8* <@ID>(i64 <%ID>)                                                                               
		<%ID> = alloca { { { float*, i64, i64 } } }, align 8                                                                    
		<%ID> = getelementptr inbounds i8*, i8** <%ID>, i64 <INT>                                                               
		<%ID> = ptrtoint i8* <%ID> to i64                                                                                       

<%ID> = inttoptr i64 <%ID> to <{ opaque, opaque*, opaque*, i8, [7 x i8] }>*                                             
<%ID> = ptrtoint <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* <%ID> to i64                                             
<%ID> = inttoptr i64 <%ID> to i8*                                                                                       
expected answer:
		<%ID> = ptrtoint i8* <%ID> to i64                                                                                       
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i8*                                                                                       
		<%ID> = sub nsw i64 <INT>, <%ID>                                                                                        
		<%ID> = ptrtoint <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* <%ID> to i64                                             
		define linkonce_odr void <@ID>({ { { float*, i64, i64 } } }* dereferenceable(24), <{ { i64 }, { i64 }, { i8 }, [7 x i8] }>* dereferenceable(24), { i8 }* dereferenceable(1)) local_unnamed_addr
		<%ID> = alloca { { { float*, i64, i64 } } }, align 8                                                                    

<%ID> = inttoptr i64 <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }*                                        
<%ID> = ptrtoint { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }* <%ID> to i64                                        
<%ID> = inttoptr i64 <%ID> to { double, double }*                                                                       
expected answer:
		<%ID> = ptrtoint { double, double }* <%ID> to i64                                                                       
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { double, double }*                                                                       
		<%ID> = getelementptr { double, double }, { double, double }* <%ID>, i64 <%ID>                                          
		<%ID> = getelementptr inbounds { { { { double, double }*, i64, i64 } } }, { { { { double, double }*, i64, i64 } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([202 x i8], [202 x i8]* <@ID>, i64 <INT>, i64 <INT>))
		<%ID> = getelementptr inbounds { double, double }, { double, double }* <%ID>, i64 <%ID>, i32 <INT>                      

<%ID> = inttoptr i64 <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }*                                        
<%ID> = ptrtoint { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }* <%ID> to i64                                        
<%ID> = inttoptr i64 <%ID> to { float, float }*                                                                         
expected answer:
		<%ID> = ptrtoint { float, float }* <%ID> to i64                                                                         
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { float, float }*                                                                         
		<%ID> = getelementptr { float, float }, { float, float }* <%ID>, i64 <%ID>                                              
		<%ID> = getelementptr inbounds { float, float }, { float, float }* <%ID>, i64 <%ID>, i32 <INT>                          
		<%ID> = phi <2 x float> [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                              
		<%ID> = load { float, float }*, { float, float }** <%ID>, align 8                                                       

<%ID> = inttoptr i64 <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }*                                        
<%ID> = ptrtoint { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }* <%ID> to i64                                        
<%ID> = inttoptr i64 <%ID> to { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }**
expected answer:
		<%ID> = ptrtoint { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }** <%ID> to i64
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }**
		<%ID> = phi { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]
		<%ID> = load { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }**, { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }*** <%ID>, align 8
		<%ID> = getelementptr inbounds { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }*, { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }** <%ID>, i64 <%ID>
		<%ID> = bitcast { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }** <%ID> to i8*

<%ID> = inttoptr i64 <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }*                                        
<%ID> = ptrtoint { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }* <%ID> to i64                                        
<%ID> = inttoptr i64 <%ID> to { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }*           
expected answer:
		<%ID> = ptrtoint { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }* <%ID> to i64           
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }*           
		<%ID> = bitcast { { opaque*, opaque* } }* <%ID> to i64*                                                                 
		<%ID> = select i1 <%ID>, { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }* <%ID>, { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }* <%ID>
		<%ID> = icmp eq { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }* <%ID>, null             
		<%ID> = load { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }*, { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }** <%ID>, align 8

<%ID> = inttoptr i64 <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }*                                        
<%ID> = ptrtoint { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }* <%ID> to i64                                        
<%ID> = inttoptr i64 <%ID> to { { { double*, i64 } } }*                                                                 
expected answer:
		<%ID> = ptrtoint { { { double*, i64 } } }* <%ID> to i64                                                                 
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { { { double*, i64 } } }*                                                                 
		<%ID> = inttoptr i64 <%ID> to { { double*, i64 } }*                                                                     
		<%ID> = bitcast { { { double*, i64 } } }** <%ID> to i64*                                                                
		<%ID> = getelementptr inbounds { { { { { double*, i64, i64 } } }, { { { double*, i64 } } }*, { { double*, { i64 } } }, { { double*, { i64 } } }, i64 } }, { { { { { double*, i64, i64 } } }, { { { double*, i64 } } }*, { { double*, { i64 } } }, { { double*, { i64 } } }, i64 } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>
		<%ID> = bitcast { <{ double*, { i8 } }>, [7 x i8] }* <%ID> to i64*                                                      

<%ID> = inttoptr i64 <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }*                                        
<%ID> = ptrtoint { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }* <%ID> to i64                                        
<%ID> = inttoptr i64 <%ID> to { { { double*, i64, i64 } } }*                                                            
expected answer:
		<%ID> = ptrtoint { { { double*, i64, i64 } } }* <%ID> to i64                                                            
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { { { double*, i64, i64 } } }*                                                            
		<%ID> = inttoptr i64 <%ID> to { { double*, i64, i64 } }*                                                                
		<%ID> = bitcast { { { double*, i64, i64 } } }** <%ID> to i64*                                                           
		<%ID> = inttoptr i64 <%ID> to { { { double*, i64 } } }*                                                                 
		<%ID> = inttoptr i64 <%ID> to { { double*, i64 } }*                                                                     

<%ID> = inttoptr i64 <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }*                                        
<%ID> = ptrtoint { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }* <%ID> to i64                                        
<%ID> = inttoptr i64 <%ID> to { { { i32*, i64 } } }*                                                                    
expected answer:
		<%ID> = ptrtoint { { { i32*, i64 } } }* <%ID> to i64                                                                    
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { { { i32*, i64 } } }*                                                                    
		<%ID> = bitcast { { { i32*, i64 } } }** <%ID> to i64*                                                                   
		<%ID> = inttoptr i64 <%ID> to { { i32*, i64 } }*                                                                        
		<%ID> = bitcast { <{ i32*, { i8 } }>, [7 x i8] }* <%ID> to i64*                                                         
		<%ID> = getelementptr inbounds { { { { { i32*, i64 } } }, { { { i32*, i64 } } }*, { <{ i32*, { i8 } }>, [7 x i8] }, { { i32*, { i64 } } }, i64 } }, { { { { { i32*, i64 } } }, { { { i32*, i64 } } }*, { <{ i32*, { i8 } }>, [7 x i8] }, { { i32*, { i64 } } }, i64 } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>

<%ID> = inttoptr i64 <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }*                                        
<%ID> = ptrtoint { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }* <%ID> to i64                                        
<%ID> = inttoptr i64 <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                    
expected answer:
		<%ID> = ptrtoint { { { { { { i64, i64, i8* } } } } } }* <%ID> to i64                                                    
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                    
		<%ID> = getelementptr inbounds { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }* <%ID>, i64 <INT>
		<%ID> = icmp eq { { { { { { i64, i64, i8* } } } } } }* <%ID>, <%ID>                                                     
		<%ID> = getelementptr inbounds { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }* <%ID>, i64 <%ID>
		<%ID> = bitcast { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } }* <%ID> to i64*

<%ID> = inttoptr i64 <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }*                                        
<%ID> = ptrtoint { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }* <%ID> to i64                                        
<%ID> = inttoptr i64 <%ID> to double*                                                                                   
expected answer:
		<%ID> = ptrtoint double* <%ID> to i64                                                                                   
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to double*                                                                                   
		<%ID> = call { { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }*, i8 } <@ID>({ opaque*, { { opaque } }, { { i64 } } }* <%ID>, { { { { { { i64, i64, i8* } } } } } }* nonnull dereferenceable(24) <%ID>, { i8 }* nonnull dereferenceable(1) <@ID>, { { { { { { { { { i64, i64, i8* } } } } } }* } } }* nonnull dereferenceable(8) <%ID>, { i8 }* nonnull dereferenceable(1) <%ID>)
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([152 x i8], [152 x i8]* <@ID>, i64 <INT>, i64 <INT>))
		define linkonce_odr { { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }*, i8 } <@ID>({ opaque*, { { opaque } }, { { i64 } } }*, { { { { { { i64, i64, i8* } } } } } }* dereferenceable(24), { i8 }* dereferenceable(1), { { { { { { { { { i64, i64, i8* } } } } } }* } } }* dereferenceable(8), { i8 }* dereferenceable(1)) local_unnamed_addr
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([202 x i8], [202 x i8]* <@ID>, i64 <INT>, i64 <INT>))

<%ID> = inttoptr i64 <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }*                                        
<%ID> = ptrtoint { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }* <%ID> to i64                                        
<%ID> = inttoptr i64 <%ID> to float*                                                                                    
expected answer:
		<%ID> = ptrtoint float* <%ID> to i64                                                                                    
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to float*                                                                                    
		<%ID> = fadd fast float <%ID>, <%ID>                                                                                    
		unreachable                                                                                                             
		<%ID> = load <8 x float>, <8 x float>* <%ID>, align 4                                                                   
		<%ID> = inttoptr i64 <%ID> to i8**                                                                                      

<%ID> = inttoptr i64 <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }*                                        
<%ID> = ptrtoint { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }* <%ID> to i64                                        
<%ID> = inttoptr i64 <%ID> to i32*                                                                                      
expected answer:
		<%ID> = ptrtoint i32* <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i32*                                                                                      
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ null, <%ID> ], [ null, <%ID> ]                                                     
		<%ID> = load { { { i32*, i64 } } }*, { { { i32*, i64 } } }** <%ID>, align 8                                             
		<%ID> = select i1 <%ID>, i32* <%ID>, i32* <%ID>                                                                         
		<%ID> = getelementptr inbounds { { { i32*, i64 } } }, { { { i32*, i64 } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>

<%ID> = inttoptr i64 <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }*                                        
<%ID> = ptrtoint { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }* <%ID> to i64                                        
<%ID> = inttoptr i64 <%ID> to i64*                                                                                      
expected answer:
		<%ID> = ptrtoint i64* <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i64*                                                                                      
		<%ID> = inttoptr i64 <%ID> to { { { i32*, i64 } } }*                                                                    
		<%ID> = load { { { i32*, i64 } } }*, { { { i32*, i64 } } }** <%ID>, align 8                                             
		<%ID> = inttoptr i64 <%ID> to { { i32*, i64 } }*                                                                        
		<%ID> = bitcast { { opaque**, opaque**, { { opaque** } } } }* <%ID> to i64*                                             

<%ID> = inttoptr i64 <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }*                                        
<%ID> = ptrtoint { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }* <%ID> to i64                                        
<%ID> = inttoptr i64 <%ID> to i8**                                                                                      
expected answer:
		<%ID> = ptrtoint i8** <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i8**                                                                                      
		<%ID> = call noalias i8* <@ID>(i64 <%ID>)                                                                               
		<%ID> = ptrtoint i8* <%ID> to i64                                                                                       
		<%ID> = getelementptr inbounds i8*, i8** <%ID>, i64 <INT>                                                               
		<%ID> = tail call noalias i8* <@ID>(i64 <%ID>)                                                                          

<%ID> = inttoptr i64 <%ID> to { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }*                                        
<%ID> = ptrtoint { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }* <%ID> to i64                                        
<%ID> = inttoptr i64 <%ID> to i8*                                                                                       
expected answer:
		<%ID> = ptrtoint i8* <%ID> to i64                                                                                       
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i8*                                                                                       
		<%ID> = sub i64 <INT>, <%ID>                                                                                            
		<%ID> = ptrtoint i32* <%ID> to i64                                                                                      
		store i16 <%ID>, i16* <%ID>, align 4                                                                                    
		<%ID> = icmp ugt i64 <%ID>, <INT>                                                                                       

<%ID> = inttoptr i64 <%ID> to { double, double }*                                                                       
<%ID> = ptrtoint { double, double }* <%ID> to i64                                                                       
<%ID> = inttoptr i64 <%ID> to { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }**
expected answer:
		<%ID> = ptrtoint { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }** <%ID> to i64
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }**
		<%ID> = bitcast { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }** <%ID> to i8*
		<%ID> = phi { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]
		<%ID> = ptrtoint { double, double }* <%ID> to i64                                                                       
		<%ID> = bitcast { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }** <%ID> to i64*

<%ID> = inttoptr i64 <%ID> to { double, double }*                                                                       
<%ID> = ptrtoint { double, double }* <%ID> to i64                                                                       
<%ID> = inttoptr i64 <%ID> to { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }*           
expected answer:
		<%ID> = ptrtoint { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }* <%ID> to i64           
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }*           
		<%ID> = bitcast { { opaque*, opaque* } }* <%ID> to i64*                                                                 
		<%ID> = ptrtoint { double, double }* <%ID> to i64                                                                       
		<%ID> = select i1 <%ID>, { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }* <%ID>, { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }* <%ID>
		<%ID> = icmp eq { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }* <%ID>, null             

<%ID> = inttoptr i64 <%ID> to { double, double }*                                                                       
<%ID> = ptrtoint { double, double }* <%ID> to i64                                                                       
<%ID> = inttoptr i64 <%ID> to { { { double*, i64 } } }*                                                                 
expected answer:
		<%ID> = ptrtoint { { { double*, i64 } } }* <%ID> to i64                                                                 
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { { { double*, i64 } } }*                                                                 
		<%ID> = ptrtoint { double, double }* <%ID> to i64                                                                       
		<%ID> = inttoptr i64 <%ID> to { { double*, i64 } }*                                                                     
		<%ID> = bitcast { { { double*, i64 } } }** <%ID> to i64*                                                                
		<%ID> = getelementptr inbounds { { { { { double*, i64, i64 } } }, { { { double*, i64, i64 } } }*, { { double*, { i64 } } }, { { double*, { i64 } } }, i64 } }, { { { { { double*, i64, i64 } } }, { { { double*, i64, i64 } } }*, { { double*, { i64 } } }, { { double*, { i64 } } }, i64 } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>

<%ID> = inttoptr i64 <%ID> to { double, double }*                                                                       
<%ID> = ptrtoint { double, double }* <%ID> to i64                                                                       
<%ID> = inttoptr i64 <%ID> to { { { double*, i64, i64 } } }*                                                            
expected answer:
		<%ID> = ptrtoint { { { double*, i64, i64 } } }* <%ID> to i64                                                            
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { { { double*, i64, i64 } } }*                                                            
		<%ID> = ptrtoint { double, double }* <%ID> to i64                                                                       
		<%ID> = inttoptr i64 <%ID> to { { double*, i64, i64 } }*                                                                
		<%ID> = inttoptr i64 <%ID> to { { { double*, i64 } } }*                                                                 
		<%ID> = bitcast { { { double*, i64, i64 } } }** <%ID> to i64*                                                           

<%ID> = inttoptr i64 <%ID> to { double, double }*                                                                       
<%ID> = ptrtoint { double, double }* <%ID> to i64                                                                       
<%ID> = inttoptr i64 <%ID> to { { { i32*, i64 } } }*                                                                    
expected answer:
		<%ID> = ptrtoint { { { i32*, i64 } } }* <%ID> to i64                                                                    
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { { { i32*, i64 } } }*                                                                    
		<%ID> = ptrtoint { double, double }* <%ID> to i64                                                                       
		<%ID> = inttoptr i64 <%ID> to { { i32*, i64 } }*                                                                        
		<%ID> = bitcast { { { i32*, i64 } } }** <%ID> to i64*                                                                   
		<%ID> = bitcast i32** <%ID> to <4 x i32>**                                                                              

<%ID> = inttoptr i64 <%ID> to { double, double }*                                                                       
<%ID> = ptrtoint { double, double }* <%ID> to i64                                                                       
<%ID> = inttoptr i64 <%ID> to double*                                                                                   
expected answer:
		<%ID> = ptrtoint double* <%ID> to i64                                                                                   
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to double*                                                                                   
		<%ID> = ptrtoint { double, double }* <%ID> to i64                                                                       
		<%ID> = bitcast { float*, { { [1 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { float*, { { [1 x i64] } } }* }* <%ID> to i64*
		store { i8*, { { [1 x i64] } } }* <%ID>, { i8*, { { [1 x i64] } } }** <%ID>, align 8                                    
		<%ID> = alloca { i8*, { { [1 x i64] } } }, align 8                                                                      

<%ID> = inttoptr i64 <%ID> to { double, double }*                                                                       
<%ID> = ptrtoint { double, double }* <%ID> to i64                                                                       
<%ID> = inttoptr i64 <%ID> to i32*                                                                                      
expected answer:
		<%ID> = ptrtoint i32* <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i32*                                                                                      
		<%ID> = ptrtoint { double, double }* <%ID> to i64                                                                       
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ null, <%ID> ], [ null, <%ID> ]                                                     
		<%ID> = getelementptr inbounds { { { { i16 } } }*, { { [1 x i64] } } }, { { { { i16 } } }*, { { [1 x i64] } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i64 <INT>
		<%ID> = getelementptr inbounds { i32, i16 }, { i32, i16 }* <%ID>, i64 <INT>, i32 <INT>                                  

<%ID> = inttoptr i64 <%ID> to { double, double }*                                                                       
<%ID> = ptrtoint { double, double }* <%ID> to i64                                                                       
<%ID> = inttoptr i64 <%ID> to i64*                                                                                      
expected answer:
		<%ID> = ptrtoint i64* <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i64*                                                                                      
		<%ID> = ptrtoint { double, double }* <%ID> to i64                                                                       
		<%ID> = bitcast { float*, { { [1 x i64] } }, <{ { i32 (...)** }*, i32, [4 x i8] }>*, { float*, { { [1 x i64] } } }* }* <%ID> to i64*
		<%ID> = sub i64 <%ID>, <%ID>                                                                                            
		<%ID> = getelementptr inbounds { { { { i16 } } }*, { { [1 x i64] } } }, { { { { i16 } } }*, { { [1 x i64] } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i64 <INT>

<%ID> = inttoptr i64 <%ID> to { double, double }*                                                                       
<%ID> = ptrtoint { double, double }* <%ID> to i64                                                                       
<%ID> = inttoptr i64 <%ID> to i8**                                                                                      
expected answer:
		<%ID> = ptrtoint i8** <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i8**                                                                                      
		<%ID> = ptrtoint { double, double }* <%ID> to i64                                                                       
		<%ID> = getelementptr inbounds i8*, i8** <%ID>, i64 <INT>                                                               
		<%ID> = phi float** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                  
		<%ID> = icmp eq float* <%ID>, null                                                                                      

<%ID> = inttoptr i64 <%ID> to { double, double }*                                                                       
<%ID> = ptrtoint { double, double }* <%ID> to i64                                                                       
<%ID> = inttoptr i64 <%ID> to i8*                                                                                       
expected answer:
		<%ID> = ptrtoint i8* <%ID> to i64                                                                                       
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i8*                                                                                       
		<%ID> = ptrtoint { double, double }* <%ID> to i64                                                                       
		<%ID> = sub i64 <%ID>, <%ID>                                                                                            
		<%ID> = icmp ult i8* <%ID>, <%ID>                                                                                       
		<%ID> = alloca { i8*, { { [1 x i64] } } }, align 8                                                                      

<%ID> = inttoptr i64 <%ID> to { float, float }*                                                                         
<%ID> = ptrtoint { float, float }* <%ID> to i64                                                                         
<%ID> = inttoptr i64 <%ID> to { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }**
expected answer:
		<%ID> = ptrtoint { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }** <%ID> to i64
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }**
		<%ID> = bitcast { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }** <%ID> to i8*
		<%ID> = ptrtoint { float, float }* <%ID> to i64                                                                         
		<%ID> = phi { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }** [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]
		<%ID> = load { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }*, { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }** <%ID>, align 8

<%ID> = inttoptr i64 <%ID> to { float, float }*                                                                         
<%ID> = ptrtoint { float, float }* <%ID> to i64                                                                         
<%ID> = inttoptr i64 <%ID> to { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }*           
expected answer:
		<%ID> = ptrtoint { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }* <%ID> to i64           
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }*           
		<%ID> = bitcast { { opaque*, opaque* } }* <%ID> to i64*                                                                 
		<%ID> = select i1 <%ID>, { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }* <%ID>, { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }* <%ID>
		<%ID> = getelementptr inbounds { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }, { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }* <%ID>, i64 <INT>, i32 <INT>
		<%ID> = bitcast { i64 }* <%ID> to { { { i32 } }, { i32 } }*                                                             

<%ID> = inttoptr i64 <%ID> to { float, float }*                                                                         
<%ID> = ptrtoint { float, float }* <%ID> to i64                                                                         
<%ID> = inttoptr i64 <%ID> to { opaque*, opaque* }*                                                                     
expected answer:
		<%ID> = ptrtoint { opaque*, opaque* }* <%ID> to i64                                                                     
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { opaque*, opaque* }*                                                                     
		<%ID> = bitcast { opaque*, opaque* }* <%ID> to i8**                                                                     
		<%ID> = ptrtoint { float, float }* <%ID> to i64                                                                         
		<%ID> = phi { opaque*, opaque* }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                    
		store { opaque*, opaque* }* <%ID>, { opaque*, opaque* }** <%ID>, align 8                                                

<%ID> = inttoptr i64 <%ID> to { float, float }*                                                                         
<%ID> = ptrtoint { float, float }* <%ID> to i64                                                                         
<%ID> = inttoptr i64 <%ID> to { { { double*, i64 } } }*                                                                 
expected answer:
		<%ID> = ptrtoint { { { double*, i64 } } }* <%ID> to i64                                                                 
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { { { double*, i64 } } }*                                                                 
		<%ID> = ptrtoint { float, float }* <%ID> to i64                                                                         
		<%ID> = inttoptr i64 <%ID> to { { { double*, i64, i64 } } }*                                                            
		<%ID> = bitcast { { { double*, i64, i64 } } }** <%ID> to i64*                                                           
		<%ID> = bitcast { { { double*, i64 } } }** <%ID> to i64*                                                                

<%ID> = inttoptr i64 <%ID> to { float, float }*                                                                         
<%ID> = ptrtoint { float, float }* <%ID> to i64                                                                         
<%ID> = inttoptr i64 <%ID> to { { { double*, i64, i64 } } }*                                                            
expected answer:
		<%ID> = ptrtoint { { { double*, i64, i64 } } }* <%ID> to i64                                                            
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { { { double*, i64, i64 } } }*                                                            
		<%ID> = inttoptr i64 <%ID> to { { double*, i64, i64 } }*                                                                
		<%ID> = ptrtoint { float, float }* <%ID> to i64                                                                         
		<%ID> = bitcast { { { double*, i64, i64 } } }** <%ID> to i64*                                                           
		<%ID> = inttoptr i64 <%ID> to { { { double*, i64 } } }*                                                                 

<%ID> = inttoptr i64 <%ID> to { float, float }*                                                                         
<%ID> = ptrtoint { float, float }* <%ID> to i64                                                                         
<%ID> = inttoptr i64 <%ID> to { { { i32*, i64 } } }*                                                                    
expected answer:
		<%ID> = ptrtoint { { { i32*, i64 } } }* <%ID> to i64                                                                    
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { { { i32*, i64 } } }*                                                                    
		<%ID> = getelementptr inbounds { { { { { i32*, i64 } } }, { { { i32*, i64 } } }*, { <{ i32*, { i8 } }>, [7 x i8] }, { { i32*, { i64 } } }, i64 } }, { { { { { i32*, i64 } } }, { { { i32*, i64 } } }*, { <{ i32*, { i8 } }>, [7 x i8] }, { { i32*, { i64 } } }, i64 } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = bitcast { { { i32*, i64 } } }** <%ID> to i64*                                                                   
		<%ID> = inttoptr i64 <%ID> to { { i32*, i64 } }*                                                                        
		<%ID> = bitcast { <{ i32*, { i8 } }>, [7 x i8] }* <%ID> to i64*                                                         

<%ID> = inttoptr i64 <%ID> to { float, float }*                                                                         
<%ID> = ptrtoint { float, float }* <%ID> to i64                                                                         
<%ID> = inttoptr i64 <%ID> to double*                                                                                   
expected answer:
		<%ID> = ptrtoint double* <%ID> to i64                                                                                   
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to double*                                                                                   
		<%ID> = ptrtoint { float, float }* <%ID> to i64                                                                         
		<%ID> = phi double* [ <%ID>, <%ID> ], [ null, <%ID> ]                                                                   
		store double* <%ID>, double** <%ID>, align 8                                                                            
		store { i8*, { { [4 x i64] } } }* <%ID>, { i8*, { { [4 x i64] } } }** <%ID>, align 8                                    

<%ID> = inttoptr i64 <%ID> to { float, float }*                                                                         
<%ID> = ptrtoint { float, float }* <%ID> to i64                                                                         
<%ID> = inttoptr i64 <%ID> to i32*                                                                                      
expected answer:
		<%ID> = ptrtoint i32* <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i32*                                                                                      
		<%ID> = ptrtoint { float, float }* <%ID> to i64                                                                         
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ null, <%ID> ], [ null, <%ID> ]                                                     
		store volatile i32 <%ID>, i32* <%ID>, align 4                                                                           
		<%ID> = load i32*, i32** <%ID>, align 8                                                                                 

<%ID> = inttoptr i64 <%ID> to { float, float }*                                                                         
<%ID> = ptrtoint { float, float }* <%ID> to i64                                                                         
<%ID> = inttoptr i64 <%ID> to i64*                                                                                      
expected answer:
		<%ID> = ptrtoint i64* <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i64*                                                                                      
		<%ID> = ptrtoint { float, float }* <%ID> to i64                                                                         
		store volatile i32 <%ID>, i32* <%ID>, align 4                                                                           
		<%ID> = invoke i8* <@ID>({ { { { { { i64, i64, i8* } } } } } }* nonnull dereferenceable(24) <%ID>, i8* <%ID>)
 to label <%ID> unwind label <%ID>
		<%ID> = getelementptr inbounds { { [32 x i8] }, { i32 (...)** }*, [8 x i8] }, { { [32 x i8] }, { i32 (...)** }*, [8 x i8] }* <%ID>, i64 <INT>, i32 <INT>

<%ID> = inttoptr i64 <%ID> to { float, float }*                                                                         
<%ID> = ptrtoint { float, float }* <%ID> to i64                                                                         
<%ID> = inttoptr i64 <%ID> to i8**                                                                                      
expected answer:
		<%ID> = ptrtoint i8** <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i8**                                                                                      
		<%ID> = ptrtoint { float, float }* <%ID> to i64                                                                         
		<%ID> = ptrtoint i8* <%ID> to i64                                                                                       
		<%ID> = load { { float*, i64 } }*, { { float*, i64 } }** <%ID>, align 8                                                 
		<%ID> = extractvalue { i32, i32, i32, i32 } <%ID>, 2                                                                    

<%ID> = inttoptr i64 <%ID> to { float, float }*                                                                         
<%ID> = ptrtoint { float, float }* <%ID> to i64                                                                         
<%ID> = inttoptr i64 <%ID> to i8*                                                                                       
expected answer:
		<%ID> = ptrtoint i8* <%ID> to i64                                                                                       
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i8*                                                                                       
		<%ID> = ptrtoint { float, float }* <%ID> to i64                                                                         
		store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* <@ID>, i64 <INT>, inrange i32 <INT>, i64 <INT>) to i32 (...)**), i32 (...)*** <%ID>, align 8
		<%ID> = call i8* <@ID>(i64 <INT>)                                                                                       
		ret { i32 (...)**, i8* }* bitcast ({ i8*, i8*, i32, i8* }* <@ID> to { i32 (...)**, i8* }*)                              

<%ID> = inttoptr i64 <%ID> to { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }**
<%ID> = ptrtoint { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }** <%ID> to i64
<%ID> = inttoptr i64 <%ID> to { opaque*, opaque* }*                                                                     
expected answer:
		<%ID> = ptrtoint { opaque*, opaque* }* <%ID> to i64                                                                     
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { opaque*, opaque* }*                                                                     
		<%ID> = ptrtoint { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }** <%ID> to i64
		<%ID> = phi { opaque*, opaque* }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                    
		<%ID> = bitcast i8* <%ID> to { opaque*, opaque* }*                                                                      
		<%ID> = load { opaque*, opaque* }*, { opaque*, opaque* }** <%ID>, align 8                                               

<%ID> = inttoptr i64 <%ID> to { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }**
<%ID> = ptrtoint { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }** <%ID> to i64
<%ID> = inttoptr i64 <%ID> to { { { double*, i64 } } }*                                                                 
expected answer:
		<%ID> = ptrtoint { { { double*, i64 } } }* <%ID> to i64                                                                 
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { { { double*, i64 } } }*                                                                 
		<%ID> = inttoptr i64 <%ID> to { { double*, i64 } }*                                                                     
		<%ID> = inttoptr i64 <%ID> to { { { double*, i64, i64 } } }*                                                            
		<%ID> = inttoptr i64 <%ID> to { { double*, i64, i64 } }*                                                                
		<%ID> = load double**, double*** <%ID>, align 8                                                                         

<%ID> = inttoptr i64 <%ID> to { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }**
<%ID> = ptrtoint { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }** <%ID> to i64
<%ID> = inttoptr i64 <%ID> to { { { double*, i64, i64 } } }*                                                            
expected answer:
		<%ID> = ptrtoint { { { double*, i64, i64 } } }* <%ID> to i64                                                            
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { { { double*, i64, i64 } } }*                                                            
		<%ID> = inttoptr i64 <%ID> to { { double*, i64, i64 } }*                                                                
		<%ID> = inttoptr i64 <%ID> to { { { double*, i64 } } }*                                                                 
		<%ID> = inttoptr i64 <%ID> to { { double*, i64 } }*                                                                     
		<%ID> = load double**, double*** <%ID>, align 8                                                                         

<%ID> = inttoptr i64 <%ID> to { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }**
<%ID> = ptrtoint { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }** <%ID> to i64
<%ID> = inttoptr i64 <%ID> to { { { i32*, i64 } } }*                                                                    
expected answer:
		<%ID> = ptrtoint { { { i32*, i64 } } }* <%ID> to i64                                                                    
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { { { i32*, i64 } } }*                                                                    
		<%ID> = inttoptr i64 <%ID> to { { i32*, i64 } }*                                                                        
		<%ID> = bitcast { { { i32*, i64 } } }** <%ID> to i64*                                                                   
		<%ID> = getelementptr inbounds { { { { { i32*, i64 } } }, { { { i32*, i64 } } }*, { <{ i32*, { i8 } }>, [7 x i8] }, { { i32*, { i64 } } }, i64 } }, { { { { { i32*, i64 } } }, { { { i32*, i64 } } }*, { <{ i32*, { i8 } }>, [7 x i8] }, { { i32*, { i64 } } }, i64 } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = bitcast { <{ i32*, { i8 } }>, [7 x i8] }* <%ID> to i64*                                                         

<%ID> = inttoptr i64 <%ID> to { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }**
<%ID> = ptrtoint { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }** <%ID> to i64
<%ID> = inttoptr i64 <%ID> to double*                                                                                   
expected answer:
		<%ID> = ptrtoint double* <%ID> to i64                                                                                   
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to double*                                                                                   
		<%ID> = ptrtoint { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }** <%ID> to i64
		<%ID> = phi double* [ <%ID>, <%ID> ], [ null, <%ID> ]                                                                   
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([202 x i8], [202 x i8]* <@ID>, i64 <INT>, i64 <INT>))
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([152 x i8], [152 x i8]* <@ID>, i64 <INT>, i64 <INT>))

<%ID> = inttoptr i64 <%ID> to { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }**
<%ID> = ptrtoint { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }** <%ID> to i64
<%ID> = inttoptr i64 <%ID> to float*                                                                                    
expected answer:
		<%ID> = ptrtoint float* <%ID> to i64                                                                                    
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to float*                                                                                    
		<%ID> = ptrtoint { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }** <%ID> to i64
		<%ID> = and i64 <%ID>, <INT>                                                                                            
		<%ID> = inttoptr i64 <%ID> to i8*                                                                                       
		<%ID> = bitcast float* <%ID> to <8 x float>*                                                                            

<%ID> = inttoptr i64 <%ID> to { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }**
<%ID> = ptrtoint { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }** <%ID> to i64
<%ID> = inttoptr i64 <%ID> to i32*                                                                                      
expected answer:
		<%ID> = ptrtoint i32* <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i32*                                                                                      
		<%ID> = ptrtoint { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }** <%ID> to i64
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ null, <%ID> ], [ null, <%ID> ]                                                     
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                 
		<%ID> = phi i64 [ 0, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ 0, <%ID> ]                                          

<%ID> = inttoptr i64 <%ID> to { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }**
<%ID> = ptrtoint { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }** <%ID> to i64
<%ID> = inttoptr i64 <%ID> to i64*                                                                                      
expected answer:
		<%ID> = ptrtoint i64* <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i64*                                                                                      
		<%ID> = ptrtoint { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }** <%ID> to i64
		<%ID> = inttoptr i64 <%ID> to { { double*, i64 } }*                                                                     
		tail call void <@ID>(i8* nonnull <%ID>, i8* <%ID>, i64 <%ID>, i32 <INT>, i1 false)                                      
		<%ID> = inttoptr i64 <%ID> to i32*                                                                                      

<%ID> = inttoptr i64 <%ID> to { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }**
<%ID> = ptrtoint { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }** <%ID> to i64
<%ID> = inttoptr i64 <%ID> to i8**                                                                                      
expected answer:
		<%ID> = ptrtoint i8** <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i8**                                                                                      
		<%ID> = getelementptr inbounds i8*, i8** <%ID>, i64 <INT>                                                               
		<%ID> = ptrtoint i8* <%ID> to i64                                                                                       
		<%ID> = inttoptr i64 <%ID> to float*                                                                                    
		<%ID> = load i8*, i8** <%ID>, align 8                                                                                   

<%ID> = inttoptr i64 <%ID> to { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }**
<%ID> = ptrtoint { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }** <%ID> to i64
<%ID> = inttoptr i64 <%ID> to i8*                                                                                       
expected answer:
		<%ID> = ptrtoint i8* <%ID> to i64                                                                                       
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i8*                                                                                       
		<%ID> = ptrtoint { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }** <%ID> to i64
		<%ID> = shl i64 <%ID>, <INT>                                                                                            
		<%ID> = and i64 <%ID>, <INT>                                                                                            
		<%ID> = sub i64 <%ID>, <%ID>                                                                                            

<%ID> = inttoptr i64 <%ID> to { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }*           
<%ID> = ptrtoint { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }* <%ID> to i64           
<%ID> = inttoptr i64 <%ID> to { { { double*, i64 } } }*                                                                 
expected answer:
		<%ID> = ptrtoint { { { double*, i64 } } }* <%ID> to i64                                                                 
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { { { double*, i64 } } }*                                                                 
		<%ID> = inttoptr i64 <%ID> to { { double*, i64 } }*                                                                     
		<%ID> = getelementptr inbounds { { { { { double*, i64, i64 } } }, { { { double*, i64 } } }*, { { double*, { i64 } } }, { { double*, { i64 } } }, i64 } }, { { { { { double*, i64, i64 } } }, { { { double*, i64 } } }*, { { double*, { i64 } } }, { { double*, { i64 } } }, i64 } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>
		<%ID> = getelementptr inbounds { { { { { double*, i64, i64 } } }, { { { double*, i64, i64 } } }*, { { double*, { i64 } } }, { { double*, { i64 } } }, i64 } }, { { { { { double*, i64, i64 } } }, { { { double*, i64, i64 } } }*, { { double*, { i64 } } }, { { double*, { i64 } } }, i64 } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>
		<%ID> = bitcast { { { double*, i64 } } }* <%ID> to i64*                                                                 

<%ID> = inttoptr i64 <%ID> to { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }*           
<%ID> = ptrtoint { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }* <%ID> to i64           
<%ID> = inttoptr i64 <%ID> to { { { double*, i64, i64 } } }*                                                            
expected answer:
		<%ID> = ptrtoint { { { double*, i64, i64 } } }* <%ID> to i64                                                            
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { { { double*, i64, i64 } } }*                                                            
		<%ID> = inttoptr i64 <%ID> to { { double*, i64, i64 } }*                                                                
		<%ID> = inttoptr i64 <%ID> to { { { double*, i64 } } }*                                                                 
		<%ID> = inttoptr i64 <%ID> to { { double*, i64 } }*                                                                     
		<%ID> = bitcast { { { double*, i64, i64 } } }** <%ID> to i64*                                                           

<%ID> = inttoptr i64 <%ID> to { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }*           
<%ID> = ptrtoint { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }* <%ID> to i64           
<%ID> = inttoptr i64 <%ID> to { { { i32*, i64 } } }*                                                                    
expected answer:
		<%ID> = ptrtoint { { { i32*, i64 } } }* <%ID> to i64                                                                    
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { { { i32*, i64 } } }*                                                                    
		<%ID> = inttoptr i64 <%ID> to { { i32*, i64 } }*                                                                        
		<%ID> = bitcast { { { i32*, i64 } } }** <%ID> to i64*                                                                   
		<%ID> = getelementptr inbounds { { { i8 }, { { { { <{ i32*, { i8 } }> }, { { { i32*, i64 } } } } } }, { { { { i32*, { i8 }, { i64 } } } } } } }, { { { i8 }, { { { { <{ i32*, { i8 } }> }, { { { i32*, i64 } } } } } }, { { { { i32*, { i8 }, { i64 } } } } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = getelementptr inbounds { { { { { i32*, i64 } } }, { { { i32*, i64 } } }*, { <{ i32*, { i8 } }>, [7 x i8] }, { { i32*, { i64 } } }, i64 } }, { { { { { i32*, i64 } } }, { { { i32*, i64 } } }*, { <{ i32*, { i8 } }>, [7 x i8] }, { { i32*, { i64 } } }, i64 } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>

<%ID> = inttoptr i64 <%ID> to { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }*           
<%ID> = ptrtoint { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }* <%ID> to i64           
<%ID> = inttoptr i64 <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                    
expected answer:
		<%ID> = ptrtoint { { { { { { i64, i64, i8* } } } } } }* <%ID> to i64                                                    
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                    
		<%ID> = getelementptr inbounds { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }* <%ID>, i64 <INT>
		<%ID> = bitcast { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } }* <%ID> to i64*
		<%ID> = icmp eq { { { { { { i64, i64, i8* } } } } } }* <%ID>, <%ID>                                                     
		<%ID> = getelementptr inbounds { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }* <%ID>, i64 <%ID>

<%ID> = inttoptr i64 <%ID> to { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }*           
<%ID> = ptrtoint { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }* <%ID> to i64           
<%ID> = inttoptr i64 <%ID> to double*                                                                                   
expected answer:
		<%ID> = ptrtoint double* <%ID> to i64                                                                                   
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to double*                                                                                   
		<%ID> = getelementptr inbounds { { { { i16 } } }*, { { [4 x i64] } } }, { { { { i16 } } }*, { { [4 x i64] } } }* <%ID>, i64 <INT>, i32 <INT>
		<%ID> = getelementptr inbounds { i32, i32, i32, i32, i8*, i8*, i8*, i8*, { i32 (...)** }*, { { i32 (...)** }*, { i32 (...)** }*, i32, i32, i8*, i8*, i64, i32, i8*, i8*, i32, i32, opaque* }*, { i32* }, { i64*, [2 x i64] } }, { i32, i32, i32, i32, i8*, i8*, i8*, i8*, { i32 (...)** }*, { { i32 (...)** }*, { i32 (...)** }*, i32, i32, i8*, i8*, i64, i32, i8*, i8*, i32, i32, opaque* }*, { i32* }, { i64*, [2 x i64] } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i64 <INT>
		<%ID> = getelementptr inbounds double, double* <%ID>, i64 <INT>                                                         
		<%ID> = icmp eq i8* <%ID>, null                                                                                         

<%ID> = inttoptr i64 <%ID> to { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }*           
<%ID> = ptrtoint { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }* <%ID> to i64           
<%ID> = inttoptr i64 <%ID> to float*                                                                                    
expected answer:
		<%ID> = ptrtoint float* <%ID> to i64                                                                                    
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to float*                                                                                    
		<%ID> = tail call i32 <@ID>({ i8*, i8*, opaque*, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, opaque*, { i32 (...)** }* }* nonnull <%ID>, i32 <%ID>)
		<%ID> = icmp eq i8* <%ID>, null                                                                                         
		<%ID> = getelementptr inbounds { i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32 }* <%ID>, i64 <INT>, i32 <INT>
		<%ID> = bitcast i32 <%ID> to float                                                                                      

<%ID> = inttoptr i64 <%ID> to { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }*           
<%ID> = ptrtoint { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }* <%ID> to i64           
<%ID> = inttoptr i64 <%ID> to i32*                                                                                      
expected answer:
		<%ID> = ptrtoint i32* <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i32*                                                                                      
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ null, <%ID> ], [ null, <%ID> ]                                                     
		<%ID> = getelementptr inbounds { i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32 }* <%ID>, i64 <INT>, i32 <INT>
		<%ID> = getelementptr inbounds i32*, i32** <%ID>, i64 <%ID>                                                             
		<%ID> = getelementptr inbounds { { { i32*, i64 } } }, { { { i32*, i64 } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>

<%ID> = inttoptr i64 <%ID> to { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }*           
<%ID> = ptrtoint { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }* <%ID> to i64           
<%ID> = inttoptr i64 <%ID> to i64*                                                                                      
expected answer:
		<%ID> = ptrtoint i64* <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i64*                                                                                      
		<%ID> = getelementptr inbounds { i32, i32, i32, i32, i8*, i8*, i8*, i8*, { i32 (...)** }*, { { i32 (...)** }*, { i32 (...)** }*, i32, i32, i8*, i8*, i64, i32, i8*, i8*, i32, i32, opaque* }*, { i32* }, { i64*, [2 x i64] } }, { i32, i32, i32, i32, i8*, i8*, i8*, i8*, { i32 (...)** }*, { { i32 (...)** }*, { i32 (...)** }*, i32, i32, i8*, i8*, i64, i32, i8*, i8*, i32, i32, opaque* }*, { i32* }, { i64*, [2 x i64] } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i64 <INT>
		<%ID> = bitcast { { opaque**, opaque**, { { opaque** } } } }* <%ID> to i64*                                             
		<%ID> = tail call i32 asm "bswapl $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 <%ID>)                                    
		<%ID> = select i1 <%ID>, i16 <%ID>, i16 <INT>                                                                           

<%ID> = inttoptr i64 <%ID> to { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }*           
<%ID> = ptrtoint { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }* <%ID> to i64           
<%ID> = inttoptr i64 <%ID> to i8**                                                                                      
expected answer:
		<%ID> = ptrtoint i8** <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i8**                                                                                      
		<%ID> = icmp eq i8* <%ID>, null                                                                                         
		<%ID> = ptrtoint i8* <%ID> to i64                                                                                       
		<%ID> = lshr i64 <%ID>, <INT>                                                                                           
		<%ID> = load i8*, i8** <%ID>, align 8                                                                                   

<%ID> = inttoptr i64 <%ID> to { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }*           
<%ID> = ptrtoint { i64, opaque, { i64 }, { i64 }, { { opaque*, opaque* } }, { i64 }, [8 x i8] }* <%ID> to i64           
<%ID> = inttoptr i64 <%ID> to i8*                                                                                       
expected answer:
		<%ID> = ptrtoint i8* <%ID> to i64                                                                                       
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i8*                                                                                       
		<%ID> = getelementptr inbounds { i32, i32, i32, i32, i8*, i8*, i8*, i8*, { i32 (...)** }*, { { i32 (...)** }*, { i32 (...)** }*, i32, i32, i8*, i8*, i64, i32, i8*, i8*, i32, i32, opaque* }*, { i32* }, { i64*, [2 x i64] } }, { i32, i32, i32, i32, i8*, i8*, i8*, i8*, { i32 (...)** }*, { { i32 (...)** }*, { i32 (...)** }*, i32, i32, i8*, i8*, i64, i32, i8*, i8*, i32, i32, opaque* }*, { i32* }, { i64*, [2 x i64] } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i64 <INT>
		<%ID> = getelementptr inbounds { i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32 }* <%ID>, i64 <INT>, i32 <INT>
		call void <@ID>(<{ i32 (...)**, { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }*, { opaque* }, i32, [4 x i8] }>* <%ID>)
		<%ID> = sub nsw i64 <INT>, <%ID>                                                                                        

<%ID> = inttoptr i64 <%ID> to { opaque*, opaque* }*                                                                     
<%ID> = ptrtoint { opaque*, opaque* }* <%ID> to i64                                                                     
<%ID> = inttoptr i64 <%ID> to { { { double*, i64 } } }*                                                                 
expected answer:
		<%ID> = ptrtoint { { { double*, i64 } } }* <%ID> to i64                                                                 
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { { { double*, i64 } } }*                                                                 
		<%ID> = inttoptr i64 <%ID> to { { double*, i64 } }*                                                                     
		<%ID> = inttoptr i64 <%ID> to { { { double*, i64, i64 } } }*                                                            
		<%ID> = bitcast { { { double*, i64, i64 } } }** <%ID> to i64*                                                           
		<%ID> = inttoptr i64 <%ID> to { { double*, i64, i64 } }*                                                                

<%ID> = inttoptr i64 <%ID> to { opaque*, opaque* }*                                                                     
<%ID> = ptrtoint { opaque*, opaque* }* <%ID> to i64                                                                     
<%ID> = inttoptr i64 <%ID> to { { { double*, i64, i64 } } }*                                                            
expected answer:
		<%ID> = ptrtoint { { { double*, i64, i64 } } }* <%ID> to i64                                                            
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { { { double*, i64, i64 } } }*                                                            
		<%ID> = inttoptr i64 <%ID> to { { double*, i64, i64 } }*                                                                
		<%ID> = bitcast { { { double*, i64, i64 } } }** <%ID> to i64*                                                           
		<%ID> = inttoptr i64 <%ID> to { { { double*, i64 } } }*                                                                 
		<%ID> = inttoptr i64 <%ID> to { { double*, i64 } }*                                                                     

<%ID> = inttoptr i64 <%ID> to { opaque*, opaque* }*                                                                     
<%ID> = ptrtoint { opaque*, opaque* }* <%ID> to i64                                                                     
<%ID> = inttoptr i64 <%ID> to { { { i32*, i64 } } }*                                                                    
expected answer:
		<%ID> = ptrtoint { { { i32*, i64 } } }* <%ID> to i64                                                                    
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { { { i32*, i64 } } }*                                                                    
		<%ID> = inttoptr i64 <%ID> to { { i32*, i64 } }*                                                                        
		<%ID> = bitcast { { { i32*, i64 } } }** <%ID> to i64*                                                                   
		<%ID> = bitcast { <{ i32*, { i8 } }>, [7 x i8] }* <%ID> to i64*                                                         
		<%ID> = load { { { i32*, i64 } } }*, { { { i32*, i64 } } }** <%ID>, align 8                                             

<%ID> = inttoptr i64 <%ID> to { opaque*, opaque* }*                                                                     
<%ID> = ptrtoint { opaque*, opaque* }* <%ID> to i64                                                                     
<%ID> = inttoptr i64 <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                    
expected answer:
		<%ID> = ptrtoint { { { { { { i64, i64, i8* } } } } } }* <%ID> to i64                                                    
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                    
		<%ID> = getelementptr inbounds { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }* <%ID>, i64 <INT>
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i64*                                                   
		<%ID> = icmp eq { { { { { { i64, i64, i8* } } } } } }* <%ID>, <%ID>                                                     
		<%ID> = bitcast { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } }* <%ID> to i64*

<%ID> = inttoptr i64 <%ID> to { opaque*, opaque* }*                                                                     
<%ID> = ptrtoint { opaque*, opaque* }* <%ID> to i64                                                                     
<%ID> = inttoptr i64 <%ID> to double*                                                                                   
expected answer:
		<%ID> = ptrtoint double* <%ID> to i64                                                                                   
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to double*                                                                                   
		<%ID> = phi double* [ <%ID>, <%ID> ], [ null, <%ID> ]                                                                   
		<%ID> = ptrtoint { opaque*, opaque* }* <%ID> to i64                                                                     
		<%ID> = bitcast { double }* <%ID> to i64*                                                                               
		<@ID> = linkonce_odr constant [34 x i8]  <STRING>                                                                       

<%ID> = inttoptr i64 <%ID> to { opaque*, opaque* }*                                                                     
<%ID> = ptrtoint { opaque*, opaque* }* <%ID> to i64                                                                     
<%ID> = inttoptr i64 <%ID> to float*                                                                                    
expected answer:
		<%ID> = ptrtoint float* <%ID> to i64                                                                                    
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to float*                                                                                    
		<%ID> = inttoptr i64 <%ID> to i8**                                                                                      
		store float* <%ID>, float** <%ID>, align 8                                                                              
		<%ID> = load float*, float** <%ID>, align 8                                                                             
		<%ID> = getelementptr float, float* <%ID>, i64 <%ID>                                                                    

<%ID> = inttoptr i64 <%ID> to { opaque*, opaque* }*                                                                     
<%ID> = ptrtoint { opaque*, opaque* }* <%ID> to i64                                                                     
<%ID> = inttoptr i64 <%ID> to i32*                                                                                      
expected answer:
		<%ID> = ptrtoint i32* <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i32*                                                                                      
		<%ID> = ptrtoint { opaque*, opaque* }* <%ID> to i64                                                                     
		<%ID> = getelementptr inbounds { { { i32*, i64 } } }, { { { i32*, i64 } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		store i32* <%ID>, i32** <%ID>, align 8                                                                                  
		<%ID> = load i32*, i32** <%ID>, align 8                                                                                 

<%ID> = inttoptr i64 <%ID> to { opaque*, opaque* }*                                                                     
<%ID> = ptrtoint { opaque*, opaque* }* <%ID> to i64                                                                     
<%ID> = inttoptr i64 <%ID> to i64*                                                                                      
expected answer:
		<%ID> = ptrtoint i64* <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i64*                                                                                      
		<%ID> = ptrtoint { opaque*, opaque* }* <%ID> to i64                                                                     
		<%ID> = inttoptr i64 <%ID> to { { double*, i64 } }*                                                                     
		<%ID> = inttoptr i64 <%ID> to i32*                                                                                      
		<%ID> = load i64*, i64** <%ID>, align 8                                                                                 

<%ID> = inttoptr i64 <%ID> to { opaque*, opaque* }*                                                                     
<%ID> = ptrtoint { opaque*, opaque* }* <%ID> to i64                                                                     
<%ID> = inttoptr i64 <%ID> to i8**                                                                                      
expected answer:
		<%ID> = ptrtoint i8** <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i8**                                                                                      
		<%ID> = getelementptr inbounds i8*, i8** <%ID>, i64 <INT>                                                               
		<%ID> = phi float* [ <%ID>, <%ID> ], [ null, <%ID> ]                                                                    
		<%ID> = load i8*, i8** <%ID>, align 8                                                                                   
		<%ID> = tail call noalias i8* <@ID>(i64 <%ID>)                                                                          

<%ID> = inttoptr i64 <%ID> to { opaque*, opaque* }*                                                                     
<%ID> = ptrtoint { opaque*, opaque* }* <%ID> to i64                                                                     
<%ID> = inttoptr i64 <%ID> to i8*                                                                                       
expected answer:
		<%ID> = ptrtoint i8* <%ID> to i64                                                                                       
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i8*                                                                                       
		<%ID> = sub nsw i64 <INT>, <%ID>                                                                                        
		<%ID> = ptrtoint { opaque*, opaque* }* <%ID> to i64                                                                     
		<%ID> = shl i64 <%ID>, <INT>                                                                                            
		define linkonce_odr void <@ID>({ { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } }*, { { { { { { i64, i64, i8* } } } } } }* dereferenceable(24)) local_unnamed_addr

<%ID> = inttoptr i64 <%ID> to { { { double*, i64 } } }*                                                                 
<%ID> = ptrtoint { { { double*, i64 } } }* <%ID> to i64                                                                 
<%ID> = inttoptr i64 <%ID> to { { { i32*, i64 } } }*                                                                    
expected answer:
		<%ID> = ptrtoint { { { i32*, i64 } } }* <%ID> to i64                                                                    
Nearest neighbors:
		<%ID> = ptrtoint { { { double*, i64 } } }* <%ID> to i64                                                                 
		<%ID> = inttoptr i64 <%ID> to { { { i32*, i64 } } }*                                                                    
		<%ID> = getelementptr inbounds { { { { { i32*, i64, i64 } } }*, { { { { i32*, i64 } } }* } }, { { { i32*, i64 } } }* }, { { { { { i32*, i64, i64 } } }*, { { { { i32*, i64 } } }* } }, { { { i32*, i64 } } }* }* <%ID>, i64 <INT>, i32 <INT>
		store { { { i32*, i64 } } }* <%ID>, { { { i32*, i64 } } }** <%ID>, align 8                                              
		<%ID> = bitcast { { { i32*, i64 } } }** <%ID> to i64*                                                                   

<%ID> = inttoptr i64 <%ID> to { { { double*, i64 } } }*                                                                 
<%ID> = ptrtoint { { { double*, i64 } } }* <%ID> to i64                                                                 
<%ID> = inttoptr i64 <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                    
expected answer:
		<%ID> = ptrtoint { { { { { { i64, i64, i8* } } } } } }* <%ID> to i64                                                    
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                    
		<%ID> = ptrtoint { { { double*, i64 } } }* <%ID> to i64                                                                 
		<%ID> = getelementptr inbounds { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }* <%ID>, i64 <INT>
		<%ID> = getelementptr inbounds { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } }, { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>
		invoke void <@ID>({ { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } }* nonnull <%ID>, { { { { { { i64, i64, i8* } } } } } }* nonnull dereferenceable(24) <%ID>)
 to label <%ID> unwind label <%ID>

<%ID> = inttoptr i64 <%ID> to { { { double*, i64 } } }*                                                                 
<%ID> = ptrtoint { { { double*, i64 } } }* <%ID> to i64                                                                 
<%ID> = inttoptr i64 <%ID> to double*                                                                                   
expected answer:
		<%ID> = ptrtoint double* <%ID> to i64                                                                                   
Nearest neighbors:
		<%ID> = ptrtoint { { { double*, i64 } } }* <%ID> to i64                                                                 
		<%ID> = inttoptr i64 <%ID> to double*                                                                                   
		store double* <%ID>, double** <%ID>, align 8                                                                            
		store { { { double*, i64 } } }* <%ID>, { { { double*, i64 } } }** <%ID>, align 8                                        
		<%ID> = load double*, double** <%ID>, align 8                                                                           

<%ID> = inttoptr i64 <%ID> to { { { double*, i64 } } }*                                                                 
<%ID> = ptrtoint { { { double*, i64 } } }* <%ID> to i64                                                                 
<%ID> = inttoptr i64 <%ID> to float*                                                                                    
expected answer:
		<%ID> = ptrtoint float* <%ID> to i64                                                                                    
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to float*                                                                                    
		<%ID> = ptrtoint { { { double*, i64 } } }* <%ID> to i64                                                                 
		<%ID> = getelementptr inbounds { { { { float*, i64 } } }*, { { { float*, i64 } } }* }, { { { { float*, i64 } } }*, { { { float*, i64 } } }* }* <%ID>, i64 <INT>, i32 <INT>
		store i8* <%ID>, i8** <%ID>, align 8                                                                                    
		<%ID> = getelementptr inbounds { { { float*, i64 } } }, { { { float*, i64 } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>

<%ID> = inttoptr i64 <%ID> to { { { double*, i64 } } }*                                                                 
<%ID> = ptrtoint { { { double*, i64 } } }* <%ID> to i64                                                                 
<%ID> = inttoptr i64 <%ID> to i32*                                                                                      
expected answer:
		<%ID> = ptrtoint i32* <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = ptrtoint { { { double*, i64 } } }* <%ID> to i64                                                                 
		<%ID> = inttoptr i64 <%ID> to i32*                                                                                      
		<%ID> = getelementptr inbounds { i32, i32, i32, i32, i32, i32 }, { i32, i32, i32, i32, i32, i32 }* <%ID>, i64 <INT>, i32 <INT>
		<%ID> = getelementptr inbounds { i32, i16 }, { i32, i16 }* <%ID>, i64 <INT>, i32 <INT>                                  
		store volatile i32 <%ID>, i32* <%ID>, align 4                                                                           

<%ID> = inttoptr i64 <%ID> to { { { double*, i64 } } }*                                                                 
<%ID> = ptrtoint { { { double*, i64 } } }* <%ID> to i64                                                                 
<%ID> = inttoptr i64 <%ID> to i64*                                                                                      
expected answer:
		<%ID> = ptrtoint i64* <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = ptrtoint { { { double*, i64 } } }* <%ID> to i64                                                                 
		<%ID> = inttoptr i64 <%ID> to i64*                                                                                      
		store { { { double*, i64 } } }* <%ID>, { { { double*, i64 } } }** <%ID>, align 8                                        
		<%ID> = bitcast i8* <%ID> to <{ opaque, opaque*, opaque*, i8, [7 x i8] }>*                                              
		<%ID> = select i1 <%ID>, i16 <%ID>, i16 <INT>                                                                           

<%ID> = inttoptr i64 <%ID> to { { { double*, i64 } } }*                                                                 
<%ID> = ptrtoint { { { double*, i64 } } }* <%ID> to i64                                                                 
<%ID> = inttoptr i64 <%ID> to i8**                                                                                      
expected answer:
		<%ID> = ptrtoint i8** <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i8**                                                                                      
		<%ID> = ptrtoint { { { double*, i64 } } }* <%ID> to i64                                                                 
		<%ID> = icmp eq i8* <%ID>, null                                                                                         
		<%ID> = load i8*, i8** <%ID>, align 8                                                                                   
		store i8* <%ID>, i8** <%ID>, align 8                                                                                    

<%ID> = inttoptr i64 <%ID> to { { { double*, i64 } } }*                                                                 
<%ID> = ptrtoint { { { double*, i64 } } }* <%ID> to i64                                                                 
<%ID> = inttoptr i64 <%ID> to i8*                                                                                       
expected answer:
		<%ID> = ptrtoint i8* <%ID> to i64                                                                                       
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i8*                                                                                       
		<%ID> = ptrtoint { { { double*, i64 } } }* <%ID> to i64                                                                 
		define linkonce_odr { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }* <@ID>({ opaque*, { { opaque } }, { { i64 } } }*, { { { { { { i64, i64, i8* } } } } } }* dereferenceable(24)) local_unnamed_addr
		<%ID> = call dereferenceable(8) <{ opaque, opaque*, opaque*, i8, [7 x i8] }>** <@ID>({ opaque*, { { opaque } }, { { i64 } } }* <%ID>, { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** nonnull dereferenceable(8) <%ID>, { { { { { { i64, i64, i8* } } } } } }* nonnull dereferenceable(24) <%ID>)
		<%ID> = call i8* <@ID>(i64 <INT>)                                                                                       

<%ID> = inttoptr i64 <%ID> to { { { double*, i64, i64 } } }*                                                            
<%ID> = ptrtoint { { { double*, i64, i64 } } }* <%ID> to i64                                                            
<%ID> = inttoptr i64 <%ID> to { { { i32*, i64 } } }*                                                                    
expected answer:
		<%ID> = ptrtoint { { { i32*, i64 } } }* <%ID> to i64                                                                    
Nearest neighbors:
		<%ID> = ptrtoint { { { double*, i64, i64 } } }* <%ID> to i64                                                            
		<%ID> = inttoptr i64 <%ID> to { { { i32*, i64 } } }*                                                                    
		<%ID> = load { { i32*, i64 } }*, { { i32*, i64 } }** <%ID>, align 8                                                     
		store { { { i32*, i64 } } }* <%ID>, { { { i32*, i64 } } }** <%ID>, align 8                                              
		<%ID> = inttoptr i64 <%ID> to { { i32*, i64 } }*                                                                        

<%ID> = inttoptr i64 <%ID> to { { { double*, i64, i64 } } }*                                                            
<%ID> = ptrtoint { { { double*, i64, i64 } } }* <%ID> to i64                                                            
<%ID> = inttoptr i64 <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                    
expected answer:
		<%ID> = ptrtoint { { { { { { i64, i64, i8* } } } } } }* <%ID> to i64                                                    
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                    
		<%ID> = ptrtoint { { { double*, i64, i64 } } }* <%ID> to i64                                                            
		<%ID> = getelementptr inbounds { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }* <%ID>, i64 <INT>
		<%ID> = bitcast { { { { { { i64, i64, i8* } } } } } }** <%ID> to i64*                                                   
		<%ID> = getelementptr inbounds { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } }, { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>

<%ID> = inttoptr i64 <%ID> to { { { double*, i64, i64 } } }*                                                            
<%ID> = ptrtoint { { { double*, i64, i64 } } }* <%ID> to i64                                                            
<%ID> = inttoptr i64 <%ID> to double*                                                                                   
expected answer:
		<%ID> = ptrtoint double* <%ID> to i64                                                                                   
Nearest neighbors:
		<%ID> = ptrtoint { { { double*, i64, i64 } } }* <%ID> to i64                                                            
		<%ID> = inttoptr i64 <%ID> to double*                                                                                   
		<%ID> = bitcast { { i32, i8*, { i32, i32 } } }* <%ID> to i8*                                                            
		<%ID> = getelementptr inbounds { { { { [17 x float] } } } }, { { { { [17 x float] } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i64 <INT>
		<%ID> = getelementptr inbounds { { { { [16 x double] } } } }, { { { { [16 x double] } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i64 <INT>

<%ID> = inttoptr i64 <%ID> to { { { double*, i64, i64 } } }*                                                            
<%ID> = ptrtoint { { { double*, i64, i64 } } }* <%ID> to i64                                                            
<%ID> = inttoptr i64 <%ID> to float*                                                                                    
expected answer:
		<%ID> = ptrtoint float* <%ID> to i64                                                                                    
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to float*                                                                                    
		<%ID> = ptrtoint { { { double*, i64, i64 } } }* <%ID> to i64                                                            
		<%ID> = getelementptr inbounds { { { { [17 x float] } } } }, { { { { [17 x float] } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i64 <INT>
		<%ID> = getelementptr inbounds { { { float*, i64 } } }, { { { float*, i64 } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = bitcast { { i32, i8*, { i32, i32 } } }* <%ID> to i8*                                                            

<%ID> = inttoptr i64 <%ID> to { { { double*, i64, i64 } } }*                                                            
<%ID> = ptrtoint { { { double*, i64, i64 } } }* <%ID> to i64                                                            
<%ID> = inttoptr i64 <%ID> to i32*                                                                                      
expected answer:
		<%ID> = ptrtoint i32* <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i32*                                                                                      
		<%ID> = ptrtoint { { { double*, i64, i64 } } }* <%ID> to i64                                                            
		<%ID> = load i32*, i32** <%ID>, align 8                                                                                 
		<%ID> = getelementptr inbounds { i32, i32, i32, i32 }, { i32, i32, i32, i32 }* <%ID>, i64 <INT>, i32 <INT>              
		<%ID> = getelementptr inbounds { i32, i16 }, { i32, i16 }* <%ID>, i64 <INT>, i32 <INT>                                  

<%ID> = inttoptr i64 <%ID> to { { { double*, i64, i64 } } }*                                                            
<%ID> = ptrtoint { { { double*, i64, i64 } } }* <%ID> to i64                                                            
<%ID> = inttoptr i64 <%ID> to i64*                                                                                      
expected answer:
		<%ID> = ptrtoint i64* <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = ptrtoint { { { double*, i64, i64 } } }* <%ID> to i64                                                            
		<%ID> = inttoptr i64 <%ID> to i64*                                                                                      
		<%ID> = phi { i64 }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                 
		<%ID> = bitcast { { i32, i8*, { i32, i32 } } }* <%ID> to i8*                                                            
		<%ID> = getelementptr inbounds { { { { [17 x float] } } } }, { { { { [17 x float] } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i64 <INT>

<%ID> = inttoptr i64 <%ID> to { { { double*, i64, i64 } } }*                                                            
<%ID> = ptrtoint { { { double*, i64, i64 } } }* <%ID> to i64                                                            
<%ID> = inttoptr i64 <%ID> to i8**                                                                                      
expected answer:
		<%ID> = ptrtoint i8** <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = ptrtoint { { { double*, i64, i64 } } }* <%ID> to i64                                                            
		<%ID> = inttoptr i64 <%ID> to i8**                                                                                      
		<%ID> = icmp eq i8* <%ID>, null                                                                                         
		<%ID> = getelementptr inbounds { { { { [17 x float] } } } }, { { { { [17 x float] } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i64 <INT>
		<%ID> = getelementptr inbounds { { { float*, i64 } } }, { { { float*, i64 } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>

<%ID> = inttoptr i64 <%ID> to { { { double*, i64, i64 } } }*                                                            
<%ID> = ptrtoint { { { double*, i64, i64 } } }* <%ID> to i64                                                            
<%ID> = inttoptr i64 <%ID> to i8*                                                                                       
expected answer:
		<%ID> = ptrtoint i8* <%ID> to i64                                                                                       
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i8*                                                                                       
		<%ID> = ptrtoint { { { double*, i64, i64 } } }* <%ID> to i64                                                            
		<%ID> = getelementptr inbounds { { { { [17 x float] } } } }, { { { { [17 x float] } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i32 <INT>, i64 <INT>
		store i16 <%ID>, i16* <%ID>, align 4                                                                                    
		<%ID> = invoke i32 <@ID>({ i32, i8*, { i32, i32 } }* nonnull <%ID>)
 to label <%ID> unwind label <%ID>                  

<%ID> = inttoptr i64 <%ID> to { { { i32*, i64 } } }*                                                                    
<%ID> = ptrtoint { { { i32*, i64 } } }* <%ID> to i64                                                                    
<%ID> = inttoptr i64 <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                    
expected answer:
		<%ID> = ptrtoint { { { { { { i64, i64, i8* } } } } } }* <%ID> to i64                                                    
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                    
		<%ID> = ptrtoint { { { i32*, i64 } } }* <%ID> to i64                                                                    
		<%ID> = getelementptr inbounds { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } }, { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>
		<%ID> = bitcast { { { { { { { { i64, i64, i8* } } } } } }*, { { { { { { i64, i64, i8* } } } } } }*, { { { { { { { { i64, i64, i8* } } } } } }* } } } }* <%ID> to i64*
		<%ID> = getelementptr inbounds { { { { { { i64, i64, i8* } } } } } }, { { { { { { i64, i64, i8* } } } } } }* <%ID>, i64 <INT>

<%ID> = inttoptr i64 <%ID> to { { { i32*, i64 } } }*                                                                    
<%ID> = ptrtoint { { { i32*, i64 } } }* <%ID> to i64                                                                    
<%ID> = inttoptr i64 <%ID> to double*                                                                                   
expected answer:
		<%ID> = ptrtoint double* <%ID> to i64                                                                                   
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to double*                                                                                   
		<%ID> = ptrtoint { { { i32*, i64 } } }* <%ID> to i64                                                                    
		<%ID> = bitcast { <{ double*, { i8 } }>, [7 x i8] }* <%ID> to i8*                                                       
		store { <{ double*, { i8 } }>, [7 x i8] }* <%ID>, { <{ double*, { i8 } }>, [7 x i8] }** <%ID>, align 8                  
		<%ID> = getelementptr inbounds { <{ double*, { i8 } }>, [7 x i8] }, { <{ double*, { i8 } }>, [7 x i8] }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>

<%ID> = inttoptr i64 <%ID> to { { { i32*, i64 } } }*                                                                    
<%ID> = ptrtoint { { { i32*, i64 } } }* <%ID> to i64                                                                    
<%ID> = inttoptr i64 <%ID> to float*                                                                                    
expected answer:
		<%ID> = ptrtoint float* <%ID> to i64                                                                                    
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to float*                                                                                    
		<%ID> = ptrtoint { { { i32*, i64 } } }* <%ID> to i64                                                                    
		<%ID> = alloca { i8 }, align 1                                                                                          
		<%ID> = getelementptr inbounds { { { { float*, i64 } } }*, { { { float*, i64 } } }* }, { { { { float*, i64 } } }*, { { { float*, i64 } } }* }* <%ID>, i64 <INT>, i32 <INT>
		<%ID> = load i8*, i8** <%ID>, align 8                                                                                   

<%ID> = inttoptr i64 <%ID> to { { { i32*, i64 } } }*                                                                    
<%ID> = ptrtoint { { { i32*, i64 } } }* <%ID> to i64                                                                    
<%ID> = inttoptr i64 <%ID> to i32*                                                                                      
expected answer:
		<%ID> = ptrtoint i32* <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = ptrtoint { { { i32*, i64 } } }* <%ID> to i64                                                                    
		<%ID> = inttoptr i64 <%ID> to i32*                                                                                      
		<%ID> = load i32*, i32** <%ID>, align 8                                                                                 
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to i8*                                                                
		<%ID> = getelementptr inbounds { <{ { { { i32*, i64 } } }*, { { { i32*, i64 } } }*, { i8 }, [7 x i8] }>, { { { i32*, i64, i64 } } }* }, { <{ { { { i32*, i64 } } }*, { { { i32*, i64 } } }*, { i8 }, [7 x i8] }>, { { { i32*, i64, i64 } } }* }* <%ID>, i64 <INT>, i32 <INT>

<%ID> = inttoptr i64 <%ID> to { { { i32*, i64 } } }*                                                                    
<%ID> = ptrtoint { { { i32*, i64 } } }* <%ID> to i64                                                                    
<%ID> = inttoptr i64 <%ID> to i64*                                                                                      
expected answer:
		<%ID> = ptrtoint i64* <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = ptrtoint { { { i32*, i64 } } }* <%ID> to i64                                                                    
		<%ID> = inttoptr i64 <%ID> to i64*                                                                                      
		<%ID> = ptrtoint { { { i32*, i64, i64 } } }* <%ID> to i64                                                               
		<%ID> = getelementptr inbounds { i64*, i64, { { i64 } } }, { i64*, i64, { { i64 } } }* <%ID>, i64 <INT>, i32 <INT>      
		<%ID> = bitcast { { { i32*, i64, i64 } } }* <%ID> to i8*                                                                

<%ID> = inttoptr i64 <%ID> to { { { i32*, i64 } } }*                                                                    
<%ID> = ptrtoint { { { i32*, i64 } } }* <%ID> to i64                                                                    
<%ID> = inttoptr i64 <%ID> to i8**                                                                                      
expected answer:
		<%ID> = ptrtoint i8** <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i8**                                                                                      
		<%ID> = ptrtoint { { { i32*, i64 } } }* <%ID> to i64                                                                    
		<%ID> = icmp eq i8* <%ID>, null                                                                                         
		<%ID> = load i8*, i8** <%ID>, align 8                                                                                   
		tail call void <@ID>(i32* nonnull dereferenceable(4) <%ID>, i32* nonnull dereferenceable(4) <%ID>, i32* nonnull dereferenceable(4) <%ID>)

<%ID> = inttoptr i64 <%ID> to { { { i32*, i64 } } }*                                                                    
<%ID> = ptrtoint { { { i32*, i64 } } }* <%ID> to i64                                                                    
<%ID> = inttoptr i64 <%ID> to i8*                                                                                       
expected answer:
		<%ID> = ptrtoint i8* <%ID> to i64                                                                                       
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i8*                                                                                       
		<%ID> = ptrtoint { { { i32*, i64 } } }* <%ID> to i64                                                                    
		<%ID> = alloca { i8 }, align 1                                                                                          
		<%ID> = bitcast <{ { { i32 (...)** } }, { { i8* } }, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }, { { <{ i32 (...)**, { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, { { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, i32, { i32, [1 x i8*] }* } }*, { opaque* }, i32 }> }, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }*, i32, { i64, i64, i64, i64, i8**, { { { i64, i64, i64, { opaque*, i64, i64 }*, i64, { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* } }, void ({ i32 (...)**, i8* }*, i64, i8*)*, void (opaque*, i8*, i64)*, void (opaque*, i8*, i64)*, i8* }* } }* } } }, { { { { { { { i64, i64, i8* } } } } } }* }, { { { { { { { i64, i64, i8* } } } } } }* }, { { { { { { { i64, i64, i8* } } } } } }* }, i32, [4 x i8] }>** <%ID> to i8*
		<%ID> = sub nsw i64 <INT>, <%ID>                                                                                        

<%ID> = inttoptr i64 <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                    
<%ID> = ptrtoint { { { { { { i64, i64, i8* } } } } } }* <%ID> to i64                                                    
<%ID> = inttoptr i64 <%ID> to double*                                                                                   
expected answer:
		<%ID> = ptrtoint double* <%ID> to i64                                                                                   
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to double*                                                                                   
		<%ID> = getelementptr inbounds { { { double*, i64 } } }, { { { double*, i64 } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = ptrtoint { { { { { { i64, i64, i8* } } } } } }* <%ID> to i64                                                    
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([152 x i8], [152 x i8]* <@ID>, i64 <INT>, i64 <INT>))
		<%ID> = ptrtoint i8* <%ID> to i64                                                                                       

<%ID> = inttoptr i64 <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                    
<%ID> = ptrtoint { { { { { { i64, i64, i8* } } } } } }* <%ID> to i64                                                    
<%ID> = inttoptr i64 <%ID> to float*                                                                                    
expected answer:
		<%ID> = ptrtoint float* <%ID> to i64                                                                                    
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to float*                                                                                    
		<%ID> = ptrtoint { { { { { { i64, i64, i8* } } } } } }* <%ID> to i64                                                    
		unreachable                                                                                                             
		<%ID> = or i64 <%ID>, <%ID>                                                                                             
		<%ID> = ptrtoint i8* <%ID> to i64                                                                                       

<%ID> = inttoptr i64 <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                    
<%ID> = ptrtoint { { { { { { i64, i64, i8* } } } } } }* <%ID> to i64                                                    
<%ID> = inttoptr i64 <%ID> to i32*                                                                                      
expected answer:
		<%ID> = ptrtoint i32* <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i32*                                                                                      
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                 
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = ptrtoint { { { { { { i64, i64, i8* } } } } } }* <%ID> to i64                                                    
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ null, <%ID> ], [ null, <%ID> ]                                                     

<%ID> = inttoptr i64 <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                    
<%ID> = ptrtoint { { { { { { i64, i64, i8* } } } } } }* <%ID> to i64                                                    
<%ID> = inttoptr i64 <%ID> to i64*                                                                                      
expected answer:
		<%ID> = ptrtoint i64* <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i64*                                                                                      
		<%ID> = ptrtoint { { { { { { i64, i64, i8* } } } } } }* <%ID> to i64                                                    
		<%ID> = bitcast i32** <%ID> to i64*                                                                                     
		<%ID> = add nsw i64 <%ID>, <INT>                                                                                        
		<%ID> = phi i64* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                 

<%ID> = inttoptr i64 <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                    
<%ID> = ptrtoint { { { { { { i64, i64, i8* } } } } } }* <%ID> to i64                                                    
<%ID> = inttoptr i64 <%ID> to i8**                                                                                      
expected answer:
		<%ID> = ptrtoint i8** <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i8**                                                                                      
		<%ID> = ptrtoint i8* <%ID> to i64                                                                                       
		<%ID> = phi { { { float*, i64 } } }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                 
		<%ID> = call noalias i8* <@ID>(i64 <%ID>)                                                                               
		<%ID> = inttoptr i64 <%ID> to float*                                                                                    

<%ID> = inttoptr i64 <%ID> to { { { { { { i64, i64, i8* } } } } } }*                                                    
<%ID> = ptrtoint { { { { { { i64, i64, i8* } } } } } }* <%ID> to i64                                                    
<%ID> = inttoptr i64 <%ID> to i8*                                                                                       
expected answer:
		<%ID> = ptrtoint i8* <%ID> to i64                                                                                       
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i8*                                                                                       
		<%ID> = ptrtoint { { { { { { i64, i64, i8* } } } } } }* <%ID> to i64                                                    
		<%ID> = shl i64 <%ID>, <INT>                                                                                            
		<%ID> = sub nsw i64 <INT>, <%ID>                                                                                        
		unreachable                                                                                                             

<%ID> = inttoptr i64 <%ID> to double*                                                                                   
<%ID> = ptrtoint double* <%ID> to i64                                                                                   
<%ID> = inttoptr i64 <%ID> to float*                                                                                    
expected answer:
		<%ID> = ptrtoint float* <%ID> to i64                                                                                    
Nearest neighbors:
		<%ID> = ptrtoint double* <%ID> to i64                                                                                   
		<%ID> = inttoptr i64 <%ID> to float*                                                                                    
		<%ID> = phi i64 [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                      
		<%ID> = lshr i64 <%ID>, <INT>                                                                                           
		<%ID> = lshr exact i64 <%ID>, <INT>                                                                                     

<%ID> = inttoptr i64 <%ID> to double*                                                                                   
<%ID> = ptrtoint double* <%ID> to i64                                                                                   
<%ID> = inttoptr i64 <%ID> to i32*                                                                                      
expected answer:
		<%ID> = ptrtoint i32* <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i32*                                                                                      
		<%ID> = ptrtoint double* <%ID> to i64                                                                                   
		call void <@ID>(i64 <%ID>, i64 <INT>, { { i32*, i64 } }* nonnull dereferenceable(16) <%ID>, { { i32*, i64 } }* nonnull dereferenceable(16) <%ID>, i32* <%ID>, i64 <INT>, i32 <INT>)
		<%ID> = getelementptr inbounds { { { i32*, i64 } } }, { { { i32*, i64 } } }* <%ID>, i64 <INT>, i32 <INT>, i32 <INT>, i32 <INT>
		<%ID> = select i1 <%ID>, i32* <%ID>, i32* <%ID>                                                                         

<%ID> = inttoptr i64 <%ID> to double*                                                                                   
<%ID> = ptrtoint double* <%ID> to i64                                                                                   
<%ID> = inttoptr i64 <%ID> to i64*                                                                                      
expected answer:
		<%ID> = ptrtoint i64* <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i64*                                                                                      
		<%ID> = ptrtoint double* <%ID> to i64                                                                                   
		<%ID> = load { opaque*, i32, i32, i32, i32, i32* }**, { opaque*, i32, i32, i32, i32, i32* }*** <%ID>, align 8           
		call void <@ID>(i64 <%ID>, i64 <INT>, { { i32*, i64 } }* nonnull dereferenceable(16) <%ID>, { { i32*, i64 } }* nonnull dereferenceable(16) <%ID>, i32* <%ID>, i64 <INT>, i32 <INT>)
		<%ID> = sub nsw i64 <%ID>, <%ID>                                                                                        

<%ID> = inttoptr i64 <%ID> to double*                                                                                   
<%ID> = ptrtoint double* <%ID> to i64                                                                                   
<%ID> = inttoptr i64 <%ID> to i8**                                                                                      
expected answer:
		<%ID> = ptrtoint i8** <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i8**                                                                                      
		<%ID> = ptrtoint double* <%ID> to i64                                                                                   
		<%ID> = lshr i64 <%ID>, <INT>                                                                                           
		<%ID> = lshr exact i64 <%ID>, <INT>                                                                                     
		<%ID> = ptrtoint i8* <%ID> to i64                                                                                       

<%ID> = inttoptr i64 <%ID> to double*                                                                                   
<%ID> = ptrtoint double* <%ID> to i64                                                                                   
<%ID> = inttoptr i64 <%ID> to i8*                                                                                       
expected answer:
		<%ID> = ptrtoint i8* <%ID> to i64                                                                                       
Nearest neighbors:
		<%ID> = ptrtoint double* <%ID> to i64                                                                                   
		<%ID> = inttoptr i64 <%ID> to i8*                                                                                       
		<%ID> = getelementptr double, double* <%ID>, i64 <%ID>                                                                  
		<%ID> = lshr i64 <%ID>, <INT>                                                                                           
		<%ID> = lshr exact i64 <%ID>, <INT>                                                                                     

<%ID> = inttoptr i64 <%ID> to float*                                                                                    
<%ID> = ptrtoint float* <%ID> to i64                                                                                    
<%ID> = inttoptr i64 <%ID> to i32*                                                                                      
expected answer:
		<%ID> = ptrtoint i32* <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i32*                                                                                      
		<%ID> = ptrtoint float* <%ID> to i64                                                                                    
		<%ID> = getelementptr inbounds i32*, i32** <%ID>, i64 <%ID>                                                             
		<%ID> = getelementptr inbounds { i32, i16 }, { i32, i16 }* <%ID>, i64 <INT>, i32 <INT>                                  
		<%ID> = phi i32* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                                     

<%ID> = inttoptr i64 <%ID> to float*                                                                                    
<%ID> = ptrtoint float* <%ID> to i64                                                                                    
<%ID> = inttoptr i64 <%ID> to i64*                                                                                      
expected answer:
		<%ID> = ptrtoint i64* <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i64*                                                                                      
		<%ID> = ptrtoint float* <%ID> to i64                                                                                    
		<%ID> = bitcast { { { float*, i64 } } }** <%ID> to { { float*, i64 } }**                                                
		<%ID> = sub i64 <%ID>, <%ID>                                                                                            
		<%ID> = load i64*, i64** <%ID>, align 8                                                                                 

<%ID> = inttoptr i64 <%ID> to float*                                                                                    
<%ID> = ptrtoint float* <%ID> to i64                                                                                    
<%ID> = inttoptr i64 <%ID> to i8**                                                                                      
expected answer:
		<%ID> = ptrtoint i8** <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = ptrtoint float* <%ID> to i64                                                                                    
		<%ID> = inttoptr i64 <%ID> to i8**                                                                                      
		<%ID> = icmp eq float* <%ID>, null                                                                                      
		<%ID> = load { { { float*, i64 } } }*, { { { float*, i64 } } }** <%ID>, align 8                                         
		<%ID> = ptrtoint i8* <%ID> to i64                                                                                       

<%ID> = inttoptr i64 <%ID> to float*                                                                                    
<%ID> = ptrtoint float* <%ID> to i64                                                                                    
<%ID> = inttoptr i64 <%ID> to i8*                                                                                       
expected answer:
		<%ID> = ptrtoint i8* <%ID> to i64                                                                                       
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i8*                                                                                       
		<%ID> = ptrtoint float* <%ID> to i64                                                                                    
		<%ID> = sub i64 <%ID>, <%ID>                                                                                            
		<%ID> = icmp ugt i64 <%ID>, <INT>                                                                                       
		<%ID> = select i1 <%ID>, i64 <%ID>, i64 <%ID>                                                                           

<%ID> = inttoptr i64 <%ID> to i32*                                                                                      
<%ID> = ptrtoint i32* <%ID> to i64                                                                                      
<%ID> = inttoptr i64 <%ID> to i64*                                                                                      
expected answer:
		<%ID> = ptrtoint i64* <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i64*                                                                                      
		<%ID> = ptrtoint i32* <%ID> to i64                                                                                      
		define linkonce_odr dereferenceable(8) <{ opaque, opaque*, opaque*, i8, [7 x i8] }>** <@ID>({ opaque*, { { opaque } }, { { i64 } } }*, { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** dereferenceable(8), { { { { { { i64, i64, i8* } } } } } }* dereferenceable(24)) local_unnamed_addr
		call void <@ID>(i8* getelementptr inbounds ([44 x i8], [44 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([50 x i8], [50 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([152 x i8], [152 x i8]* <@ID>, i64 <INT>, i64 <INT>))
		store { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }* <%ID>, { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** <%ID>, align 8

<%ID> = inttoptr i64 <%ID> to i32*                                                                                      
<%ID> = ptrtoint i32* <%ID> to i64                                                                                      
<%ID> = inttoptr i64 <%ID> to i8**                                                                                      
expected answer:
		<%ID> = ptrtoint i8** <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i8**                                                                                      
		<%ID> = ptrtoint i32* <%ID> to i64                                                                                      
		<%ID> = ptrtoint i8* <%ID> to i64                                                                                       
		<%ID> = tail call noalias i8* <@ID>(i64 <%ID>)                                                                          
		define linkonce_odr void <@ID>({ i8 }*) unnamed_addr                                                                    

<%ID> = inttoptr i64 <%ID> to i32*                                                                                      
<%ID> = ptrtoint i32* <%ID> to i64                                                                                      
<%ID> = inttoptr i64 <%ID> to i8*                                                                                       
expected answer:
		<%ID> = ptrtoint i8* <%ID> to i64                                                                                       
Nearest neighbors:
		<%ID> = inttoptr i64 <%ID> to i8*                                                                                       
		<%ID> = ptrtoint i32* <%ID> to i64                                                                                      
		define linkonce_odr dereferenceable(8) <{ opaque, opaque*, opaque*, i8, [7 x i8] }>** <@ID>({ opaque*, { { opaque } }, { { i64 } } }*, { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** dereferenceable(8), { { { { { { i64, i64, i8* } } } } } }* dereferenceable(24)) local_unnamed_addr
		define linkonce_odr { { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }*, i8 } <@ID>({ opaque*, { { opaque } }, { { i64 } } }*, { { { { { { i64, i64, i8* } } } } } }* dereferenceable(24), { i8 }* dereferenceable(1), { { { { { { { { { i64, i64, i8* } } } } } }* } } }* dereferenceable(8), { i8 }* dereferenceable(1)) local_unnamed_addr
		<%ID> = call dereferenceable(8) <{ opaque, opaque*, opaque*, i8, [7 x i8] }>** <@ID>({ opaque*, { { opaque } }, { { i64 } } }* <%ID>, { <{ opaque, opaque*, opaque*, i8, [7 x i8] }>* }** nonnull dereferenceable(8) <%ID>, { { { { { { i64, i64, i8* } } } } } }* nonnull dereferenceable(24) <%ID>)

<%ID> = inttoptr i64 <%ID> to i64*                                                                                      
<%ID> = ptrtoint i64* <%ID> to i64                                                                                      
<%ID> = inttoptr i64 <%ID> to i8**                                                                                      
expected answer:
		<%ID> = ptrtoint i8** <%ID> to i64                                                                                      
Nearest neighbors:
		<%ID> = ptrtoint i64* <%ID> to i64                                                                                      
		<%ID> = inttoptr i64 <%ID> to i8**                                                                                      
		<%ID> = extractvalue { i32, i32, i32, i32 } <%ID>, 2                                                                    
		<%ID> = getelementptr inbounds i8*, i8** <%ID>, i64 <INT>                                                               
		<%ID> = and i1 <%ID>, <%ID>                                                                                             

<%ID> = inttoptr i64 <%ID> to i64*                                                                                      
<%ID> = ptrtoint i64* <%ID> to i64                                                                                      
<%ID> = inttoptr i64 <%ID> to i8*                                                                                       
expected answer:
		<%ID> = ptrtoint i8* <%ID> to i64                                                                                       
Nearest neighbors:
		<%ID> = ptrtoint i64* <%ID> to i64                                                                                      
		<%ID> = inttoptr i64 <%ID> to i8*                                                                                       
		<%ID> = load { { i64*, i64*, { { i64* } } } }*, { { i64*, i64*, { { i64* } } } }** <%ID>, align 8                       
		call void <@ID>(i8* getelementptr inbounds ([37 x i8], [37 x i8]* <@ID>, i64 <INT>, i64 <INT>), i8* getelementptr inbounds ([60 x i8], [60 x i8]* <@ID>, i64 <INT>, i64 <INT>), i32 <INT>, i8* getelementptr inbounds ([166 x i8], [166 x i8]* <@ID>, i64 <INT>, i64 <INT>))
		define linkonce_odr void <@ID>({ { { { { { i64, i64, i8* } } } } } }* noalias sret, { { { { { { i64, i64, i8* } } } } } }* dereferenceable(24), i8*) local_unnamed_addr

<%ID> = inttoptr i64 <%ID> to i8**                                                                                      
<%ID> = ptrtoint i8** <%ID> to i64                                                                                      
<%ID> = inttoptr i64 <%ID> to i8*                                                                                       
expected answer:
		<%ID> = ptrtoint i8* <%ID> to i64                                                                                       
Nearest neighbors:
		<%ID> = ptrtoint i8** <%ID> to i64                                                                                      
		<%ID> = inttoptr i64 <%ID> to i8*                                                                                       
		<%ID> = getelementptr i8*, i8** <%ID>, i64 <%ID>                                                                        
		<%ID> = phi i8** [ <%ID>, <%ID> ], [ null, <%ID> ]                                                                      
		<%ID> = ptrtoint { i32, i32, i32, { [4 x i8*] }, { [4 x i8*] }, { opaque*, { { i32 (...)**, i64 }, i64 }* }, i32, opaque*, opaque* }** <%ID> to i64
------------------------------------------------------------------------------------------------------------------------
Structure - Vector equivalents (a): 450
------------------------------------------------------------------------------------------------------------------------
--- Correct predictions:

<%ID> = extractvalue { i32, i32, i32, i32 } <%ID>, 0                                                                    
<%ID> = extractelement <4 x i32> <%ID>, <TYP> 0                                                                         
<%ID> = extractvalue { i32, i32, i32, i32 } <%ID>, 1                                                                    
expected answer:
		<%ID> = extractelement <4 x i32> <%ID>, <TYP> 1                                                                         
Nearest neighbors:
		<%ID> = extractelement <4 x i32> <%ID>, <TYP> 0                                                                         
		<%ID> = extractelement <4 x i32> <%ID>, <TYP> 1                                                                         
		<%ID> = extractelement <4 x i32> <%ID>, <TYP> 3                                                                         
		<%ID> = extractelement <4 x i32> <%ID>, <TYP> 2                                                                         
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      

<%ID> = extractvalue { double, double } <%ID>, 0                                                                        
<%ID> = extractelement <2 x double> <%ID>, <TYP> 0                                                                      
<%ID> = extractvalue { double, double } <%ID>, 1                                                                        
expected answer:
		<%ID> = extractelement <2 x double> <%ID>, <TYP> 1                                                                      
Nearest neighbors:
		<%ID> = extractelement <2 x double> <%ID>, <TYP> 0                                                                      
		<%ID> = extractelement <2 x double> <%ID>, <TYP> 1                                                                      
		<%ID> = insertelement <2 x double> undef, double <%ID>, <TYP> 0                                                         
		<%ID> = fmul <2 x double> <%ID>, <%ID>                                                                                  
		<%ID> = fmul double <%ID>, <%ID>                                                                                        

<%ID> = extractvalue { i32, i32, i32, i32 } <%ID>, 0                                                                    
<%ID> = extractelement <4 x i32> <%ID>, <TYP> 0                                                                         
<%ID> = extractvalue { i32, i32, i32, i32 } <%ID>, 2                                                                    
expected answer:
		<%ID> = extractelement <4 x i32> <%ID>, <TYP> 2                                                                         
Nearest neighbors:
		<%ID> = extractelement <4 x i32> <%ID>, <TYP> 0                                                                         
		<%ID> = extractelement <4 x i32> <%ID>, <TYP> 1                                                                         
		<%ID> = extractelement <4 x i32> <%ID>, <TYP> 3                                                                         
		<%ID> = extractelement <4 x i32> <%ID>, <TYP> 2                                                                         
		<%ID> = insertelement <4 x i32> <%ID>, <TYP> <%ID>, <TYP> 3                                                             

<%ID> = extractvalue { i32, i32, i32, i32 } <%ID>, 0                                                                    
<%ID> = extractelement <4 x i32> <%ID>, <TYP> 0                                                                         
<%ID> = extractvalue { i32, i32, i32, i32 } <%ID>, 3                                                                    
expected answer:
		<%ID> = extractelement <4 x i32> <%ID>, <TYP> 3                                                                         
Nearest neighbors:
		<%ID> = extractelement <4 x i32> <%ID>, <TYP> 0                                                                         
		<%ID> = extractelement <4 x i32> <%ID>, <TYP> 1                                                                         
		<%ID> = extractelement <4 x i32> <%ID>, <TYP> 2                                                                         
		<%ID> = extractelement <4 x i32> <%ID>, <TYP> 3                                                                         
		<%ID> = mul <4 x i32> <%ID>, <%ID>                                                                                      

<%ID> = extractvalue { i32, i32, i32, i32 } <%ID>, 1                                                                    
<%ID> = extractelement <4 x i32> <%ID>, <TYP> 1                                                                         
<%ID> = extractvalue { i32, i32, i32, i32 } <%ID>, 2                                                                    
expected answer:
		<%ID> = extractelement <4 x i32> <%ID>, <TYP> 2                                                                         
Nearest neighbors:
		<%ID> = extractelement <4 x i32> <%ID>, <TYP> 1                                                                         
		<%ID> = extractelement <4 x i32> <%ID>, <TYP> 3                                                                         
		<%ID> = extractelement <4 x i32> <%ID>, <TYP> 2                                                                         
		<%ID> = extractelement <4 x i32> <%ID>, <TYP> 0                                                                         
		<%ID> = insertelement <4 x i32> <%ID>, <TYP> <%ID>, <TYP> 3                                                             

<%ID> = extractvalue { i32, i32, i32, i32 } <%ID>, 1                                                                    
<%ID> = extractelement <4 x i32> <%ID>, <TYP> 1                                                                         
<%ID> = extractvalue { i32, i32, i32, i32 } <%ID>, 3                                                                    
expected answer:
		<%ID> = extractelement <4 x i32> <%ID>, <TYP> 3                                                                         
Nearest neighbors:
		<%ID> = extractelement <4 x i32> <%ID>, <TYP> 1                                                                         
		<%ID> = extractelement <4 x i32> <%ID>, <TYP> 2                                                                         
		<%ID> = extractelement <4 x i32> <%ID>, <TYP> 3                                                                         
		<%ID> = extractelement <4 x i32> <%ID>, <TYP> 0                                                                         
		<%ID> = insertelement <4 x i32> <%ID>, <TYP> <%ID>, <TYP> 3                                                             

<%ID> = extractvalue { i32, i32, i32, i32 } <%ID>, 2                                                                    
<%ID> = extractelement <4 x i32> <%ID>, <TYP> 2                                                                         
<%ID> = extractvalue { i32, i32, i32, i32 } <%ID>, 3                                                                    
expected answer:
		<%ID> = extractelement <4 x i32> <%ID>, <TYP> 3                                                                         
Nearest neighbors:
		<%ID> = extractelement <4 x i32> <%ID>, <TYP> 2                                                                         
		<%ID> = extractelement <4 x i32> <%ID>, <TYP> 3                                                                         
		<%ID> = extractelement <4 x i32> <%ID>, <TYP> 1                                                                         
		<%ID> = extractelement <4 x i32> <%ID>, <TYP> 0                                                                         
		<%ID> = insertelement <4 x i32> <%ID>, <TYP> <%ID>, <TYP> 3                                                             

--- Incorrect predictions:

<%ID> = extractvalue { i64, i64 } <%ID>, 0                                                                              
<%ID> = extractelement <2 x i64> <%ID>, <TYP> 0                                                                         
<%ID> = extractvalue { i64, i64 } <%ID>, 1                                                                              
expected answer:
		<%ID> = extractelement <2 x i64> <%ID>, <TYP> 1                                                                         
Nearest neighbors:
		<%ID> = extractelement <2 x i64> <%ID>, <TYP> 0                                                                         
		<%ID> = extractvalue { i64, i64 } <%ID>, 1                                                                              
		<%ID> = phi { { i64, [56 x i8] } }* [ <%ID>, <%ID> ], [ <%ID>, <%ID> ]                                                  
		store { { { float*, i64, i64 } } }* <%ID>, { { { float*, i64, i64 } } }** <%ID>, align 8                                
		<%ID> = icmp eq i8 <%ID>, <INT>                                                                                         
